/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package io.k8s.client.models;

import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PodSpec is a description of a pod.
 */
public class V1PodSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative
     * to StartTime before the system will actively try to mark it failed and
     * kill associated containers. Value must be a positive integer.
     */
    @JsonProperty(value = "activeDeadlineSeconds")
    private Long activeDeadlineSeconds;

    /**
     * If specified, the pod's scheduling constraints.
     */
    @JsonProperty(value = "affinity")
    private V1Affinity affinity;

    /**
     * AutomountServiceAccountToken indicates whether a service account token
     * should be automatically mounted.
     */
    @JsonProperty(value = "automountServiceAccountToken")
    private Boolean automountServiceAccountToken;

    /**
     * List of containers belonging to the pod. Containers cannot currently be
     * added or removed. There must be at least one container in a Pod. Cannot
     * be updated. More info: http://kubernetes.io/docs/user-guide/containers.
     */
    @JsonProperty(value = "containers", required = true)
    private List<V1Container> containers;

    /**
     * Set DNS policy for containers within the pod. One of
     * 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to
     * "ClusterFirst". To have DNS options set along with hostNetwork, you have
     * to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
     */
    @JsonProperty(value = "dnsPolicy")
    private String dnsPolicy;

    /**
     * Use the host's ipc namespace. Optional: Default to false.
     */
    @JsonProperty(value = "hostIPC")
    private Boolean hostIPC;

    /**
     * Host networking requested for this pod. Use the host's network
     * namespace. If this option is set, the ports that will be used must be
     * specified. Default to false.
     */
    @JsonProperty(value = "hostNetwork")
    private Boolean hostNetwork;

    /**
     * Use the host's pid namespace. Optional: Default to false.
     */
    @JsonProperty(value = "hostPID")
    private Boolean hostPID;

    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname
     * will be set to a system-defined value.
     */
    @JsonProperty(value = "hostname")
    private String hostname;

    /**
     * ImagePullSecrets is an optional list of references to secrets in the
     * same namespace to use for pulling any of the images used by this
     * PodSpec. If specified, these secrets will be passed to individual puller
     * implementations for them to use. For example, in the case of docker,
     * only DockerConfig type secrets are honored. More info:
     * http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod.
     */
    @JsonProperty(value = "imagePullSecrets")
    private List<V1LocalObjectReference> imagePullSecrets;

    /**
     * List of initialization containers belonging to the pod. Init containers
     * are executed in order prior to containers being started. If any init
     * container fails, the pod is considered to have failed and is handled
     * according to its restartPolicy. The name for an init container or normal
     * container must be unique among all containers. Init containers may not
     * have Lifecycle actions, Readiness probes, or Liveness probes. The
     * resourceRequirements of an init container are taken into account during
     * scheduling by finding the highest request/limit for each resource type,
     * and then using the max of of that value or the sum of the normal
     * containers. Limits are applied to init containers in a similar fashion.
     * Init containers cannot currently be added or removed. Cannot be updated.
     * More info: http://kubernetes.io/docs/user-guide/containers.
     */
    @JsonProperty(value = "initContainers")
    private List<V1Container> initContainers;

    /**
     * NodeName is a request to schedule this pod onto a specific node. If it
     * is non-empty, the scheduler simply schedules this pod onto that node,
     * assuming that it fits resource requirements.
     */
    @JsonProperty(value = "nodeName")
    private String nodeName;

    /**
     * NodeSelector is a selector which must be true for the pod to fit on a
     * node. Selector which must match a node's labels for the pod to be
     * scheduled on that node. More info:
     * http://kubernetes.io/docs/user-guide/node-selection/README.
     */
    @JsonProperty(value = "nodeSelector")
    private Map<String, String> nodeSelector;

    /**
     * Restart policy for all containers within the pod. One of Always,
     * OnFailure, Never. Default to Always. More info:
     * http://kubernetes.io/docs/user-guide/pod-states#restartpolicy.
     */
    @JsonProperty(value = "restartPolicy")
    private String restartPolicy;

    /**
     * If specified, the pod will be dispatched by specified scheduler. If not
     * specified, the pod will be dispatched by default scheduler.
     */
    @JsonProperty(value = "schedulerName")
    private String schedulerName;

    /**
     * SecurityContext holds pod-level security attributes and common container
     * settings. Optional: Defaults to empty.  See type description for default
     * values of each field.
     */
    @JsonProperty(value = "securityContext")
    private V1PodSecurityContext securityContext;

    /**
     * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName.
     * Deprecated: Use serviceAccountName instead.
     */
    @JsonProperty(value = "serviceAccount")
    private String serviceAccount;

    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this
     * pod. More info:
     * http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
     */
    @JsonProperty(value = "serviceAccountName")
    private String serviceAccountName;

    /**
     * If specified, the fully qualified Pod hostname will be
     * "&lt;hostname&gt;.&lt;subdomain&gt;.&lt;pod
     * namespace&gt;.svc.&lt;cluster domain&gt;". If not specified, the pod
     * will not have a domainname at all.
     */
    @JsonProperty(value = "subdomain")
    private String subdomain;

    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May
     * be decreased in delete request. Value must be non-negative integer. The
     * value zero indicates delete immediately. If this value is nil, the
     * default grace period will be used instead. The grace period is the
     * duration in seconds after the processes running in the pod are sent a
     * termination signal and the time when the processes are forcibly halted
     * with a kill signal. Set this value longer than the expected cleanup time
     * for your process. Defaults to 30 seconds.
     */
    @JsonProperty(value = "terminationGracePeriodSeconds")
    private Long terminationGracePeriodSeconds;

    /**
     * If specified, the pod's tolerations.
     */
    @JsonProperty(value = "tolerations")
    private List<V1Toleration> tolerations;

    /**
     * List of volumes that can be mounted by containers belonging to the pod.
     * More info: http://kubernetes.io/docs/user-guide/volumes.
     */
    @JsonProperty(value = "volumes")
    private List<V1Volume> volumes;

    /**
     * Get the activeDeadlineSeconds value.
     *
     * @return the activeDeadlineSeconds value
     */
    public Long activeDeadlineSeconds() {
        return this.activeDeadlineSeconds;
    }

    /**
     * Set the activeDeadlineSeconds value.
     *
     * @param activeDeadlineSeconds the activeDeadlineSeconds value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withActiveDeadlineSeconds(Long activeDeadlineSeconds) {
        this.activeDeadlineSeconds = activeDeadlineSeconds;
        return this;
    }

    /**
     * Get the affinity value.
     *
     * @return the affinity value
     */
    public V1Affinity affinity() {
        return this.affinity;
    }

    /**
     * Set the affinity value.
     *
     * @param affinity the affinity value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withAffinity(V1Affinity affinity) {
        this.affinity = affinity;
        return this;
    }

    /**
     * Get the automountServiceAccountToken value.
     *
     * @return the automountServiceAccountToken value
     */
    public Boolean automountServiceAccountToken() {
        return this.automountServiceAccountToken;
    }

    /**
     * Set the automountServiceAccountToken value.
     *
     * @param automountServiceAccountToken the automountServiceAccountToken value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withAutomountServiceAccountToken(Boolean automountServiceAccountToken) {
        this.automountServiceAccountToken = automountServiceAccountToken;
        return this;
    }

    /**
     * Get the containers value.
     *
     * @return the containers value
     */
    public List<V1Container> containers() {
        return this.containers;
    }

    /**
     * Set the containers value.
     *
     * @param containers the containers value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withContainers(List<V1Container> containers) {
        this.containers = containers;
        return this;
    }

    /**
     * Get the dnsPolicy value.
     *
     * @return the dnsPolicy value
     */
    public String dnsPolicy() {
        return this.dnsPolicy;
    }

    /**
     * Set the dnsPolicy value.
     *
     * @param dnsPolicy the dnsPolicy value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withDnsPolicy(String dnsPolicy) {
        this.dnsPolicy = dnsPolicy;
        return this;
    }

    /**
     * Get the hostIPC value.
     *
     * @return the hostIPC value
     */
    public Boolean hostIPC() {
        return this.hostIPC;
    }

    /**
     * Set the hostIPC value.
     *
     * @param hostIPC the hostIPC value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withHostIPC(Boolean hostIPC) {
        this.hostIPC = hostIPC;
        return this;
    }

    /**
     * Get the hostNetwork value.
     *
     * @return the hostNetwork value
     */
    public Boolean hostNetwork() {
        return this.hostNetwork;
    }

    /**
     * Set the hostNetwork value.
     *
     * @param hostNetwork the hostNetwork value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withHostNetwork(Boolean hostNetwork) {
        this.hostNetwork = hostNetwork;
        return this;
    }

    /**
     * Get the hostPID value.
     *
     * @return the hostPID value
     */
    public Boolean hostPID() {
        return this.hostPID;
    }

    /**
     * Set the hostPID value.
     *
     * @param hostPID the hostPID value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withHostPID(Boolean hostPID) {
        this.hostPID = hostPID;
        return this;
    }

    /**
     * Get the hostname value.
     *
     * @return the hostname value
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * Set the hostname value.
     *
     * @param hostname the hostname value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the imagePullSecrets value.
     *
     * @return the imagePullSecrets value
     */
    public List<V1LocalObjectReference> imagePullSecrets() {
        return this.imagePullSecrets;
    }

    /**
     * Set the imagePullSecrets value.
     *
     * @param imagePullSecrets the imagePullSecrets value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withImagePullSecrets(List<V1LocalObjectReference> imagePullSecrets) {
        this.imagePullSecrets = imagePullSecrets;
        return this;
    }

    /**
     * Get the initContainers value.
     *
     * @return the initContainers value
     */
    public List<V1Container> initContainers() {
        return this.initContainers;
    }

    /**
     * Set the initContainers value.
     *
     * @param initContainers the initContainers value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withInitContainers(List<V1Container> initContainers) {
        this.initContainers = initContainers;
        return this;
    }

    /**
     * Get the nodeName value.
     *
     * @return the nodeName value
     */
    public String nodeName() {
        return this.nodeName;
    }

    /**
     * Set the nodeName value.
     *
     * @param nodeName the nodeName value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withNodeName(String nodeName) {
        this.nodeName = nodeName;
        return this;
    }

    /**
     * Get the nodeSelector value.
     *
     * @return the nodeSelector value
     */
    public Map<String, String> nodeSelector() {
        return this.nodeSelector;
    }

    /**
     * Set the nodeSelector value.
     *
     * @param nodeSelector the nodeSelector value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withNodeSelector(Map<String, String> nodeSelector) {
        this.nodeSelector = nodeSelector;
        return this;
    }

    /**
     * Get the restartPolicy value.
     *
     * @return the restartPolicy value
     */
    public String restartPolicy() {
        return this.restartPolicy;
    }

    /**
     * Set the restartPolicy value.
     *
     * @param restartPolicy the restartPolicy value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withRestartPolicy(String restartPolicy) {
        this.restartPolicy = restartPolicy;
        return this;
    }

    /**
     * Get the schedulerName value.
     *
     * @return the schedulerName value
     */
    public String schedulerName() {
        return this.schedulerName;
    }

    /**
     * Set the schedulerName value.
     *
     * @param schedulerName the schedulerName value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withSchedulerName(String schedulerName) {
        this.schedulerName = schedulerName;
        return this;
    }

    /**
     * Get the securityContext value.
     *
     * @return the securityContext value
     */
    public V1PodSecurityContext securityContext() {
        return this.securityContext;
    }

    /**
     * Set the securityContext value.
     *
     * @param securityContext the securityContext value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withSecurityContext(V1PodSecurityContext securityContext) {
        this.securityContext = securityContext;
        return this;
    }

    /**
     * Get the serviceAccount value.
     *
     * @return the serviceAccount value
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }

    /**
     * Set the serviceAccount value.
     *
     * @param serviceAccount the serviceAccount value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withServiceAccount(String serviceAccount) {
        this.serviceAccount = serviceAccount;
        return this;
    }

    /**
     * Get the serviceAccountName value.
     *
     * @return the serviceAccountName value
     */
    public String serviceAccountName() {
        return this.serviceAccountName;
    }

    /**
     * Set the serviceAccountName value.
     *
     * @param serviceAccountName the serviceAccountName value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withServiceAccountName(String serviceAccountName) {
        this.serviceAccountName = serviceAccountName;
        return this;
    }

    /**
     * Get the subdomain value.
     *
     * @return the subdomain value
     */
    public String subdomain() {
        return this.subdomain;
    }

    /**
     * Set the subdomain value.
     *
     * @param subdomain the subdomain value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withSubdomain(String subdomain) {
        this.subdomain = subdomain;
        return this;
    }

    /**
     * Get the terminationGracePeriodSeconds value.
     *
     * @return the terminationGracePeriodSeconds value
     */
    public Long terminationGracePeriodSeconds() {
        return this.terminationGracePeriodSeconds;
    }

    /**
     * Set the terminationGracePeriodSeconds value.
     *
     * @param terminationGracePeriodSeconds the terminationGracePeriodSeconds value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withTerminationGracePeriodSeconds(Long terminationGracePeriodSeconds) {
        this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
        return this;
    }

    /**
     * Get the tolerations value.
     *
     * @return the tolerations value
     */
    public List<V1Toleration> tolerations() {
        return this.tolerations;
    }

    /**
     * Set the tolerations value.
     *
     * @param tolerations the tolerations value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withTolerations(List<V1Toleration> tolerations) {
        this.tolerations = tolerations;
        return this;
    }

    /**
     * Get the volumes value.
     *
     * @return the volumes value
     */
    public List<V1Volume> volumes() {
        return this.volumes;
    }

    /**
     * Set the volumes value.
     *
     * @param volumes the volumes value to set
     * @return the V1PodSpec object itself.
     */
    public V1PodSpec withVolumes(List<V1Volume> volumes) {
        this.volumes = volumes;
        return this;
    }

}
