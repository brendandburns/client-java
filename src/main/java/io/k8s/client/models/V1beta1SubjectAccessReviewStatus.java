/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package io.k8s.client.models;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SubjectAccessReviewStatus.
 */
public class V1beta1SubjectAccessReviewStatus {
    /**
     * Allowed is required.  True if the action would be allowed, false
     * otherwise.
     */
    @JsonProperty(value = "allowed", required = true)
    private boolean allowed;

    /**
     * EvaluationError is an indication that some error occurred during the
     * authorization check. It is entirely possible to get an error and be able
     * to continue determine authorization status in spite of it. For instance,
     * RBAC can be missing a role, but enough roles are still present and bound
     * to reason about the request.
     */
    @JsonProperty(value = "evaluationError")
    private String evaluationError;

    /**
     * Reason is optional.  It indicates why a request was allowed or denied.
     */
    @JsonProperty(value = "reason")
    private String reason;

    /**
     * Get the allowed value.
     *
     * @return the allowed value
     */
    public boolean allowed() {
        return this.allowed;
    }

    /**
     * Set the allowed value.
     *
     * @param allowed the allowed value to set
     * @return the V1beta1SubjectAccessReviewStatus object itself.
     */
    public V1beta1SubjectAccessReviewStatus withAllowed(boolean allowed) {
        this.allowed = allowed;
        return this;
    }

    /**
     * Get the evaluationError value.
     *
     * @return the evaluationError value
     */
    public String evaluationError() {
        return this.evaluationError;
    }

    /**
     * Set the evaluationError value.
     *
     * @param evaluationError the evaluationError value to set
     * @return the V1beta1SubjectAccessReviewStatus object itself.
     */
    public V1beta1SubjectAccessReviewStatus withEvaluationError(String evaluationError) {
        this.evaluationError = evaluationError;
        return this;
    }

    /**
     * Get the reason value.
     *
     * @return the reason value
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Set the reason value.
     *
     * @param reason the reason value to set
     * @return the V1beta1SubjectAccessReviewStatus object itself.
     */
    public V1beta1SubjectAccessReviewStatus withReason(String reason) {
        this.reason = reason;
        return this;
    }

}
