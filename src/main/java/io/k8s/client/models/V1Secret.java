/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package io.k8s.client.models;

import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Secret holds secret data of a certain type. The total bytes of the values in
 * the Data field must be less than MaxSecretSize bytes.
 */
public class V1Secret {
    /**
     * APIVersion defines the versioned schema of this representation of an
     * object. Servers should convert recognized schemas to the latest internal
     * value, and may reject unrecognized values. More info:
     * http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources.
     */
    @JsonProperty(value = "apiVersion")
    private String apiVersion;

    /**
     * Data contains the secret data. Each key must be a valid DNS_SUBDOMAIN or
     * leading dot followed by valid DNS_SUBDOMAIN. The serialized form of the
     * secret data is a base64 encoded string, representing the arbitrary
     * (possibly non-string) data value here. Described in
     * https://tools.ietf.org/html/rfc4648#section-4.
     */
    @JsonProperty(value = "data")
    private Map<String, byte[]> data;

    /**
     * Kind is a string value representing the REST resource this object
     * represents. Servers may infer this from the endpoint the client submits
     * requests to. Cannot be updated. In CamelCase. More info:
     * http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds.
     */
    @JsonProperty(value = "kind")
    private String kind;

    /**
     * Standard object's metadata. More info:
     * http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata.
     */
    @JsonProperty(value = "metadata")
    private V1ObjectMeta metadata;

    /**
     * stringData allows specifying non-binary secret data in string form. It
     * is provided as a write-only convenience method. All keys and values are
     * merged into the data field on write, overwriting any existing values. It
     * is never output when reading from the API.
     */
    @JsonProperty(value = "stringData")
    private Map<String, String> stringData;

    /**
     * Used to facilitate programmatic handling of secret data.
     */
    @JsonProperty(value = "type")
    private String type;

    /**
     * Get the apiVersion value.
     *
     * @return the apiVersion value
     */
    public String apiVersion() {
        return this.apiVersion;
    }

    /**
     * Set the apiVersion value.
     *
     * @param apiVersion the apiVersion value to set
     * @return the V1Secret object itself.
     */
    public V1Secret withApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    /**
     * Get the data value.
     *
     * @return the data value
     */
    public Map<String, byte[]> data() {
        return this.data;
    }

    /**
     * Set the data value.
     *
     * @param data the data value to set
     * @return the V1Secret object itself.
     */
    public V1Secret withData(Map<String, byte[]> data) {
        this.data = data;
        return this;
    }

    /**
     * Get the kind value.
     *
     * @return the kind value
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind value.
     *
     * @param kind the kind value to set
     * @return the V1Secret object itself.
     */
    public V1Secret withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the metadata value.
     *
     * @return the metadata value
     */
    public V1ObjectMeta metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata value.
     *
     * @param metadata the metadata value to set
     * @return the V1Secret object itself.
     */
    public V1Secret withMetadata(V1ObjectMeta metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the stringData value.
     *
     * @return the stringData value
     */
    public Map<String, String> stringData() {
        return this.stringData;
    }

    /**
     * Set the stringData value.
     *
     * @param stringData the stringData value to set
     * @return the V1Secret object itself.
     */
    public V1Secret withStringData(Map<String, String> stringData) {
        this.stringData = stringData;
        return this;
    }

    /**
     * Get the type value.
     *
     * @return the type value
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type value.
     *
     * @param type the type value to set
     * @return the V1Secret object itself.
     */
    public V1Secret withType(String type) {
        this.type = type;
        return this;
    }

}
