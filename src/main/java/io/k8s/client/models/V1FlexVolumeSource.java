/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package io.k8s.client.models;

import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FlexVolume represents a generic volume resource that is provisioned/attached
 * using an exec based plugin. This is an alpha feature and may change in
 * future.
 */
public class V1FlexVolumeSource {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    @JsonProperty(value = "driver", required = true)
    private String driver;

    /**
     * Filesystem type to mount. Must be a filesystem type supported by the
     * host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem
     * depends on FlexVolume script.
     */
    @JsonProperty(value = "fsType")
    private String fsType;

    /**
     * Optional: Extra command options if any.
     */
    @JsonProperty(value = "options")
    private Map<String, String> options;

    /**
     * Optional: Defaults to false (read/write). ReadOnly here will force the
     * ReadOnly setting in VolumeMounts.
     */
    @JsonProperty(value = "readOnly")
    private Boolean readOnly;

    /**
     * Optional: SecretRef is reference to the secret object containing
     * sensitive information to pass to the plugin scripts. This may be empty
     * if no secret object is specified. If the secret object contains more
     * than one secret, all secrets are passed to the plugin scripts.
     */
    @JsonProperty(value = "secretRef")
    private V1LocalObjectReference secretRef;

    /**
     * Get the driver value.
     *
     * @return the driver value
     */
    public String driver() {
        return this.driver;
    }

    /**
     * Set the driver value.
     *
     * @param driver the driver value to set
     * @return the V1FlexVolumeSource object itself.
     */
    public V1FlexVolumeSource withDriver(String driver) {
        this.driver = driver;
        return this;
    }

    /**
     * Get the fsType value.
     *
     * @return the fsType value
     */
    public String fsType() {
        return this.fsType;
    }

    /**
     * Set the fsType value.
     *
     * @param fsType the fsType value to set
     * @return the V1FlexVolumeSource object itself.
     */
    public V1FlexVolumeSource withFsType(String fsType) {
        this.fsType = fsType;
        return this;
    }

    /**
     * Get the options value.
     *
     * @return the options value
     */
    public Map<String, String> options() {
        return this.options;
    }

    /**
     * Set the options value.
     *
     * @param options the options value to set
     * @return the V1FlexVolumeSource object itself.
     */
    public V1FlexVolumeSource withOptions(Map<String, String> options) {
        this.options = options;
        return this;
    }

    /**
     * Get the readOnly value.
     *
     * @return the readOnly value
     */
    public Boolean readOnly() {
        return this.readOnly;
    }

    /**
     * Set the readOnly value.
     *
     * @param readOnly the readOnly value to set
     * @return the V1FlexVolumeSource object itself.
     */
    public V1FlexVolumeSource withReadOnly(Boolean readOnly) {
        this.readOnly = readOnly;
        return this;
    }

    /**
     * Get the secretRef value.
     *
     * @return the secretRef value
     */
    public V1LocalObjectReference secretRef() {
        return this.secretRef;
    }

    /**
     * Set the secretRef value.
     *
     * @param secretRef the secretRef value to set
     * @return the V1FlexVolumeSource object itself.
     */
    public V1FlexVolumeSource withSecretRef(V1LocalObjectReference secretRef) {
        this.secretRef = secretRef;
        return this;
    }

}
