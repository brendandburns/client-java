/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package io.k8s.client.models;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SecurityContext holds security configuration that will be applied to a
 * container. Some fields are present in both SecurityContext and
 * PodSecurityContext.  When both are set, the values in SecurityContext take
 * precedence.
 */
public class V1SecurityContext {
    /**
     * The capabilities to add/drop when running containers. Defaults to the
     * default set of capabilities granted by the container runtime.
     */
    @JsonProperty(value = "capabilities")
    private V1Capabilities capabilities;

    /**
     * Run container in privileged mode. Processes in privileged containers are
     * essentially equivalent to root on the host. Defaults to false.
     */
    @JsonProperty(value = "privileged")
    private Boolean privileged;

    /**
     * Whether this container has a read-only root filesystem. Default is
     * false.
     */
    @JsonProperty(value = "readOnlyRootFilesystem")
    private Boolean readOnlyRootFilesystem;

    /**
     * Indicates that the container must run as a non-root user. If true, the
     * Kubelet will validate the image at runtime to ensure that it does not
     * run as UID 0 (root) and fail to start the container if it does. If unset
     * or false, no such validation will be performed. May also be set in
     * PodSecurityContext.  If set in both SecurityContext and
     * PodSecurityContext, the value specified in SecurityContext takes
     * precedence.
     */
    @JsonProperty(value = "runAsNonRoot")
    private Boolean runAsNonRoot;

    /**
     * The UID to run the entrypoint of the container process. Defaults to user
     * specified in image metadata if unspecified. May also be set in
     * PodSecurityContext.  If set in both SecurityContext and
     * PodSecurityContext, the value specified in SecurityContext takes
     * precedence.
     */
    @JsonProperty(value = "runAsUser")
    private Long runAsUser;

    /**
     * The SELinux context to be applied to the container. If unspecified, the
     * container runtime will allocate a random SELinux context for each
     * container.  May also be set in PodSecurityContext.  If set in both
     * SecurityContext and PodSecurityContext, the value specified in
     * SecurityContext takes precedence.
     */
    @JsonProperty(value = "seLinuxOptions")
    private V1SELinuxOptions seLinuxOptions;

    /**
     * Get the capabilities value.
     *
     * @return the capabilities value
     */
    public V1Capabilities capabilities() {
        return this.capabilities;
    }

    /**
     * Set the capabilities value.
     *
     * @param capabilities the capabilities value to set
     * @return the V1SecurityContext object itself.
     */
    public V1SecurityContext withCapabilities(V1Capabilities capabilities) {
        this.capabilities = capabilities;
        return this;
    }

    /**
     * Get the privileged value.
     *
     * @return the privileged value
     */
    public Boolean privileged() {
        return this.privileged;
    }

    /**
     * Set the privileged value.
     *
     * @param privileged the privileged value to set
     * @return the V1SecurityContext object itself.
     */
    public V1SecurityContext withPrivileged(Boolean privileged) {
        this.privileged = privileged;
        return this;
    }

    /**
     * Get the readOnlyRootFilesystem value.
     *
     * @return the readOnlyRootFilesystem value
     */
    public Boolean readOnlyRootFilesystem() {
        return this.readOnlyRootFilesystem;
    }

    /**
     * Set the readOnlyRootFilesystem value.
     *
     * @param readOnlyRootFilesystem the readOnlyRootFilesystem value to set
     * @return the V1SecurityContext object itself.
     */
    public V1SecurityContext withReadOnlyRootFilesystem(Boolean readOnlyRootFilesystem) {
        this.readOnlyRootFilesystem = readOnlyRootFilesystem;
        return this;
    }

    /**
     * Get the runAsNonRoot value.
     *
     * @return the runAsNonRoot value
     */
    public Boolean runAsNonRoot() {
        return this.runAsNonRoot;
    }

    /**
     * Set the runAsNonRoot value.
     *
     * @param runAsNonRoot the runAsNonRoot value to set
     * @return the V1SecurityContext object itself.
     */
    public V1SecurityContext withRunAsNonRoot(Boolean runAsNonRoot) {
        this.runAsNonRoot = runAsNonRoot;
        return this;
    }

    /**
     * Get the runAsUser value.
     *
     * @return the runAsUser value
     */
    public Long runAsUser() {
        return this.runAsUser;
    }

    /**
     * Set the runAsUser value.
     *
     * @param runAsUser the runAsUser value to set
     * @return the V1SecurityContext object itself.
     */
    public V1SecurityContext withRunAsUser(Long runAsUser) {
        this.runAsUser = runAsUser;
        return this;
    }

    /**
     * Get the seLinuxOptions value.
     *
     * @return the seLinuxOptions value
     */
    public V1SELinuxOptions seLinuxOptions() {
        return this.seLinuxOptions;
    }

    /**
     * Set the seLinuxOptions value.
     *
     * @param seLinuxOptions the seLinuxOptions value to set
     * @return the V1SecurityContext object itself.
     */
    public V1SecurityContext withSeLinuxOptions(V1SELinuxOptions seLinuxOptions) {
        this.seLinuxOptions = seLinuxOptions;
        return this;
    }

}
