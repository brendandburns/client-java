/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package io.k8s.client.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PodSecurityContext holds pod-level security attributes and common container
 * settings. Some fields are also present in container.securityContext.  Field
 * values of container.securityContext take precedence over field values of
 * PodSecurityContext.
 */
public class V1PodSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod.
     * Some volume types allow the Kubelet to change the ownership of that
     * volume to be owned by the pod:
     *
     * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new
     * files created in the volume will be owned by FSGroup) 3. The permission
     * bits are OR'd with rw-rw----
     *
     * If unset, the Kubelet will not modify the ownership and permissions of
     * any volume.
     */
    @JsonProperty(value = "fsGroup")
    private Long fsGroup;

    /**
     * Indicates that the container must run as a non-root user. If true, the
     * Kubelet will validate the image at runtime to ensure that it does not
     * run as UID 0 (root) and fail to start the container if it does. If unset
     * or false, no such validation will be performed. May also be set in
     * SecurityContext.  If set in both SecurityContext and PodSecurityContext,
     * the value specified in SecurityContext takes precedence.
     */
    @JsonProperty(value = "runAsNonRoot")
    private Boolean runAsNonRoot;

    /**
     * The UID to run the entrypoint of the container process. Defaults to user
     * specified in image metadata if unspecified. May also be set in
     * SecurityContext.  If set in both SecurityContext and PodSecurityContext,
     * the value specified in SecurityContext takes precedence for that
     * container.
     */
    @JsonProperty(value = "runAsUser")
    private Long runAsUser;

    /**
     * The SELinux context to be applied to all containers. If unspecified, the
     * container runtime will allocate a random SELinux context for each
     * container.  May also be set in SecurityContext.  If set in both
     * SecurityContext and PodSecurityContext, the value specified in
     * SecurityContext takes precedence for that container.
     */
    @JsonProperty(value = "seLinuxOptions")
    private V1SELinuxOptions seLinuxOptions;

    /**
     * A list of groups applied to the first process run in each container, in
     * addition to the container's primary GID.  If unspecified, no groups will
     * be added to any container.
     */
    @JsonProperty(value = "supplementalGroups")
    private List<Long> supplementalGroups;

    /**
     * Get the fsGroup value.
     *
     * @return the fsGroup value
     */
    public Long fsGroup() {
        return this.fsGroup;
    }

    /**
     * Set the fsGroup value.
     *
     * @param fsGroup the fsGroup value to set
     * @return the V1PodSecurityContext object itself.
     */
    public V1PodSecurityContext withFsGroup(Long fsGroup) {
        this.fsGroup = fsGroup;
        return this;
    }

    /**
     * Get the runAsNonRoot value.
     *
     * @return the runAsNonRoot value
     */
    public Boolean runAsNonRoot() {
        return this.runAsNonRoot;
    }

    /**
     * Set the runAsNonRoot value.
     *
     * @param runAsNonRoot the runAsNonRoot value to set
     * @return the V1PodSecurityContext object itself.
     */
    public V1PodSecurityContext withRunAsNonRoot(Boolean runAsNonRoot) {
        this.runAsNonRoot = runAsNonRoot;
        return this;
    }

    /**
     * Get the runAsUser value.
     *
     * @return the runAsUser value
     */
    public Long runAsUser() {
        return this.runAsUser;
    }

    /**
     * Set the runAsUser value.
     *
     * @param runAsUser the runAsUser value to set
     * @return the V1PodSecurityContext object itself.
     */
    public V1PodSecurityContext withRunAsUser(Long runAsUser) {
        this.runAsUser = runAsUser;
        return this;
    }

    /**
     * Get the seLinuxOptions value.
     *
     * @return the seLinuxOptions value
     */
    public V1SELinuxOptions seLinuxOptions() {
        return this.seLinuxOptions;
    }

    /**
     * Set the seLinuxOptions value.
     *
     * @param seLinuxOptions the seLinuxOptions value to set
     * @return the V1PodSecurityContext object itself.
     */
    public V1PodSecurityContext withSeLinuxOptions(V1SELinuxOptions seLinuxOptions) {
        this.seLinuxOptions = seLinuxOptions;
        return this;
    }

    /**
     * Get the supplementalGroups value.
     *
     * @return the supplementalGroups value
     */
    public List<Long> supplementalGroups() {
        return this.supplementalGroups;
    }

    /**
     * Set the supplementalGroups value.
     *
     * @param supplementalGroups the supplementalGroups value to set
     * @return the V1PodSecurityContext object itself.
     */
    public V1PodSecurityContext withSupplementalGroups(List<Long> supplementalGroups) {
        this.supplementalGroups = supplementalGroups;
        return this;
    }

}
