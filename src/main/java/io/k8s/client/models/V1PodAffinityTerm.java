/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package io.k8s.client.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Defines a set of pods (namely those matching the labelSelector relative to
 * the given namespace(s)) that this pod should be co-located (affinity) or not
 * co-located (anti-affinity) with, where co-located is defined as running on a
 * node whose value of the label with key &lt;topologyKey&gt; tches that of any
 * node on which a pod of the set of pods is running.
 */
public class V1PodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    @JsonProperty(value = "labelSelector")
    private V1LabelSelector labelSelector;

    /**
     * namespaces specifies which namespaces the labelSelector applies to
     * (matches against); null or empty list means "this pod's namespace".
     */
    @JsonProperty(value = "namespaces")
    private List<String> namespaces;

    /**
     * This pod should be co-located (affinity) or not co-located
     * (anti-affinity) with the pods matching the labelSelector in the
     * specified namespaces, where co-located is defined as running on a node
     * whose value of the label with key topologyKey matches that of any node
     * on which any of the selected pods is running. For
     * PreferredDuringScheduling pod anti-affinity, empty topologyKey is
     * interpreted as "all topologies" ("all topologies" here means all the
     * topologyKeys indicated by scheduler command-line argument
     * --failure-domains); for affinity and for RequiredDuringScheduling pod
     * anti-affinity, empty topologyKey is not allowed.
     */
    @JsonProperty(value = "topologyKey")
    private String topologyKey;

    /**
     * Get the labelSelector value.
     *
     * @return the labelSelector value
     */
    public V1LabelSelector labelSelector() {
        return this.labelSelector;
    }

    /**
     * Set the labelSelector value.
     *
     * @param labelSelector the labelSelector value to set
     * @return the V1PodAffinityTerm object itself.
     */
    public V1PodAffinityTerm withLabelSelector(V1LabelSelector labelSelector) {
        this.labelSelector = labelSelector;
        return this;
    }

    /**
     * Get the namespaces value.
     *
     * @return the namespaces value
     */
    public List<String> namespaces() {
        return this.namespaces;
    }

    /**
     * Set the namespaces value.
     *
     * @param namespaces the namespaces value to set
     * @return the V1PodAffinityTerm object itself.
     */
    public V1PodAffinityTerm withNamespaces(List<String> namespaces) {
        this.namespaces = namespaces;
        return this;
    }

    /**
     * Get the topologyKey value.
     *
     * @return the topologyKey value
     */
    public String topologyKey() {
        return this.topologyKey;
    }

    /**
     * Set the topologyKey value.
     *
     * @param topologyKey the topologyKey value to set
     * @return the V1PodAffinityTerm object itself.
     */
    public V1PodAffinityTerm withTopologyKey(String topologyKey) {
        this.topologyKey = topologyKey;
        return this;
    }

}
