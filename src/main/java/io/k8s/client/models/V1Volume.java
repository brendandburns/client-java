/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package io.k8s.client.models;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Volume represents a named volume in a pod that may be accessed by any
 * container in the pod.
 */
public class V1Volume {
    /**
     * AWSElasticBlockStore represents an AWS Disk resource that is attached to
     * a kubelet's host machine and then exposed to the pod. More info:
     * http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore.
     */
    @JsonProperty(value = "awsElasticBlockStore")
    private V1AWSElasticBlockStoreVolumeSource awsElasticBlockStore;

    /**
     * AzureDisk represents an Azure Data Disk mount on the host and bind mount
     * to the pod.
     */
    @JsonProperty(value = "azureDisk")
    private V1AzureDiskVolumeSource azureDisk;

    /**
     * AzureFile represents an Azure File Service mount on the host and bind
     * mount to the pod.
     */
    @JsonProperty(value = "azureFile")
    private V1AzureFileVolumeSource azureFile;

    /**
     * CephFS represents a Ceph FS mount on the host that shares a pod's
     * lifetime.
     */
    @JsonProperty(value = "cephfs")
    private V1CephFSVolumeSource cephfs;

    /**
     * Cinder represents a cinder volume attached and mounted on kubelets host
     * machine More info:
     * http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md.
     */
    @JsonProperty(value = "cinder")
    private V1CinderVolumeSource cinder;

    /**
     * ConfigMap represents a configMap that should populate this volume.
     */
    @JsonProperty(value = "configMap")
    private V1ConfigMapVolumeSource configMap;

    /**
     * DownwardAPI represents downward API about the pod that should populate
     * this volume.
     */
    @JsonProperty(value = "downwardAPI")
    private V1DownwardAPIVolumeSource downwardAPI;

    /**
     * EmptyDir represents a temporary directory that shares a pod's lifetime.
     * More info: http://kubernetes.io/docs/user-guide/volumes#emptydir.
     */
    @JsonProperty(value = "emptyDir")
    private V1EmptyDirVolumeSource emptyDir;

    /**
     * FC represents a Fibre Channel resource that is attached to a kubelet's
     * host machine and then exposed to the pod.
     */
    @JsonProperty(value = "fc")
    private V1FCVolumeSource fc;

    /**
     * FlexVolume represents a generic volume resource that is
     * provisioned/attached using an exec based plugin. This is an alpha
     * feature and may change in future.
     */
    @JsonProperty(value = "flexVolume")
    private V1FlexVolumeSource flexVolume;

    /**
     * Flocker represents a Flocker volume attached to a kubelet's host
     * machine. This depends on the Flocker control service being running.
     */
    @JsonProperty(value = "flocker")
    private V1FlockerVolumeSource flocker;

    /**
     * GCEPersistentDisk represents a GCE Disk resource that is attached to a
     * kubelet's host machine and then exposed to the pod. More info:
     * http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk.
     */
    @JsonProperty(value = "gcePersistentDisk")
    private V1GCEPersistentDiskVolumeSource gcePersistentDisk;

    /**
     * GitRepo represents a git repository at a particular revision.
     */
    @JsonProperty(value = "gitRepo")
    private V1GitRepoVolumeSource gitRepo;

    /**
     * Glusterfs represents a Glusterfs mount on the host that shares a pod's
     * lifetime. More info:
     * http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md.
     */
    @JsonProperty(value = "glusterfs")
    private V1GlusterfsVolumeSource glusterfs;

    /**
     * HostPath represents a pre-existing file or directory on the host machine
     * that is directly exposed to the container. This is generally used for
     * system agents or other privileged things that are allowed to see the
     * host machine. Most containers will NOT need this. More info:
     * http://kubernetes.io/docs/user-guide/volumes#hostpath.
     */
    @JsonProperty(value = "hostPath")
    private V1HostPathVolumeSource hostPath;

    /**
     * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's
     * host machine and then exposed to the pod. More info:
     * http://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md.
     */
    @JsonProperty(value = "iscsi")
    private V1ISCSIVolumeSource iscsi;

    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info:
     * http://kubernetes.io/docs/user-guide/identifiers#names.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /**
     * NFS represents an NFS mount on the host that shares a pod's lifetime
     * More info: http://kubernetes.io/docs/user-guide/volumes#nfs.
     */
    @JsonProperty(value = "nfs")
    private V1NFSVolumeSource nfs;

    /**
     * PersistentVolumeClaimVolumeSource represents a reference to a
     * PersistentVolumeClaim in the same namespace. More info:
     * http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims.
     */
    @JsonProperty(value = "persistentVolumeClaim")
    private V1PersistentVolumeClaimVolumeSource persistentVolumeClaim;

    /**
     * PhotonPersistentDisk represents a PhotonController persistent disk
     * attached and mounted on kubelets host machine.
     */
    @JsonProperty(value = "photonPersistentDisk")
    private V1PhotonPersistentDiskVolumeSource photonPersistentDisk;

    /**
     * PortworxVolume represents a portworx volume attached and mounted on
     * kubelets host machine.
     */
    @JsonProperty(value = "portworxVolume")
    private V1PortworxVolumeSource portworxVolume;

    /**
     * Items for all in one resources secrets, configmaps, and downward API.
     */
    @JsonProperty(value = "projected")
    private V1ProjectedVolumeSource projected;

    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's
     * lifetime.
     */
    @JsonProperty(value = "quobyte")
    private V1QuobyteVolumeSource quobyte;

    /**
     * RBD represents a Rados Block Device mount on the host that shares a
     * pod's lifetime. More info:
     * http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md.
     */
    @JsonProperty(value = "rbd")
    private V1RBDVolumeSource rbd;

    /**
     * ScaleIO represents a ScaleIO persistent volume attached and mounted on
     * Kubernetes nodes.
     */
    @JsonProperty(value = "scaleIO")
    private V1ScaleIOVolumeSource scaleIO;

    /**
     * Secret represents a secret that should populate this volume. More info:
     * http://kubernetes.io/docs/user-guide/volumes#secrets.
     */
    @JsonProperty(value = "secret")
    private V1SecretVolumeSource secret;

    /**
     * VsphereVolume represents a vSphere volume attached and mounted on
     * kubelets host machine.
     */
    @JsonProperty(value = "vsphereVolume")
    private V1VsphereVirtualDiskVolumeSource vsphereVolume;

    /**
     * Get the awsElasticBlockStore value.
     *
     * @return the awsElasticBlockStore value
     */
    public V1AWSElasticBlockStoreVolumeSource awsElasticBlockStore() {
        return this.awsElasticBlockStore;
    }

    /**
     * Set the awsElasticBlockStore value.
     *
     * @param awsElasticBlockStore the awsElasticBlockStore value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withAwsElasticBlockStore(V1AWSElasticBlockStoreVolumeSource awsElasticBlockStore) {
        this.awsElasticBlockStore = awsElasticBlockStore;
        return this;
    }

    /**
     * Get the azureDisk value.
     *
     * @return the azureDisk value
     */
    public V1AzureDiskVolumeSource azureDisk() {
        return this.azureDisk;
    }

    /**
     * Set the azureDisk value.
     *
     * @param azureDisk the azureDisk value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withAzureDisk(V1AzureDiskVolumeSource azureDisk) {
        this.azureDisk = azureDisk;
        return this;
    }

    /**
     * Get the azureFile value.
     *
     * @return the azureFile value
     */
    public V1AzureFileVolumeSource azureFile() {
        return this.azureFile;
    }

    /**
     * Set the azureFile value.
     *
     * @param azureFile the azureFile value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withAzureFile(V1AzureFileVolumeSource azureFile) {
        this.azureFile = azureFile;
        return this;
    }

    /**
     * Get the cephfs value.
     *
     * @return the cephfs value
     */
    public V1CephFSVolumeSource cephfs() {
        return this.cephfs;
    }

    /**
     * Set the cephfs value.
     *
     * @param cephfs the cephfs value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withCephfs(V1CephFSVolumeSource cephfs) {
        this.cephfs = cephfs;
        return this;
    }

    /**
     * Get the cinder value.
     *
     * @return the cinder value
     */
    public V1CinderVolumeSource cinder() {
        return this.cinder;
    }

    /**
     * Set the cinder value.
     *
     * @param cinder the cinder value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withCinder(V1CinderVolumeSource cinder) {
        this.cinder = cinder;
        return this;
    }

    /**
     * Get the configMap value.
     *
     * @return the configMap value
     */
    public V1ConfigMapVolumeSource configMap() {
        return this.configMap;
    }

    /**
     * Set the configMap value.
     *
     * @param configMap the configMap value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withConfigMap(V1ConfigMapVolumeSource configMap) {
        this.configMap = configMap;
        return this;
    }

    /**
     * Get the downwardAPI value.
     *
     * @return the downwardAPI value
     */
    public V1DownwardAPIVolumeSource downwardAPI() {
        return this.downwardAPI;
    }

    /**
     * Set the downwardAPI value.
     *
     * @param downwardAPI the downwardAPI value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withDownwardAPI(V1DownwardAPIVolumeSource downwardAPI) {
        this.downwardAPI = downwardAPI;
        return this;
    }

    /**
     * Get the emptyDir value.
     *
     * @return the emptyDir value
     */
    public V1EmptyDirVolumeSource emptyDir() {
        return this.emptyDir;
    }

    /**
     * Set the emptyDir value.
     *
     * @param emptyDir the emptyDir value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withEmptyDir(V1EmptyDirVolumeSource emptyDir) {
        this.emptyDir = emptyDir;
        return this;
    }

    /**
     * Get the fc value.
     *
     * @return the fc value
     */
    public V1FCVolumeSource fc() {
        return this.fc;
    }

    /**
     * Set the fc value.
     *
     * @param fc the fc value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withFc(V1FCVolumeSource fc) {
        this.fc = fc;
        return this;
    }

    /**
     * Get the flexVolume value.
     *
     * @return the flexVolume value
     */
    public V1FlexVolumeSource flexVolume() {
        return this.flexVolume;
    }

    /**
     * Set the flexVolume value.
     *
     * @param flexVolume the flexVolume value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withFlexVolume(V1FlexVolumeSource flexVolume) {
        this.flexVolume = flexVolume;
        return this;
    }

    /**
     * Get the flocker value.
     *
     * @return the flocker value
     */
    public V1FlockerVolumeSource flocker() {
        return this.flocker;
    }

    /**
     * Set the flocker value.
     *
     * @param flocker the flocker value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withFlocker(V1FlockerVolumeSource flocker) {
        this.flocker = flocker;
        return this;
    }

    /**
     * Get the gcePersistentDisk value.
     *
     * @return the gcePersistentDisk value
     */
    public V1GCEPersistentDiskVolumeSource gcePersistentDisk() {
        return this.gcePersistentDisk;
    }

    /**
     * Set the gcePersistentDisk value.
     *
     * @param gcePersistentDisk the gcePersistentDisk value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withGcePersistentDisk(V1GCEPersistentDiskVolumeSource gcePersistentDisk) {
        this.gcePersistentDisk = gcePersistentDisk;
        return this;
    }

    /**
     * Get the gitRepo value.
     *
     * @return the gitRepo value
     */
    public V1GitRepoVolumeSource gitRepo() {
        return this.gitRepo;
    }

    /**
     * Set the gitRepo value.
     *
     * @param gitRepo the gitRepo value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withGitRepo(V1GitRepoVolumeSource gitRepo) {
        this.gitRepo = gitRepo;
        return this;
    }

    /**
     * Get the glusterfs value.
     *
     * @return the glusterfs value
     */
    public V1GlusterfsVolumeSource glusterfs() {
        return this.glusterfs;
    }

    /**
     * Set the glusterfs value.
     *
     * @param glusterfs the glusterfs value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withGlusterfs(V1GlusterfsVolumeSource glusterfs) {
        this.glusterfs = glusterfs;
        return this;
    }

    /**
     * Get the hostPath value.
     *
     * @return the hostPath value
     */
    public V1HostPathVolumeSource hostPath() {
        return this.hostPath;
    }

    /**
     * Set the hostPath value.
     *
     * @param hostPath the hostPath value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withHostPath(V1HostPathVolumeSource hostPath) {
        this.hostPath = hostPath;
        return this;
    }

    /**
     * Get the iscsi value.
     *
     * @return the iscsi value
     */
    public V1ISCSIVolumeSource iscsi() {
        return this.iscsi;
    }

    /**
     * Set the iscsi value.
     *
     * @param iscsi the iscsi value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withIscsi(V1ISCSIVolumeSource iscsi) {
        this.iscsi = iscsi;
        return this;
    }

    /**
     * Get the name value.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name value.
     *
     * @param name the name value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the nfs value.
     *
     * @return the nfs value
     */
    public V1NFSVolumeSource nfs() {
        return this.nfs;
    }

    /**
     * Set the nfs value.
     *
     * @param nfs the nfs value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withNfs(V1NFSVolumeSource nfs) {
        this.nfs = nfs;
        return this;
    }

    /**
     * Get the persistentVolumeClaim value.
     *
     * @return the persistentVolumeClaim value
     */
    public V1PersistentVolumeClaimVolumeSource persistentVolumeClaim() {
        return this.persistentVolumeClaim;
    }

    /**
     * Set the persistentVolumeClaim value.
     *
     * @param persistentVolumeClaim the persistentVolumeClaim value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withPersistentVolumeClaim(V1PersistentVolumeClaimVolumeSource persistentVolumeClaim) {
        this.persistentVolumeClaim = persistentVolumeClaim;
        return this;
    }

    /**
     * Get the photonPersistentDisk value.
     *
     * @return the photonPersistentDisk value
     */
    public V1PhotonPersistentDiskVolumeSource photonPersistentDisk() {
        return this.photonPersistentDisk;
    }

    /**
     * Set the photonPersistentDisk value.
     *
     * @param photonPersistentDisk the photonPersistentDisk value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withPhotonPersistentDisk(V1PhotonPersistentDiskVolumeSource photonPersistentDisk) {
        this.photonPersistentDisk = photonPersistentDisk;
        return this;
    }

    /**
     * Get the portworxVolume value.
     *
     * @return the portworxVolume value
     */
    public V1PortworxVolumeSource portworxVolume() {
        return this.portworxVolume;
    }

    /**
     * Set the portworxVolume value.
     *
     * @param portworxVolume the portworxVolume value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withPortworxVolume(V1PortworxVolumeSource portworxVolume) {
        this.portworxVolume = portworxVolume;
        return this;
    }

    /**
     * Get the projected value.
     *
     * @return the projected value
     */
    public V1ProjectedVolumeSource projected() {
        return this.projected;
    }

    /**
     * Set the projected value.
     *
     * @param projected the projected value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withProjected(V1ProjectedVolumeSource projected) {
        this.projected = projected;
        return this;
    }

    /**
     * Get the quobyte value.
     *
     * @return the quobyte value
     */
    public V1QuobyteVolumeSource quobyte() {
        return this.quobyte;
    }

    /**
     * Set the quobyte value.
     *
     * @param quobyte the quobyte value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withQuobyte(V1QuobyteVolumeSource quobyte) {
        this.quobyte = quobyte;
        return this;
    }

    /**
     * Get the rbd value.
     *
     * @return the rbd value
     */
    public V1RBDVolumeSource rbd() {
        return this.rbd;
    }

    /**
     * Set the rbd value.
     *
     * @param rbd the rbd value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withRbd(V1RBDVolumeSource rbd) {
        this.rbd = rbd;
        return this;
    }

    /**
     * Get the scaleIO value.
     *
     * @return the scaleIO value
     */
    public V1ScaleIOVolumeSource scaleIO() {
        return this.scaleIO;
    }

    /**
     * Set the scaleIO value.
     *
     * @param scaleIO the scaleIO value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withScaleIO(V1ScaleIOVolumeSource scaleIO) {
        this.scaleIO = scaleIO;
        return this;
    }

    /**
     * Get the secret value.
     *
     * @return the secret value
     */
    public V1SecretVolumeSource secret() {
        return this.secret;
    }

    /**
     * Set the secret value.
     *
     * @param secret the secret value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withSecret(V1SecretVolumeSource secret) {
        this.secret = secret;
        return this;
    }

    /**
     * Get the vsphereVolume value.
     *
     * @return the vsphereVolume value
     */
    public V1VsphereVirtualDiskVolumeSource vsphereVolume() {
        return this.vsphereVolume;
    }

    /**
     * Set the vsphereVolume value.
     *
     * @param vsphereVolume the vsphereVolume value to set
     * @return the V1Volume object itself.
     */
    public V1Volume withVsphereVolume(V1VsphereVirtualDiskVolumeSource vsphereVolume) {
        this.vsphereVolume = vsphereVolume;
        return this;
    }

}
