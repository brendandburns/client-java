/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package io.k8s.client.models;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * JobSpec describes how the job execution will look like.
 */
public class V1JobSpec {
    /**
     * Optional duration in seconds relative to the startTime that the job may
     * be active before the system tries to terminate it; value must be
     * positive integer.
     */
    @JsonProperty(value = "activeDeadlineSeconds")
    private Long activeDeadlineSeconds;

    /**
     * Completions specifies the desired number of successfully finished pods
     * the job should be run with.  Setting to nil means that the success of
     * any pod signals the success of all pods, and allows parallelism to have
     * any positive value.  Setting to 1 means that parallelism is limited to 1
     * and the success of that pod signals the success of the job. More info:
     * http://kubernetes.io/docs/user-guide/jobs.
     */
    @JsonProperty(value = "completions")
    private Integer completions;

    /**
     * ManualSelector controls generation of pod labels and pod selectors.
     * Leave `manualSelector` unset unless you are certain what you are doing.
     * When false or unset, the system pick labels unique to this job and
     * appends those labels to the pod template.  When true, the user is
     * responsible for picking unique labels and specifying the selector.
     * Failure to pick a unique label may cause this and other jobs to not
     * function correctly.  However, You may see `manualSelector=true` in jobs
     * that were created with the old `extensions/v1beta1` API. More info:
     * http://releases.k8s.io/HEAD/docs/design/selector-generation.md.
     */
    @JsonProperty(value = "manualSelector")
    private Boolean manualSelector;

    /**
     * Parallelism specifies the maximum desired number of pods the job should
     * run at any given time. The actual number of pods running in steady state
     * will be less than this number when ((.spec.completions -
     * .status.successful) &lt; .spec.parallelism), i.e. when the work left to
     * do is less than max parallelism. More info:
     * http://kubernetes.io/docs/user-guide/jobs.
     */
    @JsonProperty(value = "parallelism")
    private Integer parallelism;

    /**
     * Selector is a label query over pods that should match the pod count.
     * Normally, the system sets this field for you. More info:
     * http://kubernetes.io/docs/user-guide/labels#label-selectors.
     */
    @JsonProperty(value = "selector")
    private V1LabelSelector selector;

    /**
     * Template is the object that describes the pod that will be created when
     * executing a job. More info: http://kubernetes.io/docs/user-guide/jobs.
     */
    @JsonProperty(value = "template", required = true)
    private V1PodTemplateSpec template;

    /**
     * Get the activeDeadlineSeconds value.
     *
     * @return the activeDeadlineSeconds value
     */
    public Long activeDeadlineSeconds() {
        return this.activeDeadlineSeconds;
    }

    /**
     * Set the activeDeadlineSeconds value.
     *
     * @param activeDeadlineSeconds the activeDeadlineSeconds value to set
     * @return the V1JobSpec object itself.
     */
    public V1JobSpec withActiveDeadlineSeconds(Long activeDeadlineSeconds) {
        this.activeDeadlineSeconds = activeDeadlineSeconds;
        return this;
    }

    /**
     * Get the completions value.
     *
     * @return the completions value
     */
    public Integer completions() {
        return this.completions;
    }

    /**
     * Set the completions value.
     *
     * @param completions the completions value to set
     * @return the V1JobSpec object itself.
     */
    public V1JobSpec withCompletions(Integer completions) {
        this.completions = completions;
        return this;
    }

    /**
     * Get the manualSelector value.
     *
     * @return the manualSelector value
     */
    public Boolean manualSelector() {
        return this.manualSelector;
    }

    /**
     * Set the manualSelector value.
     *
     * @param manualSelector the manualSelector value to set
     * @return the V1JobSpec object itself.
     */
    public V1JobSpec withManualSelector(Boolean manualSelector) {
        this.manualSelector = manualSelector;
        return this;
    }

    /**
     * Get the parallelism value.
     *
     * @return the parallelism value
     */
    public Integer parallelism() {
        return this.parallelism;
    }

    /**
     * Set the parallelism value.
     *
     * @param parallelism the parallelism value to set
     * @return the V1JobSpec object itself.
     */
    public V1JobSpec withParallelism(Integer parallelism) {
        this.parallelism = parallelism;
        return this;
    }

    /**
     * Get the selector value.
     *
     * @return the selector value
     */
    public V1LabelSelector selector() {
        return this.selector;
    }

    /**
     * Set the selector value.
     *
     * @param selector the selector value to set
     * @return the V1JobSpec object itself.
     */
    public V1JobSpec withSelector(V1LabelSelector selector) {
        this.selector = selector;
        return this;
    }

    /**
     * Get the template value.
     *
     * @return the template value
     */
    public V1PodTemplateSpec template() {
        return this.template;
    }

    /**
     * Set the template value.
     *
     * @param template the template value to set
     * @return the V1JobSpec object itself.
     */
    public V1JobSpec withTemplate(V1PodTemplateSpec template) {
        this.template = template;
        return this;
    }

}
