/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package io.k8s.client.models;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Lifecycle describes actions that the management system should take in
 * response to container lifecycle events. For the PostStart and PreStop
 * lifecycle handlers, management of the container blocks until the action is
 * complete, unless the container process fails, in which case the handler is
 * aborted.
 */
public class V1Lifecycle {
    /**
     * PostStart is called immediately after a container is created. If the
     * handler fails, the container is terminated and restarted according to
     * its restart policy. Other management of the container blocks until the
     * hook completes. More info:
     * http://kubernetes.io/docs/user-guide/container-environment#hook-details.
     */
    @JsonProperty(value = "postStart")
    private V1Handler postStart;

    /**
     * PreStop is called immediately before a container is terminated. The
     * container is terminated after the handler completes. The reason for
     * termination is passed to the handler. Regardless of the outcome of the
     * handler, the container is eventually terminated. Other management of the
     * container blocks until the hook completes. More info:
     * http://kubernetes.io/docs/user-guide/container-environment#hook-details.
     */
    @JsonProperty(value = "preStop")
    private V1Handler preStop;

    /**
     * Get the postStart value.
     *
     * @return the postStart value
     */
    public V1Handler postStart() {
        return this.postStart;
    }

    /**
     * Set the postStart value.
     *
     * @param postStart the postStart value to set
     * @return the V1Lifecycle object itself.
     */
    public V1Lifecycle withPostStart(V1Handler postStart) {
        this.postStart = postStart;
        return this;
    }

    /**
     * Get the preStop value.
     *
     * @return the preStop value
     */
    public V1Handler preStop() {
        return this.preStop;
    }

    /**
     * Set the preStop value.
     *
     * @param preStop the preStop value to set
     * @return the V1Lifecycle object itself.
     */
    public V1Lifecycle withPreStop(V1Handler preStop) {
        this.preStop = preStop;
        return this;
    }

}
