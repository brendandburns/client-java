/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package io.k8s.client;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import io.k8s.client.models.Appsv1beta1Deployment;
import io.k8s.client.models.Appsv1beta1DeploymentList;
import io.k8s.client.models.Appsv1beta1DeploymentRollback;
import io.k8s.client.models.Appsv1beta1Scale;
import io.k8s.client.models.Extensionsv1beta1Deployment;
import io.k8s.client.models.Extensionsv1beta1DeploymentList;
import io.k8s.client.models.Extensionsv1beta1DeploymentRollback;
import io.k8s.client.models.Extensionsv1beta1Scale;
import io.k8s.client.models.V1alpha1ClusterRole;
import io.k8s.client.models.V1alpha1ClusterRoleBinding;
import io.k8s.client.models.V1alpha1ClusterRoleBindingList;
import io.k8s.client.models.V1alpha1ClusterRoleList;
import io.k8s.client.models.V1alpha1PodPreset;
import io.k8s.client.models.V1alpha1PodPresetList;
import io.k8s.client.models.V1alpha1Role;
import io.k8s.client.models.V1alpha1RoleBinding;
import io.k8s.client.models.V1alpha1RoleBindingList;
import io.k8s.client.models.V1alpha1RoleList;
import io.k8s.client.models.V1APIGroup;
import io.k8s.client.models.V1APIGroupList;
import io.k8s.client.models.V1APIResourceList;
import io.k8s.client.models.V1APIVersions;
import io.k8s.client.models.V1beta1CertificateSigningRequest;
import io.k8s.client.models.V1beta1CertificateSigningRequestList;
import io.k8s.client.models.V1beta1ClusterRole;
import io.k8s.client.models.V1beta1ClusterRoleBinding;
import io.k8s.client.models.V1beta1ClusterRoleBindingList;
import io.k8s.client.models.V1beta1ClusterRoleList;
import io.k8s.client.models.V1beta1DaemonSet;
import io.k8s.client.models.V1beta1DaemonSetList;
import io.k8s.client.models.V1beta1Eviction;
import io.k8s.client.models.V1beta1Ingress;
import io.k8s.client.models.V1beta1IngressList;
import io.k8s.client.models.V1beta1LocalSubjectAccessReview;
import io.k8s.client.models.V1beta1NetworkPolicy;
import io.k8s.client.models.V1beta1NetworkPolicyList;
import io.k8s.client.models.V1beta1PodDisruptionBudget;
import io.k8s.client.models.V1beta1PodDisruptionBudgetList;
import io.k8s.client.models.V1beta1PodSecurityPolicy;
import io.k8s.client.models.V1beta1PodSecurityPolicyList;
import io.k8s.client.models.V1beta1ReplicaSet;
import io.k8s.client.models.V1beta1ReplicaSetList;
import io.k8s.client.models.V1beta1Role;
import io.k8s.client.models.V1beta1RoleBinding;
import io.k8s.client.models.V1beta1RoleBindingList;
import io.k8s.client.models.V1beta1RoleList;
import io.k8s.client.models.V1beta1SelfSubjectAccessReview;
import io.k8s.client.models.V1beta1StatefulSet;
import io.k8s.client.models.V1beta1StatefulSetList;
import io.k8s.client.models.V1beta1StorageClass;
import io.k8s.client.models.V1beta1StorageClassList;
import io.k8s.client.models.V1beta1SubjectAccessReview;
import io.k8s.client.models.V1beta1ThirdPartyResource;
import io.k8s.client.models.V1beta1ThirdPartyResourceList;
import io.k8s.client.models.V1beta1TokenReview;
import io.k8s.client.models.V1Binding;
import io.k8s.client.models.V1ComponentStatus;
import io.k8s.client.models.V1ComponentStatusList;
import io.k8s.client.models.V1ConfigMap;
import io.k8s.client.models.V1ConfigMapList;
import io.k8s.client.models.V1DeleteOptions;
import io.k8s.client.models.V1Endpoints;
import io.k8s.client.models.V1EndpointsList;
import io.k8s.client.models.V1Event;
import io.k8s.client.models.V1EventList;
import io.k8s.client.models.V1HorizontalPodAutoscaler;
import io.k8s.client.models.V1HorizontalPodAutoscalerList;
import io.k8s.client.models.V1Job;
import io.k8s.client.models.V1JobList;
import io.k8s.client.models.V1LimitRange;
import io.k8s.client.models.V1LimitRangeList;
import io.k8s.client.models.V1LocalSubjectAccessReview;
import io.k8s.client.models.V1Namespace;
import io.k8s.client.models.V1NamespaceList;
import io.k8s.client.models.V1Node;
import io.k8s.client.models.V1NodeList;
import io.k8s.client.models.V1PersistentVolume;
import io.k8s.client.models.V1PersistentVolumeClaim;
import io.k8s.client.models.V1PersistentVolumeClaimList;
import io.k8s.client.models.V1PersistentVolumeList;
import io.k8s.client.models.V1Pod;
import io.k8s.client.models.V1PodList;
import io.k8s.client.models.V1PodTemplate;
import io.k8s.client.models.V1PodTemplateList;
import io.k8s.client.models.V1ReplicationController;
import io.k8s.client.models.V1ReplicationControllerList;
import io.k8s.client.models.V1ResourceQuota;
import io.k8s.client.models.V1ResourceQuotaList;
import io.k8s.client.models.V1Scale;
import io.k8s.client.models.V1Secret;
import io.k8s.client.models.V1SecretList;
import io.k8s.client.models.V1SelfSubjectAccessReview;
import io.k8s.client.models.V1Service;
import io.k8s.client.models.V1ServiceAccount;
import io.k8s.client.models.V1ServiceAccountList;
import io.k8s.client.models.V1ServiceList;
import io.k8s.client.models.V1Status;
import io.k8s.client.models.V1StorageClass;
import io.k8s.client.models.V1StorageClassList;
import io.k8s.client.models.V1SubjectAccessReview;
import io.k8s.client.models.V1TokenReview;
import io.k8s.client.models.V2alpha1CronJob;
import io.k8s.client.models.V2alpha1CronJobList;
import io.k8s.client.models.V2alpha1HorizontalPodAutoscaler;
import io.k8s.client.models.V2alpha1HorizontalPodAutoscalerList;
import io.k8s.client.models.VersionInfo;
import java.io.IOException;
import rx.Observable;
import com.microsoft.rest.RestClient;

/**
 * The interface for Kubernetes class.
 */
public interface Kubernetes {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "http://localhost";

    /**
     * get available API versions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIVersions object if successful.
     */
    V1APIVersions getAPIVersions();

    /**
     * get available API versions.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIVersions> getAPIVersionsAsync(final ServiceCallback<V1APIVersions> serviceCallback);

    /**
     * get available API versions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIVersions object
     */
    Observable<V1APIVersions> getAPIVersionsAsync();

    /**
     * get available API versions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIVersions object
     */
    Observable<ServiceResponse<V1APIVersions>> getAPIVersionsWithServiceResponseAsync();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResourcesAsync(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResourcesAsync();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResourcesWithServiceResponseAsync();

    /**
     * list objects of kind ComponentStatus.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ComponentStatusList object if successful.
     */
    V1ComponentStatusList listComponentStatus();

    /**
     * list objects of kind ComponentStatus.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ComponentStatusList> listComponentStatusAsync(final ServiceCallback<V1ComponentStatusList> serviceCallback);

    /**
     * list objects of kind ComponentStatus.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ComponentStatusList object
     */
    Observable<V1ComponentStatusList> listComponentStatusAsync();

    /**
     * list objects of kind ComponentStatus.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ComponentStatusList object
     */
    Observable<ServiceResponse<V1ComponentStatusList>> listComponentStatusWithServiceResponseAsync();
    /**
     * list objects of kind ComponentStatus.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ComponentStatusList object if successful.
     */
    V1ComponentStatusList listComponentStatus(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list objects of kind ComponentStatus.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ComponentStatusList> listComponentStatusAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1ComponentStatusList> serviceCallback);

    /**
     * list objects of kind ComponentStatus.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ComponentStatusList object
     */
    Observable<V1ComponentStatusList> listComponentStatusAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list objects of kind ComponentStatus.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ComponentStatusList object
     */
    Observable<ServiceResponse<V1ComponentStatusList>> listComponentStatusWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * read the specified ComponentStatus.
     *
     * @param name name of the ComponentStatus
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ComponentStatus object if successful.
     */
    V1ComponentStatus readComponentStatus(String name);

    /**
     * read the specified ComponentStatus.
     *
     * @param name name of the ComponentStatus
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ComponentStatus> readComponentStatusAsync(String name, final ServiceCallback<V1ComponentStatus> serviceCallback);

    /**
     * read the specified ComponentStatus.
     *
     * @param name name of the ComponentStatus
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ComponentStatus object
     */
    Observable<V1ComponentStatus> readComponentStatusAsync(String name);

    /**
     * read the specified ComponentStatus.
     *
     * @param name name of the ComponentStatus
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ComponentStatus object
     */
    Observable<ServiceResponse<V1ComponentStatus>> readComponentStatusWithServiceResponseAsync(String name);
    /**
     * read the specified ComponentStatus.
     *
     * @param name name of the ComponentStatus
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ComponentStatus object if successful.
     */
    V1ComponentStatus readComponentStatus(String name, String pretty);

    /**
     * read the specified ComponentStatus.
     *
     * @param name name of the ComponentStatus
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ComponentStatus> readComponentStatusAsync(String name, String pretty, final ServiceCallback<V1ComponentStatus> serviceCallback);

    /**
     * read the specified ComponentStatus.
     *
     * @param name name of the ComponentStatus
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ComponentStatus object
     */
    Observable<V1ComponentStatus> readComponentStatusAsync(String name, String pretty);

    /**
     * read the specified ComponentStatus.
     *
     * @param name name of the ComponentStatus
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ComponentStatus object
     */
    Observable<ServiceResponse<V1ComponentStatus>> readComponentStatusWithServiceResponseAsync(String name, String pretty);

    /**
     * list or watch objects of kind ConfigMap.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ConfigMapList object if successful.
     */
    V1ConfigMapList listConfigMapForAllNamespaces();

    /**
     * list or watch objects of kind ConfigMap.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ConfigMapList> listConfigMapForAllNamespacesAsync(final ServiceCallback<V1ConfigMapList> serviceCallback);

    /**
     * list or watch objects of kind ConfigMap.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMapList object
     */
    Observable<V1ConfigMapList> listConfigMapForAllNamespacesAsync();

    /**
     * list or watch objects of kind ConfigMap.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMapList object
     */
    Observable<ServiceResponse<V1ConfigMapList>> listConfigMapForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind ConfigMap.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ConfigMapList object if successful.
     */
    V1ConfigMapList listConfigMapForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind ConfigMap.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ConfigMapList> listConfigMapForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1ConfigMapList> serviceCallback);

    /**
     * list or watch objects of kind ConfigMap.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMapList object
     */
    Observable<V1ConfigMapList> listConfigMapForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind ConfigMap.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMapList object
     */
    Observable<ServiceResponse<V1ConfigMapList>> listConfigMapForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Endpoints.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1EndpointsList object if successful.
     */
    V1EndpointsList listEndpointsForAllNamespaces();

    /**
     * list or watch objects of kind Endpoints.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1EndpointsList> listEndpointsForAllNamespacesAsync(final ServiceCallback<V1EndpointsList> serviceCallback);

    /**
     * list or watch objects of kind Endpoints.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1EndpointsList object
     */
    Observable<V1EndpointsList> listEndpointsForAllNamespacesAsync();

    /**
     * list or watch objects of kind Endpoints.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1EndpointsList object
     */
    Observable<ServiceResponse<V1EndpointsList>> listEndpointsForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind Endpoints.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1EndpointsList object if successful.
     */
    V1EndpointsList listEndpointsForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Endpoints.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1EndpointsList> listEndpointsForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1EndpointsList> serviceCallback);

    /**
     * list or watch objects of kind Endpoints.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1EndpointsList object
     */
    Observable<V1EndpointsList> listEndpointsForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Endpoints.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1EndpointsList object
     */
    Observable<ServiceResponse<V1EndpointsList>> listEndpointsForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Event.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1EventList object if successful.
     */
    V1EventList listEventForAllNamespaces();

    /**
     * list or watch objects of kind Event.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1EventList> listEventForAllNamespacesAsync(final ServiceCallback<V1EventList> serviceCallback);

    /**
     * list or watch objects of kind Event.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1EventList object
     */
    Observable<V1EventList> listEventForAllNamespacesAsync();

    /**
     * list or watch objects of kind Event.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1EventList object
     */
    Observable<ServiceResponse<V1EventList>> listEventForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind Event.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1EventList object if successful.
     */
    V1EventList listEventForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Event.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1EventList> listEventForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1EventList> serviceCallback);

    /**
     * list or watch objects of kind Event.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1EventList object
     */
    Observable<V1EventList> listEventForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Event.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1EventList object
     */
    Observable<ServiceResponse<V1EventList>> listEventForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind LimitRange.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1LimitRangeList object if successful.
     */
    V1LimitRangeList listLimitRangeForAllNamespaces();

    /**
     * list or watch objects of kind LimitRange.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1LimitRangeList> listLimitRangeForAllNamespacesAsync(final ServiceCallback<V1LimitRangeList> serviceCallback);

    /**
     * list or watch objects of kind LimitRange.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRangeList object
     */
    Observable<V1LimitRangeList> listLimitRangeForAllNamespacesAsync();

    /**
     * list or watch objects of kind LimitRange.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRangeList object
     */
    Observable<ServiceResponse<V1LimitRangeList>> listLimitRangeForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind LimitRange.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1LimitRangeList object if successful.
     */
    V1LimitRangeList listLimitRangeForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind LimitRange.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1LimitRangeList> listLimitRangeForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1LimitRangeList> serviceCallback);

    /**
     * list or watch objects of kind LimitRange.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRangeList object
     */
    Observable<V1LimitRangeList> listLimitRangeForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind LimitRange.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRangeList object
     */
    Observable<ServiceResponse<V1LimitRangeList>> listLimitRangeForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Namespace.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1NamespaceList object if successful.
     */
    V1NamespaceList listNamespace();

    /**
     * list or watch objects of kind Namespace.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1NamespaceList> listNamespaceAsync(final ServiceCallback<V1NamespaceList> serviceCallback);

    /**
     * list or watch objects of kind Namespace.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1NamespaceList object
     */
    Observable<V1NamespaceList> listNamespaceAsync();

    /**
     * list or watch objects of kind Namespace.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1NamespaceList object
     */
    Observable<ServiceResponse<V1NamespaceList>> listNamespaceWithServiceResponseAsync();
    /**
     * list or watch objects of kind Namespace.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1NamespaceList object if successful.
     */
    V1NamespaceList listNamespace(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Namespace.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1NamespaceList> listNamespaceAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1NamespaceList> serviceCallback);

    /**
     * list or watch objects of kind Namespace.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1NamespaceList object
     */
    Observable<V1NamespaceList> listNamespaceAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Namespace.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1NamespaceList object
     */
    Observable<ServiceResponse<V1NamespaceList>> listNamespaceWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a Namespace.
     *
     * @param body the V1Namespace value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Namespace object if successful.
     */
    V1Namespace createNamespace(V1Namespace body);

    /**
     * create a Namespace.
     *
     * @param body the V1Namespace value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Namespace> createNamespaceAsync(V1Namespace body, final ServiceCallback<V1Namespace> serviceCallback);

    /**
     * create a Namespace.
     *
     * @param body the V1Namespace value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<V1Namespace> createNamespaceAsync(V1Namespace body);

    /**
     * create a Namespace.
     *
     * @param body the V1Namespace value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<ServiceResponse<V1Namespace>> createNamespaceWithServiceResponseAsync(V1Namespace body);
    /**
     * create a Namespace.
     *
     * @param body the V1Namespace value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Namespace object if successful.
     */
    V1Namespace createNamespace(V1Namespace body, String pretty);

    /**
     * create a Namespace.
     *
     * @param body the V1Namespace value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Namespace> createNamespaceAsync(V1Namespace body, String pretty, final ServiceCallback<V1Namespace> serviceCallback);

    /**
     * create a Namespace.
     *
     * @param body the V1Namespace value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<V1Namespace> createNamespaceAsync(V1Namespace body, String pretty);

    /**
     * create a Namespace.
     *
     * @param body the V1Namespace value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<ServiceResponse<V1Namespace>> createNamespaceWithServiceResponseAsync(V1Namespace body, String pretty);

    /**
     * delete collection of Namespace.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespace();

    /**
     * delete collection of Namespace.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespaceAsync(final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Namespace.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespaceAsync();

    /**
     * delete collection of Namespace.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespaceWithServiceResponseAsync();
    /**
     * delete collection of Namespace.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespace(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Namespace.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespaceAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Namespace.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespaceAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Namespace.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespaceWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a Binding.
     *
     * @param body the V1Binding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Binding object if successful.
     */
    V1Binding createNamespacedBinding(V1Binding body, String namespace);

    /**
     * create a Binding.
     *
     * @param body the V1Binding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Binding> createNamespacedBindingAsync(V1Binding body, String namespace, final ServiceCallback<V1Binding> serviceCallback);

    /**
     * create a Binding.
     *
     * @param body the V1Binding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Binding object
     */
    Observable<V1Binding> createNamespacedBindingAsync(V1Binding body, String namespace);

    /**
     * create a Binding.
     *
     * @param body the V1Binding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Binding object
     */
    Observable<ServiceResponse<V1Binding>> createNamespacedBindingWithServiceResponseAsync(V1Binding body, String namespace);
    /**
     * create a Binding.
     *
     * @param body the V1Binding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Binding object if successful.
     */
    V1Binding createNamespacedBinding(V1Binding body, String namespace, String pretty);

    /**
     * create a Binding.
     *
     * @param body the V1Binding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Binding> createNamespacedBindingAsync(V1Binding body, String namespace, String pretty, final ServiceCallback<V1Binding> serviceCallback);

    /**
     * create a Binding.
     *
     * @param body the V1Binding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Binding object
     */
    Observable<V1Binding> createNamespacedBindingAsync(V1Binding body, String namespace, String pretty);

    /**
     * create a Binding.
     *
     * @param body the V1Binding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Binding object
     */
    Observable<ServiceResponse<V1Binding>> createNamespacedBindingWithServiceResponseAsync(V1Binding body, String namespace, String pretty);

    /**
     * list or watch objects of kind ConfigMap.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ConfigMapList object if successful.
     */
    V1ConfigMapList listNamespacedConfigMap(String namespace);

    /**
     * list or watch objects of kind ConfigMap.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ConfigMapList> listNamespacedConfigMapAsync(String namespace, final ServiceCallback<V1ConfigMapList> serviceCallback);

    /**
     * list or watch objects of kind ConfigMap.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMapList object
     */
    Observable<V1ConfigMapList> listNamespacedConfigMapAsync(String namespace);

    /**
     * list or watch objects of kind ConfigMap.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMapList object
     */
    Observable<ServiceResponse<V1ConfigMapList>> listNamespacedConfigMapWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind ConfigMap.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ConfigMapList object if successful.
     */
    V1ConfigMapList listNamespacedConfigMap(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ConfigMap.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ConfigMapList> listNamespacedConfigMapAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1ConfigMapList> serviceCallback);

    /**
     * list or watch objects of kind ConfigMap.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMapList object
     */
    Observable<V1ConfigMapList> listNamespacedConfigMapAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ConfigMap.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMapList object
     */
    Observable<ServiceResponse<V1ConfigMapList>> listNamespacedConfigMapWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a ConfigMap.
     *
     * @param body the V1ConfigMap value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ConfigMap object if successful.
     */
    V1ConfigMap createNamespacedConfigMap(V1ConfigMap body, String namespace);

    /**
     * create a ConfigMap.
     *
     * @param body the V1ConfigMap value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ConfigMap> createNamespacedConfigMapAsync(V1ConfigMap body, String namespace, final ServiceCallback<V1ConfigMap> serviceCallback);

    /**
     * create a ConfigMap.
     *
     * @param body the V1ConfigMap value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMap object
     */
    Observable<V1ConfigMap> createNamespacedConfigMapAsync(V1ConfigMap body, String namespace);

    /**
     * create a ConfigMap.
     *
     * @param body the V1ConfigMap value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMap object
     */
    Observable<ServiceResponse<V1ConfigMap>> createNamespacedConfigMapWithServiceResponseAsync(V1ConfigMap body, String namespace);
    /**
     * create a ConfigMap.
     *
     * @param body the V1ConfigMap value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ConfigMap object if successful.
     */
    V1ConfigMap createNamespacedConfigMap(V1ConfigMap body, String namespace, String pretty);

    /**
     * create a ConfigMap.
     *
     * @param body the V1ConfigMap value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ConfigMap> createNamespacedConfigMapAsync(V1ConfigMap body, String namespace, String pretty, final ServiceCallback<V1ConfigMap> serviceCallback);

    /**
     * create a ConfigMap.
     *
     * @param body the V1ConfigMap value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMap object
     */
    Observable<V1ConfigMap> createNamespacedConfigMapAsync(V1ConfigMap body, String namespace, String pretty);

    /**
     * create a ConfigMap.
     *
     * @param body the V1ConfigMap value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMap object
     */
    Observable<ServiceResponse<V1ConfigMap>> createNamespacedConfigMapWithServiceResponseAsync(V1ConfigMap body, String namespace, String pretty);

    /**
     * delete collection of ConfigMap.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedConfigMap(String namespace);

    /**
     * delete collection of ConfigMap.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedConfigMapAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ConfigMap.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedConfigMapAsync(String namespace);

    /**
     * delete collection of ConfigMap.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedConfigMapWithServiceResponseAsync(String namespace);
    /**
     * delete collection of ConfigMap.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedConfigMap(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ConfigMap.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedConfigMapAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ConfigMap.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedConfigMapAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ConfigMap.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedConfigMapWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified ConfigMap.
     *
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ConfigMap object if successful.
     */
    V1ConfigMap readNamespacedConfigMap(String name, String namespace);

    /**
     * read the specified ConfigMap.
     *
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ConfigMap> readNamespacedConfigMapAsync(String name, String namespace, final ServiceCallback<V1ConfigMap> serviceCallback);

    /**
     * read the specified ConfigMap.
     *
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMap object
     */
    Observable<V1ConfigMap> readNamespacedConfigMapAsync(String name, String namespace);

    /**
     * read the specified ConfigMap.
     *
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMap object
     */
    Observable<ServiceResponse<V1ConfigMap>> readNamespacedConfigMapWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified ConfigMap.
     *
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ConfigMap object if successful.
     */
    V1ConfigMap readNamespacedConfigMap(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified ConfigMap.
     *
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ConfigMap> readNamespacedConfigMapAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1ConfigMap> serviceCallback);

    /**
     * read the specified ConfigMap.
     *
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMap object
     */
    Observable<V1ConfigMap> readNamespacedConfigMapAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified ConfigMap.
     *
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMap object
     */
    Observable<ServiceResponse<V1ConfigMap>> readNamespacedConfigMapWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified ConfigMap.
     *
     * @param body the V1ConfigMap value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ConfigMap object if successful.
     */
    V1ConfigMap replaceNamespacedConfigMap(V1ConfigMap body, String name, String namespace);

    /**
     * replace the specified ConfigMap.
     *
     * @param body the V1ConfigMap value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ConfigMap> replaceNamespacedConfigMapAsync(V1ConfigMap body, String name, String namespace, final ServiceCallback<V1ConfigMap> serviceCallback);

    /**
     * replace the specified ConfigMap.
     *
     * @param body the V1ConfigMap value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMap object
     */
    Observable<V1ConfigMap> replaceNamespacedConfigMapAsync(V1ConfigMap body, String name, String namespace);

    /**
     * replace the specified ConfigMap.
     *
     * @param body the V1ConfigMap value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMap object
     */
    Observable<ServiceResponse<V1ConfigMap>> replaceNamespacedConfigMapWithServiceResponseAsync(V1ConfigMap body, String name, String namespace);
    /**
     * replace the specified ConfigMap.
     *
     * @param body the V1ConfigMap value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ConfigMap object if successful.
     */
    V1ConfigMap replaceNamespacedConfigMap(V1ConfigMap body, String name, String namespace, String pretty);

    /**
     * replace the specified ConfigMap.
     *
     * @param body the V1ConfigMap value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ConfigMap> replaceNamespacedConfigMapAsync(V1ConfigMap body, String name, String namespace, String pretty, final ServiceCallback<V1ConfigMap> serviceCallback);

    /**
     * replace the specified ConfigMap.
     *
     * @param body the V1ConfigMap value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMap object
     */
    Observable<V1ConfigMap> replaceNamespacedConfigMapAsync(V1ConfigMap body, String name, String namespace, String pretty);

    /**
     * replace the specified ConfigMap.
     *
     * @param body the V1ConfigMap value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMap object
     */
    Observable<ServiceResponse<V1ConfigMap>> replaceNamespacedConfigMapWithServiceResponseAsync(V1ConfigMap body, String name, String namespace, String pretty);

    /**
     * delete a ConfigMap.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedConfigMap(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a ConfigMap.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedConfigMapAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ConfigMap.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedConfigMapAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a ConfigMap.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedConfigMapWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a ConfigMap.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedConfigMap(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ConfigMap.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedConfigMapAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ConfigMap.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedConfigMapAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ConfigMap.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedConfigMapWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified ConfigMap.
     *
     * @param body the Object value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ConfigMap object if successful.
     */
    V1ConfigMap patchNamespacedConfigMap(Object body, String name, String namespace);

    /**
     * partially update the specified ConfigMap.
     *
     * @param body the Object value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ConfigMap> patchNamespacedConfigMapAsync(Object body, String name, String namespace, final ServiceCallback<V1ConfigMap> serviceCallback);

    /**
     * partially update the specified ConfigMap.
     *
     * @param body the Object value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMap object
     */
    Observable<V1ConfigMap> patchNamespacedConfigMapAsync(Object body, String name, String namespace);

    /**
     * partially update the specified ConfigMap.
     *
     * @param body the Object value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMap object
     */
    Observable<ServiceResponse<V1ConfigMap>> patchNamespacedConfigMapWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified ConfigMap.
     *
     * @param body the Object value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ConfigMap object if successful.
     */
    V1ConfigMap patchNamespacedConfigMap(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified ConfigMap.
     *
     * @param body the Object value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ConfigMap> patchNamespacedConfigMapAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1ConfigMap> serviceCallback);

    /**
     * partially update the specified ConfigMap.
     *
     * @param body the Object value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMap object
     */
    Observable<V1ConfigMap> patchNamespacedConfigMapAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified ConfigMap.
     *
     * @param body the Object value
     * @param name name of the ConfigMap
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ConfigMap object
     */
    Observable<ServiceResponse<V1ConfigMap>> patchNamespacedConfigMapWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind Endpoints.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1EndpointsList object if successful.
     */
    V1EndpointsList listNamespacedEndpoints(String namespace);

    /**
     * list or watch objects of kind Endpoints.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1EndpointsList> listNamespacedEndpointsAsync(String namespace, final ServiceCallback<V1EndpointsList> serviceCallback);

    /**
     * list or watch objects of kind Endpoints.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1EndpointsList object
     */
    Observable<V1EndpointsList> listNamespacedEndpointsAsync(String namespace);

    /**
     * list or watch objects of kind Endpoints.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1EndpointsList object
     */
    Observable<ServiceResponse<V1EndpointsList>> listNamespacedEndpointsWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind Endpoints.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1EndpointsList object if successful.
     */
    V1EndpointsList listNamespacedEndpoints(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Endpoints.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1EndpointsList> listNamespacedEndpointsAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1EndpointsList> serviceCallback);

    /**
     * list or watch objects of kind Endpoints.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1EndpointsList object
     */
    Observable<V1EndpointsList> listNamespacedEndpointsAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Endpoints.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1EndpointsList object
     */
    Observable<ServiceResponse<V1EndpointsList>> listNamespacedEndpointsWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create Endpoints.
     *
     * @param body the V1Endpoints value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Endpoints object if successful.
     */
    V1Endpoints createNamespacedEndpoints(V1Endpoints body, String namespace);

    /**
     * create Endpoints.
     *
     * @param body the V1Endpoints value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Endpoints> createNamespacedEndpointsAsync(V1Endpoints body, String namespace, final ServiceCallback<V1Endpoints> serviceCallback);

    /**
     * create Endpoints.
     *
     * @param body the V1Endpoints value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Endpoints object
     */
    Observable<V1Endpoints> createNamespacedEndpointsAsync(V1Endpoints body, String namespace);

    /**
     * create Endpoints.
     *
     * @param body the V1Endpoints value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Endpoints object
     */
    Observable<ServiceResponse<V1Endpoints>> createNamespacedEndpointsWithServiceResponseAsync(V1Endpoints body, String namespace);
    /**
     * create Endpoints.
     *
     * @param body the V1Endpoints value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Endpoints object if successful.
     */
    V1Endpoints createNamespacedEndpoints(V1Endpoints body, String namespace, String pretty);

    /**
     * create Endpoints.
     *
     * @param body the V1Endpoints value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Endpoints> createNamespacedEndpointsAsync(V1Endpoints body, String namespace, String pretty, final ServiceCallback<V1Endpoints> serviceCallback);

    /**
     * create Endpoints.
     *
     * @param body the V1Endpoints value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Endpoints object
     */
    Observable<V1Endpoints> createNamespacedEndpointsAsync(V1Endpoints body, String namespace, String pretty);

    /**
     * create Endpoints.
     *
     * @param body the V1Endpoints value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Endpoints object
     */
    Observable<ServiceResponse<V1Endpoints>> createNamespacedEndpointsWithServiceResponseAsync(V1Endpoints body, String namespace, String pretty);

    /**
     * delete collection of Endpoints.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedEndpoints(String namespace);

    /**
     * delete collection of Endpoints.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedEndpointsAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Endpoints.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedEndpointsAsync(String namespace);

    /**
     * delete collection of Endpoints.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedEndpointsWithServiceResponseAsync(String namespace);
    /**
     * delete collection of Endpoints.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedEndpoints(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Endpoints.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedEndpointsAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Endpoints.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedEndpointsAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Endpoints.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedEndpointsWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified Endpoints.
     *
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Endpoints object if successful.
     */
    V1Endpoints readNamespacedEndpoints(String name, String namespace);

    /**
     * read the specified Endpoints.
     *
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Endpoints> readNamespacedEndpointsAsync(String name, String namespace, final ServiceCallback<V1Endpoints> serviceCallback);

    /**
     * read the specified Endpoints.
     *
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Endpoints object
     */
    Observable<V1Endpoints> readNamespacedEndpointsAsync(String name, String namespace);

    /**
     * read the specified Endpoints.
     *
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Endpoints object
     */
    Observable<ServiceResponse<V1Endpoints>> readNamespacedEndpointsWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified Endpoints.
     *
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Endpoints object if successful.
     */
    V1Endpoints readNamespacedEndpoints(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Endpoints.
     *
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Endpoints> readNamespacedEndpointsAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1Endpoints> serviceCallback);

    /**
     * read the specified Endpoints.
     *
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Endpoints object
     */
    Observable<V1Endpoints> readNamespacedEndpointsAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Endpoints.
     *
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Endpoints object
     */
    Observable<ServiceResponse<V1Endpoints>> readNamespacedEndpointsWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified Endpoints.
     *
     * @param body the V1Endpoints value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Endpoints object if successful.
     */
    V1Endpoints replaceNamespacedEndpoints(V1Endpoints body, String name, String namespace);

    /**
     * replace the specified Endpoints.
     *
     * @param body the V1Endpoints value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Endpoints> replaceNamespacedEndpointsAsync(V1Endpoints body, String name, String namespace, final ServiceCallback<V1Endpoints> serviceCallback);

    /**
     * replace the specified Endpoints.
     *
     * @param body the V1Endpoints value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Endpoints object
     */
    Observable<V1Endpoints> replaceNamespacedEndpointsAsync(V1Endpoints body, String name, String namespace);

    /**
     * replace the specified Endpoints.
     *
     * @param body the V1Endpoints value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Endpoints object
     */
    Observable<ServiceResponse<V1Endpoints>> replaceNamespacedEndpointsWithServiceResponseAsync(V1Endpoints body, String name, String namespace);
    /**
     * replace the specified Endpoints.
     *
     * @param body the V1Endpoints value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Endpoints object if successful.
     */
    V1Endpoints replaceNamespacedEndpoints(V1Endpoints body, String name, String namespace, String pretty);

    /**
     * replace the specified Endpoints.
     *
     * @param body the V1Endpoints value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Endpoints> replaceNamespacedEndpointsAsync(V1Endpoints body, String name, String namespace, String pretty, final ServiceCallback<V1Endpoints> serviceCallback);

    /**
     * replace the specified Endpoints.
     *
     * @param body the V1Endpoints value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Endpoints object
     */
    Observable<V1Endpoints> replaceNamespacedEndpointsAsync(V1Endpoints body, String name, String namespace, String pretty);

    /**
     * replace the specified Endpoints.
     *
     * @param body the V1Endpoints value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Endpoints object
     */
    Observable<ServiceResponse<V1Endpoints>> replaceNamespacedEndpointsWithServiceResponseAsync(V1Endpoints body, String name, String namespace, String pretty);

    /**
     * delete Endpoints.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedEndpoints(V1DeleteOptions body, String name, String namespace);

    /**
     * delete Endpoints.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedEndpointsAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete Endpoints.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedEndpointsAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete Endpoints.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedEndpointsWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete Endpoints.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedEndpoints(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete Endpoints.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedEndpointsAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete Endpoints.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedEndpointsAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete Endpoints.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedEndpointsWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified Endpoints.
     *
     * @param body the Object value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Endpoints object if successful.
     */
    V1Endpoints patchNamespacedEndpoints(Object body, String name, String namespace);

    /**
     * partially update the specified Endpoints.
     *
     * @param body the Object value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Endpoints> patchNamespacedEndpointsAsync(Object body, String name, String namespace, final ServiceCallback<V1Endpoints> serviceCallback);

    /**
     * partially update the specified Endpoints.
     *
     * @param body the Object value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Endpoints object
     */
    Observable<V1Endpoints> patchNamespacedEndpointsAsync(Object body, String name, String namespace);

    /**
     * partially update the specified Endpoints.
     *
     * @param body the Object value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Endpoints object
     */
    Observable<ServiceResponse<V1Endpoints>> patchNamespacedEndpointsWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified Endpoints.
     *
     * @param body the Object value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Endpoints object if successful.
     */
    V1Endpoints patchNamespacedEndpoints(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Endpoints.
     *
     * @param body the Object value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Endpoints> patchNamespacedEndpointsAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1Endpoints> serviceCallback);

    /**
     * partially update the specified Endpoints.
     *
     * @param body the Object value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Endpoints object
     */
    Observable<V1Endpoints> patchNamespacedEndpointsAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Endpoints.
     *
     * @param body the Object value
     * @param name name of the Endpoints
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Endpoints object
     */
    Observable<ServiceResponse<V1Endpoints>> patchNamespacedEndpointsWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind Event.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1EventList object if successful.
     */
    V1EventList listNamespacedEvent(String namespace);

    /**
     * list or watch objects of kind Event.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1EventList> listNamespacedEventAsync(String namespace, final ServiceCallback<V1EventList> serviceCallback);

    /**
     * list or watch objects of kind Event.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1EventList object
     */
    Observable<V1EventList> listNamespacedEventAsync(String namespace);

    /**
     * list or watch objects of kind Event.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1EventList object
     */
    Observable<ServiceResponse<V1EventList>> listNamespacedEventWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind Event.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1EventList object if successful.
     */
    V1EventList listNamespacedEvent(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Event.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1EventList> listNamespacedEventAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1EventList> serviceCallback);

    /**
     * list or watch objects of kind Event.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1EventList object
     */
    Observable<V1EventList> listNamespacedEventAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Event.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1EventList object
     */
    Observable<ServiceResponse<V1EventList>> listNamespacedEventWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create an Event.
     *
     * @param body the V1Event value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Event object if successful.
     */
    V1Event createNamespacedEvent(V1Event body, String namespace);

    /**
     * create an Event.
     *
     * @param body the V1Event value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Event> createNamespacedEventAsync(V1Event body, String namespace, final ServiceCallback<V1Event> serviceCallback);

    /**
     * create an Event.
     *
     * @param body the V1Event value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Event object
     */
    Observable<V1Event> createNamespacedEventAsync(V1Event body, String namespace);

    /**
     * create an Event.
     *
     * @param body the V1Event value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Event object
     */
    Observable<ServiceResponse<V1Event>> createNamespacedEventWithServiceResponseAsync(V1Event body, String namespace);
    /**
     * create an Event.
     *
     * @param body the V1Event value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Event object if successful.
     */
    V1Event createNamespacedEvent(V1Event body, String namespace, String pretty);

    /**
     * create an Event.
     *
     * @param body the V1Event value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Event> createNamespacedEventAsync(V1Event body, String namespace, String pretty, final ServiceCallback<V1Event> serviceCallback);

    /**
     * create an Event.
     *
     * @param body the V1Event value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Event object
     */
    Observable<V1Event> createNamespacedEventAsync(V1Event body, String namespace, String pretty);

    /**
     * create an Event.
     *
     * @param body the V1Event value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Event object
     */
    Observable<ServiceResponse<V1Event>> createNamespacedEventWithServiceResponseAsync(V1Event body, String namespace, String pretty);

    /**
     * delete collection of Event.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedEvent(String namespace);

    /**
     * delete collection of Event.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedEventAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Event.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedEventAsync(String namespace);

    /**
     * delete collection of Event.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedEventWithServiceResponseAsync(String namespace);
    /**
     * delete collection of Event.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedEvent(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Event.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedEventAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Event.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedEventAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Event.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedEventWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified Event.
     *
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Event object if successful.
     */
    V1Event readNamespacedEvent(String name, String namespace);

    /**
     * read the specified Event.
     *
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Event> readNamespacedEventAsync(String name, String namespace, final ServiceCallback<V1Event> serviceCallback);

    /**
     * read the specified Event.
     *
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Event object
     */
    Observable<V1Event> readNamespacedEventAsync(String name, String namespace);

    /**
     * read the specified Event.
     *
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Event object
     */
    Observable<ServiceResponse<V1Event>> readNamespacedEventWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified Event.
     *
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Event object if successful.
     */
    V1Event readNamespacedEvent(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Event.
     *
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Event> readNamespacedEventAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1Event> serviceCallback);

    /**
     * read the specified Event.
     *
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Event object
     */
    Observable<V1Event> readNamespacedEventAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Event.
     *
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Event object
     */
    Observable<ServiceResponse<V1Event>> readNamespacedEventWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified Event.
     *
     * @param body the V1Event value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Event object if successful.
     */
    V1Event replaceNamespacedEvent(V1Event body, String name, String namespace);

    /**
     * replace the specified Event.
     *
     * @param body the V1Event value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Event> replaceNamespacedEventAsync(V1Event body, String name, String namespace, final ServiceCallback<V1Event> serviceCallback);

    /**
     * replace the specified Event.
     *
     * @param body the V1Event value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Event object
     */
    Observable<V1Event> replaceNamespacedEventAsync(V1Event body, String name, String namespace);

    /**
     * replace the specified Event.
     *
     * @param body the V1Event value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Event object
     */
    Observable<ServiceResponse<V1Event>> replaceNamespacedEventWithServiceResponseAsync(V1Event body, String name, String namespace);
    /**
     * replace the specified Event.
     *
     * @param body the V1Event value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Event object if successful.
     */
    V1Event replaceNamespacedEvent(V1Event body, String name, String namespace, String pretty);

    /**
     * replace the specified Event.
     *
     * @param body the V1Event value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Event> replaceNamespacedEventAsync(V1Event body, String name, String namespace, String pretty, final ServiceCallback<V1Event> serviceCallback);

    /**
     * replace the specified Event.
     *
     * @param body the V1Event value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Event object
     */
    Observable<V1Event> replaceNamespacedEventAsync(V1Event body, String name, String namespace, String pretty);

    /**
     * replace the specified Event.
     *
     * @param body the V1Event value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Event object
     */
    Observable<ServiceResponse<V1Event>> replaceNamespacedEventWithServiceResponseAsync(V1Event body, String name, String namespace, String pretty);

    /**
     * delete an Event.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedEvent(V1DeleteOptions body, String name, String namespace);

    /**
     * delete an Event.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedEventAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete an Event.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedEventAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete an Event.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedEventWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete an Event.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedEvent(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete an Event.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedEventAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete an Event.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedEventAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete an Event.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedEventWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified Event.
     *
     * @param body the Object value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Event object if successful.
     */
    V1Event patchNamespacedEvent(Object body, String name, String namespace);

    /**
     * partially update the specified Event.
     *
     * @param body the Object value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Event> patchNamespacedEventAsync(Object body, String name, String namespace, final ServiceCallback<V1Event> serviceCallback);

    /**
     * partially update the specified Event.
     *
     * @param body the Object value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Event object
     */
    Observable<V1Event> patchNamespacedEventAsync(Object body, String name, String namespace);

    /**
     * partially update the specified Event.
     *
     * @param body the Object value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Event object
     */
    Observable<ServiceResponse<V1Event>> patchNamespacedEventWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified Event.
     *
     * @param body the Object value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Event object if successful.
     */
    V1Event patchNamespacedEvent(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Event.
     *
     * @param body the Object value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Event> patchNamespacedEventAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1Event> serviceCallback);

    /**
     * partially update the specified Event.
     *
     * @param body the Object value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Event object
     */
    Observable<V1Event> patchNamespacedEventAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Event.
     *
     * @param body the Object value
     * @param name name of the Event
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Event object
     */
    Observable<ServiceResponse<V1Event>> patchNamespacedEventWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind LimitRange.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1LimitRangeList object if successful.
     */
    V1LimitRangeList listNamespacedLimitRange(String namespace);

    /**
     * list or watch objects of kind LimitRange.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1LimitRangeList> listNamespacedLimitRangeAsync(String namespace, final ServiceCallback<V1LimitRangeList> serviceCallback);

    /**
     * list or watch objects of kind LimitRange.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRangeList object
     */
    Observable<V1LimitRangeList> listNamespacedLimitRangeAsync(String namespace);

    /**
     * list or watch objects of kind LimitRange.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRangeList object
     */
    Observable<ServiceResponse<V1LimitRangeList>> listNamespacedLimitRangeWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind LimitRange.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1LimitRangeList object if successful.
     */
    V1LimitRangeList listNamespacedLimitRange(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind LimitRange.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1LimitRangeList> listNamespacedLimitRangeAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1LimitRangeList> serviceCallback);

    /**
     * list or watch objects of kind LimitRange.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRangeList object
     */
    Observable<V1LimitRangeList> listNamespacedLimitRangeAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind LimitRange.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRangeList object
     */
    Observable<ServiceResponse<V1LimitRangeList>> listNamespacedLimitRangeWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a LimitRange.
     *
     * @param body the V1LimitRange value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1LimitRange object if successful.
     */
    V1LimitRange createNamespacedLimitRange(V1LimitRange body, String namespace);

    /**
     * create a LimitRange.
     *
     * @param body the V1LimitRange value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1LimitRange> createNamespacedLimitRangeAsync(V1LimitRange body, String namespace, final ServiceCallback<V1LimitRange> serviceCallback);

    /**
     * create a LimitRange.
     *
     * @param body the V1LimitRange value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRange object
     */
    Observable<V1LimitRange> createNamespacedLimitRangeAsync(V1LimitRange body, String namespace);

    /**
     * create a LimitRange.
     *
     * @param body the V1LimitRange value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRange object
     */
    Observable<ServiceResponse<V1LimitRange>> createNamespacedLimitRangeWithServiceResponseAsync(V1LimitRange body, String namespace);
    /**
     * create a LimitRange.
     *
     * @param body the V1LimitRange value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1LimitRange object if successful.
     */
    V1LimitRange createNamespacedLimitRange(V1LimitRange body, String namespace, String pretty);

    /**
     * create a LimitRange.
     *
     * @param body the V1LimitRange value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1LimitRange> createNamespacedLimitRangeAsync(V1LimitRange body, String namespace, String pretty, final ServiceCallback<V1LimitRange> serviceCallback);

    /**
     * create a LimitRange.
     *
     * @param body the V1LimitRange value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRange object
     */
    Observable<V1LimitRange> createNamespacedLimitRangeAsync(V1LimitRange body, String namespace, String pretty);

    /**
     * create a LimitRange.
     *
     * @param body the V1LimitRange value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRange object
     */
    Observable<ServiceResponse<V1LimitRange>> createNamespacedLimitRangeWithServiceResponseAsync(V1LimitRange body, String namespace, String pretty);

    /**
     * delete collection of LimitRange.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedLimitRange(String namespace);

    /**
     * delete collection of LimitRange.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedLimitRangeAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of LimitRange.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedLimitRangeAsync(String namespace);

    /**
     * delete collection of LimitRange.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedLimitRangeWithServiceResponseAsync(String namespace);
    /**
     * delete collection of LimitRange.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedLimitRange(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of LimitRange.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedLimitRangeAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of LimitRange.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedLimitRangeAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of LimitRange.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedLimitRangeWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified LimitRange.
     *
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1LimitRange object if successful.
     */
    V1LimitRange readNamespacedLimitRange(String name, String namespace);

    /**
     * read the specified LimitRange.
     *
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1LimitRange> readNamespacedLimitRangeAsync(String name, String namespace, final ServiceCallback<V1LimitRange> serviceCallback);

    /**
     * read the specified LimitRange.
     *
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRange object
     */
    Observable<V1LimitRange> readNamespacedLimitRangeAsync(String name, String namespace);

    /**
     * read the specified LimitRange.
     *
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRange object
     */
    Observable<ServiceResponse<V1LimitRange>> readNamespacedLimitRangeWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified LimitRange.
     *
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1LimitRange object if successful.
     */
    V1LimitRange readNamespacedLimitRange(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified LimitRange.
     *
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1LimitRange> readNamespacedLimitRangeAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1LimitRange> serviceCallback);

    /**
     * read the specified LimitRange.
     *
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRange object
     */
    Observable<V1LimitRange> readNamespacedLimitRangeAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified LimitRange.
     *
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRange object
     */
    Observable<ServiceResponse<V1LimitRange>> readNamespacedLimitRangeWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified LimitRange.
     *
     * @param body the V1LimitRange value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1LimitRange object if successful.
     */
    V1LimitRange replaceNamespacedLimitRange(V1LimitRange body, String name, String namespace);

    /**
     * replace the specified LimitRange.
     *
     * @param body the V1LimitRange value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1LimitRange> replaceNamespacedLimitRangeAsync(V1LimitRange body, String name, String namespace, final ServiceCallback<V1LimitRange> serviceCallback);

    /**
     * replace the specified LimitRange.
     *
     * @param body the V1LimitRange value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRange object
     */
    Observable<V1LimitRange> replaceNamespacedLimitRangeAsync(V1LimitRange body, String name, String namespace);

    /**
     * replace the specified LimitRange.
     *
     * @param body the V1LimitRange value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRange object
     */
    Observable<ServiceResponse<V1LimitRange>> replaceNamespacedLimitRangeWithServiceResponseAsync(V1LimitRange body, String name, String namespace);
    /**
     * replace the specified LimitRange.
     *
     * @param body the V1LimitRange value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1LimitRange object if successful.
     */
    V1LimitRange replaceNamespacedLimitRange(V1LimitRange body, String name, String namespace, String pretty);

    /**
     * replace the specified LimitRange.
     *
     * @param body the V1LimitRange value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1LimitRange> replaceNamespacedLimitRangeAsync(V1LimitRange body, String name, String namespace, String pretty, final ServiceCallback<V1LimitRange> serviceCallback);

    /**
     * replace the specified LimitRange.
     *
     * @param body the V1LimitRange value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRange object
     */
    Observable<V1LimitRange> replaceNamespacedLimitRangeAsync(V1LimitRange body, String name, String namespace, String pretty);

    /**
     * replace the specified LimitRange.
     *
     * @param body the V1LimitRange value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRange object
     */
    Observable<ServiceResponse<V1LimitRange>> replaceNamespacedLimitRangeWithServiceResponseAsync(V1LimitRange body, String name, String namespace, String pretty);

    /**
     * delete a LimitRange.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedLimitRange(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a LimitRange.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedLimitRangeAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a LimitRange.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedLimitRangeAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a LimitRange.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedLimitRangeWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a LimitRange.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedLimitRange(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a LimitRange.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedLimitRangeAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a LimitRange.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedLimitRangeAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a LimitRange.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedLimitRangeWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified LimitRange.
     *
     * @param body the Object value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1LimitRange object if successful.
     */
    V1LimitRange patchNamespacedLimitRange(Object body, String name, String namespace);

    /**
     * partially update the specified LimitRange.
     *
     * @param body the Object value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1LimitRange> patchNamespacedLimitRangeAsync(Object body, String name, String namespace, final ServiceCallback<V1LimitRange> serviceCallback);

    /**
     * partially update the specified LimitRange.
     *
     * @param body the Object value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRange object
     */
    Observable<V1LimitRange> patchNamespacedLimitRangeAsync(Object body, String name, String namespace);

    /**
     * partially update the specified LimitRange.
     *
     * @param body the Object value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRange object
     */
    Observable<ServiceResponse<V1LimitRange>> patchNamespacedLimitRangeWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified LimitRange.
     *
     * @param body the Object value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1LimitRange object if successful.
     */
    V1LimitRange patchNamespacedLimitRange(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified LimitRange.
     *
     * @param body the Object value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1LimitRange> patchNamespacedLimitRangeAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1LimitRange> serviceCallback);

    /**
     * partially update the specified LimitRange.
     *
     * @param body the Object value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRange object
     */
    Observable<V1LimitRange> patchNamespacedLimitRangeAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified LimitRange.
     *
     * @param body the Object value
     * @param name name of the LimitRange
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LimitRange object
     */
    Observable<ServiceResponse<V1LimitRange>> patchNamespacedLimitRangeWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind PersistentVolumeClaim.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaimList object if successful.
     */
    V1PersistentVolumeClaimList listNamespacedPersistentVolumeClaim(String namespace);

    /**
     * list or watch objects of kind PersistentVolumeClaim.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaimList> listNamespacedPersistentVolumeClaimAsync(String namespace, final ServiceCallback<V1PersistentVolumeClaimList> serviceCallback);

    /**
     * list or watch objects of kind PersistentVolumeClaim.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaimList object
     */
    Observable<V1PersistentVolumeClaimList> listNamespacedPersistentVolumeClaimAsync(String namespace);

    /**
     * list or watch objects of kind PersistentVolumeClaim.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaimList object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaimList>> listNamespacedPersistentVolumeClaimWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind PersistentVolumeClaim.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaimList object if successful.
     */
    V1PersistentVolumeClaimList listNamespacedPersistentVolumeClaim(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind PersistentVolumeClaim.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaimList> listNamespacedPersistentVolumeClaimAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1PersistentVolumeClaimList> serviceCallback);

    /**
     * list or watch objects of kind PersistentVolumeClaim.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaimList object
     */
    Observable<V1PersistentVolumeClaimList> listNamespacedPersistentVolumeClaimAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind PersistentVolumeClaim.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaimList object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaimList>> listNamespacedPersistentVolumeClaimWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaim object if successful.
     */
    V1PersistentVolumeClaim createNamespacedPersistentVolumeClaim(V1PersistentVolumeClaim body, String namespace);

    /**
     * create a PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaim> createNamespacedPersistentVolumeClaimAsync(V1PersistentVolumeClaim body, String namespace, final ServiceCallback<V1PersistentVolumeClaim> serviceCallback);

    /**
     * create a PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<V1PersistentVolumeClaim> createNamespacedPersistentVolumeClaimAsync(V1PersistentVolumeClaim body, String namespace);

    /**
     * create a PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaim>> createNamespacedPersistentVolumeClaimWithServiceResponseAsync(V1PersistentVolumeClaim body, String namespace);
    /**
     * create a PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaim object if successful.
     */
    V1PersistentVolumeClaim createNamespacedPersistentVolumeClaim(V1PersistentVolumeClaim body, String namespace, String pretty);

    /**
     * create a PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaim> createNamespacedPersistentVolumeClaimAsync(V1PersistentVolumeClaim body, String namespace, String pretty, final ServiceCallback<V1PersistentVolumeClaim> serviceCallback);

    /**
     * create a PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<V1PersistentVolumeClaim> createNamespacedPersistentVolumeClaimAsync(V1PersistentVolumeClaim body, String namespace, String pretty);

    /**
     * create a PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaim>> createNamespacedPersistentVolumeClaimWithServiceResponseAsync(V1PersistentVolumeClaim body, String namespace, String pretty);

    /**
     * delete collection of PersistentVolumeClaim.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedPersistentVolumeClaim(String namespace);

    /**
     * delete collection of PersistentVolumeClaim.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedPersistentVolumeClaimAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of PersistentVolumeClaim.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedPersistentVolumeClaimAsync(String namespace);

    /**
     * delete collection of PersistentVolumeClaim.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedPersistentVolumeClaimWithServiceResponseAsync(String namespace);
    /**
     * delete collection of PersistentVolumeClaim.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedPersistentVolumeClaim(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of PersistentVolumeClaim.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedPersistentVolumeClaimAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of PersistentVolumeClaim.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedPersistentVolumeClaimAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of PersistentVolumeClaim.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedPersistentVolumeClaimWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified PersistentVolumeClaim.
     *
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaim object if successful.
     */
    V1PersistentVolumeClaim readNamespacedPersistentVolumeClaim(String name, String namespace);

    /**
     * read the specified PersistentVolumeClaim.
     *
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaim> readNamespacedPersistentVolumeClaimAsync(String name, String namespace, final ServiceCallback<V1PersistentVolumeClaim> serviceCallback);

    /**
     * read the specified PersistentVolumeClaim.
     *
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<V1PersistentVolumeClaim> readNamespacedPersistentVolumeClaimAsync(String name, String namespace);

    /**
     * read the specified PersistentVolumeClaim.
     *
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaim>> readNamespacedPersistentVolumeClaimWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified PersistentVolumeClaim.
     *
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaim object if successful.
     */
    V1PersistentVolumeClaim readNamespacedPersistentVolumeClaim(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified PersistentVolumeClaim.
     *
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaim> readNamespacedPersistentVolumeClaimAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1PersistentVolumeClaim> serviceCallback);

    /**
     * read the specified PersistentVolumeClaim.
     *
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<V1PersistentVolumeClaim> readNamespacedPersistentVolumeClaimAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified PersistentVolumeClaim.
     *
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaim>> readNamespacedPersistentVolumeClaimWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaim object if successful.
     */
    V1PersistentVolumeClaim replaceNamespacedPersistentVolumeClaim(V1PersistentVolumeClaim body, String name, String namespace);

    /**
     * replace the specified PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaim> replaceNamespacedPersistentVolumeClaimAsync(V1PersistentVolumeClaim body, String name, String namespace, final ServiceCallback<V1PersistentVolumeClaim> serviceCallback);

    /**
     * replace the specified PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<V1PersistentVolumeClaim> replaceNamespacedPersistentVolumeClaimAsync(V1PersistentVolumeClaim body, String name, String namespace);

    /**
     * replace the specified PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaim>> replaceNamespacedPersistentVolumeClaimWithServiceResponseAsync(V1PersistentVolumeClaim body, String name, String namespace);
    /**
     * replace the specified PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaim object if successful.
     */
    V1PersistentVolumeClaim replaceNamespacedPersistentVolumeClaim(V1PersistentVolumeClaim body, String name, String namespace, String pretty);

    /**
     * replace the specified PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaim> replaceNamespacedPersistentVolumeClaimAsync(V1PersistentVolumeClaim body, String name, String namespace, String pretty, final ServiceCallback<V1PersistentVolumeClaim> serviceCallback);

    /**
     * replace the specified PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<V1PersistentVolumeClaim> replaceNamespacedPersistentVolumeClaimAsync(V1PersistentVolumeClaim body, String name, String namespace, String pretty);

    /**
     * replace the specified PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaim>> replaceNamespacedPersistentVolumeClaimWithServiceResponseAsync(V1PersistentVolumeClaim body, String name, String namespace, String pretty);

    /**
     * delete a PersistentVolumeClaim.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedPersistentVolumeClaim(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a PersistentVolumeClaim.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedPersistentVolumeClaimAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a PersistentVolumeClaim.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedPersistentVolumeClaimAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a PersistentVolumeClaim.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedPersistentVolumeClaimWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a PersistentVolumeClaim.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedPersistentVolumeClaim(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a PersistentVolumeClaim.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedPersistentVolumeClaimAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a PersistentVolumeClaim.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedPersistentVolumeClaimAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a PersistentVolumeClaim.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedPersistentVolumeClaimWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified PersistentVolumeClaim.
     *
     * @param body the Object value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaim object if successful.
     */
    V1PersistentVolumeClaim patchNamespacedPersistentVolumeClaim(Object body, String name, String namespace);

    /**
     * partially update the specified PersistentVolumeClaim.
     *
     * @param body the Object value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaim> patchNamespacedPersistentVolumeClaimAsync(Object body, String name, String namespace, final ServiceCallback<V1PersistentVolumeClaim> serviceCallback);

    /**
     * partially update the specified PersistentVolumeClaim.
     *
     * @param body the Object value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<V1PersistentVolumeClaim> patchNamespacedPersistentVolumeClaimAsync(Object body, String name, String namespace);

    /**
     * partially update the specified PersistentVolumeClaim.
     *
     * @param body the Object value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaim>> patchNamespacedPersistentVolumeClaimWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified PersistentVolumeClaim.
     *
     * @param body the Object value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaim object if successful.
     */
    V1PersistentVolumeClaim patchNamespacedPersistentVolumeClaim(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified PersistentVolumeClaim.
     *
     * @param body the Object value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaim> patchNamespacedPersistentVolumeClaimAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1PersistentVolumeClaim> serviceCallback);

    /**
     * partially update the specified PersistentVolumeClaim.
     *
     * @param body the Object value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<V1PersistentVolumeClaim> patchNamespacedPersistentVolumeClaimAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified PersistentVolumeClaim.
     *
     * @param body the Object value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaim>> patchNamespacedPersistentVolumeClaimWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read status of the specified PersistentVolumeClaim.
     *
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaim object if successful.
     */
    V1PersistentVolumeClaim readNamespacedPersistentVolumeClaimStatus(String name, String namespace);

    /**
     * read status of the specified PersistentVolumeClaim.
     *
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaim> readNamespacedPersistentVolumeClaimStatusAsync(String name, String namespace, final ServiceCallback<V1PersistentVolumeClaim> serviceCallback);

    /**
     * read status of the specified PersistentVolumeClaim.
     *
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<V1PersistentVolumeClaim> readNamespacedPersistentVolumeClaimStatusAsync(String name, String namespace);

    /**
     * read status of the specified PersistentVolumeClaim.
     *
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaim>> readNamespacedPersistentVolumeClaimStatusWithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified PersistentVolumeClaim.
     *
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaim object if successful.
     */
    V1PersistentVolumeClaim readNamespacedPersistentVolumeClaimStatus(String name, String namespace, String pretty);

    /**
     * read status of the specified PersistentVolumeClaim.
     *
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaim> readNamespacedPersistentVolumeClaimStatusAsync(String name, String namespace, String pretty, final ServiceCallback<V1PersistentVolumeClaim> serviceCallback);

    /**
     * read status of the specified PersistentVolumeClaim.
     *
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<V1PersistentVolumeClaim> readNamespacedPersistentVolumeClaimStatusAsync(String name, String namespace, String pretty);

    /**
     * read status of the specified PersistentVolumeClaim.
     *
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaim>> readNamespacedPersistentVolumeClaimStatusWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaim object if successful.
     */
    V1PersistentVolumeClaim replaceNamespacedPersistentVolumeClaimStatus(V1PersistentVolumeClaim body, String name, String namespace);

    /**
     * replace status of the specified PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaim> replaceNamespacedPersistentVolumeClaimStatusAsync(V1PersistentVolumeClaim body, String name, String namespace, final ServiceCallback<V1PersistentVolumeClaim> serviceCallback);

    /**
     * replace status of the specified PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<V1PersistentVolumeClaim> replaceNamespacedPersistentVolumeClaimStatusAsync(V1PersistentVolumeClaim body, String name, String namespace);

    /**
     * replace status of the specified PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaim>> replaceNamespacedPersistentVolumeClaimStatusWithServiceResponseAsync(V1PersistentVolumeClaim body, String name, String namespace);
    /**
     * replace status of the specified PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaim object if successful.
     */
    V1PersistentVolumeClaim replaceNamespacedPersistentVolumeClaimStatus(V1PersistentVolumeClaim body, String name, String namespace, String pretty);

    /**
     * replace status of the specified PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaim> replaceNamespacedPersistentVolumeClaimStatusAsync(V1PersistentVolumeClaim body, String name, String namespace, String pretty, final ServiceCallback<V1PersistentVolumeClaim> serviceCallback);

    /**
     * replace status of the specified PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<V1PersistentVolumeClaim> replaceNamespacedPersistentVolumeClaimStatusAsync(V1PersistentVolumeClaim body, String name, String namespace, String pretty);

    /**
     * replace status of the specified PersistentVolumeClaim.
     *
     * @param body the V1PersistentVolumeClaim value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaim>> replaceNamespacedPersistentVolumeClaimStatusWithServiceResponseAsync(V1PersistentVolumeClaim body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified PersistentVolumeClaim.
     *
     * @param body the Object value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaim object if successful.
     */
    V1PersistentVolumeClaim patchNamespacedPersistentVolumeClaimStatus(Object body, String name, String namespace);

    /**
     * partially update status of the specified PersistentVolumeClaim.
     *
     * @param body the Object value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaim> patchNamespacedPersistentVolumeClaimStatusAsync(Object body, String name, String namespace, final ServiceCallback<V1PersistentVolumeClaim> serviceCallback);

    /**
     * partially update status of the specified PersistentVolumeClaim.
     *
     * @param body the Object value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<V1PersistentVolumeClaim> patchNamespacedPersistentVolumeClaimStatusAsync(Object body, String name, String namespace);

    /**
     * partially update status of the specified PersistentVolumeClaim.
     *
     * @param body the Object value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaim>> patchNamespacedPersistentVolumeClaimStatusWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified PersistentVolumeClaim.
     *
     * @param body the Object value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaim object if successful.
     */
    V1PersistentVolumeClaim patchNamespacedPersistentVolumeClaimStatus(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified PersistentVolumeClaim.
     *
     * @param body the Object value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaim> patchNamespacedPersistentVolumeClaimStatusAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1PersistentVolumeClaim> serviceCallback);

    /**
     * partially update status of the specified PersistentVolumeClaim.
     *
     * @param body the Object value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<V1PersistentVolumeClaim> patchNamespacedPersistentVolumeClaimStatusAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified PersistentVolumeClaim.
     *
     * @param body the Object value
     * @param name name of the PersistentVolumeClaim
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaim object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaim>> patchNamespacedPersistentVolumeClaimStatusWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind Pod.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PodList object if successful.
     */
    V1PodList listNamespacedPod(String namespace);

    /**
     * list or watch objects of kind Pod.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PodList> listNamespacedPodAsync(String namespace, final ServiceCallback<V1PodList> serviceCallback);

    /**
     * list or watch objects of kind Pod.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodList object
     */
    Observable<V1PodList> listNamespacedPodAsync(String namespace);

    /**
     * list or watch objects of kind Pod.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodList object
     */
    Observable<ServiceResponse<V1PodList>> listNamespacedPodWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind Pod.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PodList object if successful.
     */
    V1PodList listNamespacedPod(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Pod.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PodList> listNamespacedPodAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1PodList> serviceCallback);

    /**
     * list or watch objects of kind Pod.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodList object
     */
    Observable<V1PodList> listNamespacedPodAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Pod.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodList object
     */
    Observable<ServiceResponse<V1PodList>> listNamespacedPodWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a Pod.
     *
     * @param body the V1Pod value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Pod object if successful.
     */
    V1Pod createNamespacedPod(V1Pod body, String namespace);

    /**
     * create a Pod.
     *
     * @param body the V1Pod value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Pod> createNamespacedPodAsync(V1Pod body, String namespace, final ServiceCallback<V1Pod> serviceCallback);

    /**
     * create a Pod.
     *
     * @param body the V1Pod value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<V1Pod> createNamespacedPodAsync(V1Pod body, String namespace);

    /**
     * create a Pod.
     *
     * @param body the V1Pod value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<ServiceResponse<V1Pod>> createNamespacedPodWithServiceResponseAsync(V1Pod body, String namespace);
    /**
     * create a Pod.
     *
     * @param body the V1Pod value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Pod object if successful.
     */
    V1Pod createNamespacedPod(V1Pod body, String namespace, String pretty);

    /**
     * create a Pod.
     *
     * @param body the V1Pod value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Pod> createNamespacedPodAsync(V1Pod body, String namespace, String pretty, final ServiceCallback<V1Pod> serviceCallback);

    /**
     * create a Pod.
     *
     * @param body the V1Pod value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<V1Pod> createNamespacedPodAsync(V1Pod body, String namespace, String pretty);

    /**
     * create a Pod.
     *
     * @param body the V1Pod value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<ServiceResponse<V1Pod>> createNamespacedPodWithServiceResponseAsync(V1Pod body, String namespace, String pretty);

    /**
     * delete collection of Pod.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedPod(String namespace);

    /**
     * delete collection of Pod.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedPodAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Pod.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedPodAsync(String namespace);

    /**
     * delete collection of Pod.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedPodWithServiceResponseAsync(String namespace);
    /**
     * delete collection of Pod.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedPod(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Pod.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedPodAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Pod.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedPodAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Pod.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedPodWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Pod object if successful.
     */
    V1Pod readNamespacedPod(String name, String namespace);

    /**
     * read the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Pod> readNamespacedPodAsync(String name, String namespace, final ServiceCallback<V1Pod> serviceCallback);

    /**
     * read the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<V1Pod> readNamespacedPodAsync(String name, String namespace);

    /**
     * read the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<ServiceResponse<V1Pod>> readNamespacedPodWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Pod object if successful.
     */
    V1Pod readNamespacedPod(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Pod> readNamespacedPodAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1Pod> serviceCallback);

    /**
     * read the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<V1Pod> readNamespacedPodAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<ServiceResponse<V1Pod>> readNamespacedPodWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified Pod.
     *
     * @param body the V1Pod value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Pod object if successful.
     */
    V1Pod replaceNamespacedPod(V1Pod body, String name, String namespace);

    /**
     * replace the specified Pod.
     *
     * @param body the V1Pod value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Pod> replaceNamespacedPodAsync(V1Pod body, String name, String namespace, final ServiceCallback<V1Pod> serviceCallback);

    /**
     * replace the specified Pod.
     *
     * @param body the V1Pod value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<V1Pod> replaceNamespacedPodAsync(V1Pod body, String name, String namespace);

    /**
     * replace the specified Pod.
     *
     * @param body the V1Pod value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<ServiceResponse<V1Pod>> replaceNamespacedPodWithServiceResponseAsync(V1Pod body, String name, String namespace);
    /**
     * replace the specified Pod.
     *
     * @param body the V1Pod value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Pod object if successful.
     */
    V1Pod replaceNamespacedPod(V1Pod body, String name, String namespace, String pretty);

    /**
     * replace the specified Pod.
     *
     * @param body the V1Pod value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Pod> replaceNamespacedPodAsync(V1Pod body, String name, String namespace, String pretty, final ServiceCallback<V1Pod> serviceCallback);

    /**
     * replace the specified Pod.
     *
     * @param body the V1Pod value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<V1Pod> replaceNamespacedPodAsync(V1Pod body, String name, String namespace, String pretty);

    /**
     * replace the specified Pod.
     *
     * @param body the V1Pod value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<ServiceResponse<V1Pod>> replaceNamespacedPodWithServiceResponseAsync(V1Pod body, String name, String namespace, String pretty);

    /**
     * delete a Pod.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedPod(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a Pod.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedPodAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Pod.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedPodAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a Pod.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedPodWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a Pod.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedPod(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Pod.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedPodAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Pod.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedPodAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Pod.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedPodWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified Pod.
     *
     * @param body the Object value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Pod object if successful.
     */
    V1Pod patchNamespacedPod(Object body, String name, String namespace);

    /**
     * partially update the specified Pod.
     *
     * @param body the Object value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Pod> patchNamespacedPodAsync(Object body, String name, String namespace, final ServiceCallback<V1Pod> serviceCallback);

    /**
     * partially update the specified Pod.
     *
     * @param body the Object value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<V1Pod> patchNamespacedPodAsync(Object body, String name, String namespace);

    /**
     * partially update the specified Pod.
     *
     * @param body the Object value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<ServiceResponse<V1Pod>> patchNamespacedPodWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified Pod.
     *
     * @param body the Object value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Pod object if successful.
     */
    V1Pod patchNamespacedPod(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Pod.
     *
     * @param body the Object value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Pod> patchNamespacedPodAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1Pod> serviceCallback);

    /**
     * partially update the specified Pod.
     *
     * @param body the Object value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<V1Pod> patchNamespacedPodAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Pod.
     *
     * @param body the Object value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<ServiceResponse<V1Pod>> patchNamespacedPodWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * connect GET requests to attach of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectGetNamespacedPodAttach(String name, String namespace);

    /**
     * connect GET requests to attach of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectGetNamespacedPodAttachAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * connect GET requests to attach of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectGetNamespacedPodAttachAsync(String name, String namespace);

    /**
     * connect GET requests to attach of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectGetNamespacedPodAttachWithServiceResponseAsync(String name, String namespace);
    /**
     * connect GET requests to attach of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param container The container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param stderr Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
     * @param stdin Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
     * @param stdout Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
     * @param tty TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectGetNamespacedPodAttach(String name, String namespace, String container, Boolean stderr, Boolean stdin, Boolean stdout, Boolean tty);

    /**
     * connect GET requests to attach of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param container The container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param stderr Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
     * @param stdin Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
     * @param stdout Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
     * @param tty TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectGetNamespacedPodAttachAsync(String name, String namespace, String container, Boolean stderr, Boolean stdin, Boolean stdout, Boolean tty, final ServiceCallback<String> serviceCallback);

    /**
     * connect GET requests to attach of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param container The container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param stderr Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
     * @param stdin Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
     * @param stdout Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
     * @param tty TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectGetNamespacedPodAttachAsync(String name, String namespace, String container, Boolean stderr, Boolean stdin, Boolean stdout, Boolean tty);

    /**
     * connect GET requests to attach of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param container The container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param stderr Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
     * @param stdin Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
     * @param stdout Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
     * @param tty TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectGetNamespacedPodAttachWithServiceResponseAsync(String name, String namespace, String container, Boolean stderr, Boolean stdin, Boolean stdout, Boolean tty);

    /**
     * connect POST requests to attach of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPostNamespacedPodAttach(String name, String namespace);

    /**
     * connect POST requests to attach of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPostNamespacedPodAttachAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * connect POST requests to attach of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPostNamespacedPodAttachAsync(String name, String namespace);

    /**
     * connect POST requests to attach of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPostNamespacedPodAttachWithServiceResponseAsync(String name, String namespace);
    /**
     * connect POST requests to attach of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param container The container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param stderr Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
     * @param stdin Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
     * @param stdout Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
     * @param tty TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPostNamespacedPodAttach(String name, String namespace, String container, Boolean stderr, Boolean stdin, Boolean stdout, Boolean tty);

    /**
     * connect POST requests to attach of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param container The container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param stderr Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
     * @param stdin Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
     * @param stdout Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
     * @param tty TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPostNamespacedPodAttachAsync(String name, String namespace, String container, Boolean stderr, Boolean stdin, Boolean stdout, Boolean tty, final ServiceCallback<String> serviceCallback);

    /**
     * connect POST requests to attach of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param container The container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param stderr Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
     * @param stdin Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
     * @param stdout Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
     * @param tty TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPostNamespacedPodAttachAsync(String name, String namespace, String container, Boolean stderr, Boolean stdin, Boolean stdout, Boolean tty);

    /**
     * connect POST requests to attach of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param container The container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param stderr Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
     * @param stdin Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
     * @param stdout Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
     * @param tty TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPostNamespacedPodAttachWithServiceResponseAsync(String name, String namespace, String container, Boolean stderr, Boolean stdin, Boolean stdout, Boolean tty);

    /**
     * create binding of a Binding.
     *
     * @param body the V1Binding value
     * @param name name of the Binding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Binding object if successful.
     */
    V1Binding createNamespacedBindingBinding(V1Binding body, String name, String namespace);

    /**
     * create binding of a Binding.
     *
     * @param body the V1Binding value
     * @param name name of the Binding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Binding> createNamespacedBindingBindingAsync(V1Binding body, String name, String namespace, final ServiceCallback<V1Binding> serviceCallback);

    /**
     * create binding of a Binding.
     *
     * @param body the V1Binding value
     * @param name name of the Binding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Binding object
     */
    Observable<V1Binding> createNamespacedBindingBindingAsync(V1Binding body, String name, String namespace);

    /**
     * create binding of a Binding.
     *
     * @param body the V1Binding value
     * @param name name of the Binding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Binding object
     */
    Observable<ServiceResponse<V1Binding>> createNamespacedBindingBindingWithServiceResponseAsync(V1Binding body, String name, String namespace);
    /**
     * create binding of a Binding.
     *
     * @param body the V1Binding value
     * @param name name of the Binding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Binding object if successful.
     */
    V1Binding createNamespacedBindingBinding(V1Binding body, String name, String namespace, String pretty);

    /**
     * create binding of a Binding.
     *
     * @param body the V1Binding value
     * @param name name of the Binding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Binding> createNamespacedBindingBindingAsync(V1Binding body, String name, String namespace, String pretty, final ServiceCallback<V1Binding> serviceCallback);

    /**
     * create binding of a Binding.
     *
     * @param body the V1Binding value
     * @param name name of the Binding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Binding object
     */
    Observable<V1Binding> createNamespacedBindingBindingAsync(V1Binding body, String name, String namespace, String pretty);

    /**
     * create binding of a Binding.
     *
     * @param body the V1Binding value
     * @param name name of the Binding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Binding object
     */
    Observable<ServiceResponse<V1Binding>> createNamespacedBindingBindingWithServiceResponseAsync(V1Binding body, String name, String namespace, String pretty);

    /**
     * create eviction of an Eviction.
     *
     * @param body the V1beta1Eviction value
     * @param name name of the Eviction
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Eviction object if successful.
     */
    V1beta1Eviction createNamespacedEvictionEviction(V1beta1Eviction body, String name, String namespace);

    /**
     * create eviction of an Eviction.
     *
     * @param body the V1beta1Eviction value
     * @param name name of the Eviction
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Eviction> createNamespacedEvictionEvictionAsync(V1beta1Eviction body, String name, String namespace, final ServiceCallback<V1beta1Eviction> serviceCallback);

    /**
     * create eviction of an Eviction.
     *
     * @param body the V1beta1Eviction value
     * @param name name of the Eviction
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Eviction object
     */
    Observable<V1beta1Eviction> createNamespacedEvictionEvictionAsync(V1beta1Eviction body, String name, String namespace);

    /**
     * create eviction of an Eviction.
     *
     * @param body the V1beta1Eviction value
     * @param name name of the Eviction
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Eviction object
     */
    Observable<ServiceResponse<V1beta1Eviction>> createNamespacedEvictionEvictionWithServiceResponseAsync(V1beta1Eviction body, String name, String namespace);
    /**
     * create eviction of an Eviction.
     *
     * @param body the V1beta1Eviction value
     * @param name name of the Eviction
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Eviction object if successful.
     */
    V1beta1Eviction createNamespacedEvictionEviction(V1beta1Eviction body, String name, String namespace, String pretty);

    /**
     * create eviction of an Eviction.
     *
     * @param body the V1beta1Eviction value
     * @param name name of the Eviction
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Eviction> createNamespacedEvictionEvictionAsync(V1beta1Eviction body, String name, String namespace, String pretty, final ServiceCallback<V1beta1Eviction> serviceCallback);

    /**
     * create eviction of an Eviction.
     *
     * @param body the V1beta1Eviction value
     * @param name name of the Eviction
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Eviction object
     */
    Observable<V1beta1Eviction> createNamespacedEvictionEvictionAsync(V1beta1Eviction body, String name, String namespace, String pretty);

    /**
     * create eviction of an Eviction.
     *
     * @param body the V1beta1Eviction value
     * @param name name of the Eviction
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Eviction object
     */
    Observable<ServiceResponse<V1beta1Eviction>> createNamespacedEvictionEvictionWithServiceResponseAsync(V1beta1Eviction body, String name, String namespace, String pretty);

    /**
     * connect GET requests to exec of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectGetNamespacedPodExec(String name, String namespace);

    /**
     * connect GET requests to exec of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectGetNamespacedPodExecAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * connect GET requests to exec of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectGetNamespacedPodExecAsync(String name, String namespace);

    /**
     * connect GET requests to exec of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectGetNamespacedPodExecWithServiceResponseAsync(String name, String namespace);
    /**
     * connect GET requests to exec of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param command Command is the remote command to execute. argv array. Not executed within a shell.
     * @param container Container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param stderr Redirect the standard error stream of the pod for this call. Defaults to true.
     * @param stdin Redirect the standard input stream of the pod for this call. Defaults to false.
     * @param stdout Redirect the standard output stream of the pod for this call. Defaults to true.
     * @param tty TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectGetNamespacedPodExec(String name, String namespace, String command, String container, Boolean stderr, Boolean stdin, Boolean stdout, Boolean tty);

    /**
     * connect GET requests to exec of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param command Command is the remote command to execute. argv array. Not executed within a shell.
     * @param container Container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param stderr Redirect the standard error stream of the pod for this call. Defaults to true.
     * @param stdin Redirect the standard input stream of the pod for this call. Defaults to false.
     * @param stdout Redirect the standard output stream of the pod for this call. Defaults to true.
     * @param tty TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectGetNamespacedPodExecAsync(String name, String namespace, String command, String container, Boolean stderr, Boolean stdin, Boolean stdout, Boolean tty, final ServiceCallback<String> serviceCallback);

    /**
     * connect GET requests to exec of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param command Command is the remote command to execute. argv array. Not executed within a shell.
     * @param container Container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param stderr Redirect the standard error stream of the pod for this call. Defaults to true.
     * @param stdin Redirect the standard input stream of the pod for this call. Defaults to false.
     * @param stdout Redirect the standard output stream of the pod for this call. Defaults to true.
     * @param tty TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectGetNamespacedPodExecAsync(String name, String namespace, String command, String container, Boolean stderr, Boolean stdin, Boolean stdout, Boolean tty);

    /**
     * connect GET requests to exec of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param command Command is the remote command to execute. argv array. Not executed within a shell.
     * @param container Container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param stderr Redirect the standard error stream of the pod for this call. Defaults to true.
     * @param stdin Redirect the standard input stream of the pod for this call. Defaults to false.
     * @param stdout Redirect the standard output stream of the pod for this call. Defaults to true.
     * @param tty TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectGetNamespacedPodExecWithServiceResponseAsync(String name, String namespace, String command, String container, Boolean stderr, Boolean stdin, Boolean stdout, Boolean tty);

    /**
     * connect POST requests to exec of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPostNamespacedPodExec(String name, String namespace);

    /**
     * connect POST requests to exec of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPostNamespacedPodExecAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * connect POST requests to exec of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPostNamespacedPodExecAsync(String name, String namespace);

    /**
     * connect POST requests to exec of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPostNamespacedPodExecWithServiceResponseAsync(String name, String namespace);
    /**
     * connect POST requests to exec of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param command Command is the remote command to execute. argv array. Not executed within a shell.
     * @param container Container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param stderr Redirect the standard error stream of the pod for this call. Defaults to true.
     * @param stdin Redirect the standard input stream of the pod for this call. Defaults to false.
     * @param stdout Redirect the standard output stream of the pod for this call. Defaults to true.
     * @param tty TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPostNamespacedPodExec(String name, String namespace, String command, String container, Boolean stderr, Boolean stdin, Boolean stdout, Boolean tty);

    /**
     * connect POST requests to exec of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param command Command is the remote command to execute. argv array. Not executed within a shell.
     * @param container Container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param stderr Redirect the standard error stream of the pod for this call. Defaults to true.
     * @param stdin Redirect the standard input stream of the pod for this call. Defaults to false.
     * @param stdout Redirect the standard output stream of the pod for this call. Defaults to true.
     * @param tty TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPostNamespacedPodExecAsync(String name, String namespace, String command, String container, Boolean stderr, Boolean stdin, Boolean stdout, Boolean tty, final ServiceCallback<String> serviceCallback);

    /**
     * connect POST requests to exec of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param command Command is the remote command to execute. argv array. Not executed within a shell.
     * @param container Container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param stderr Redirect the standard error stream of the pod for this call. Defaults to true.
     * @param stdin Redirect the standard input stream of the pod for this call. Defaults to false.
     * @param stdout Redirect the standard output stream of the pod for this call. Defaults to true.
     * @param tty TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPostNamespacedPodExecAsync(String name, String namespace, String command, String container, Boolean stderr, Boolean stdin, Boolean stdout, Boolean tty);

    /**
     * connect POST requests to exec of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param command Command is the remote command to execute. argv array. Not executed within a shell.
     * @param container Container in which to execute the command. Defaults to only container if there is only one container in the pod.
     * @param stderr Redirect the standard error stream of the pod for this call. Defaults to true.
     * @param stdin Redirect the standard input stream of the pod for this call. Defaults to false.
     * @param stdout Redirect the standard output stream of the pod for this call. Defaults to true.
     * @param tty TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPostNamespacedPodExecWithServiceResponseAsync(String name, String namespace, String command, String container, Boolean stderr, Boolean stdin, Boolean stdout, Boolean tty);

    /**
     * read log of the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String readNamespacedPodLog(String name, String namespace);

    /**
     * read log of the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> readNamespacedPodLogAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * read log of the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> readNamespacedPodLogAsync(String name, String namespace);

    /**
     * read log of the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> readNamespacedPodLogWithServiceResponseAsync(String name, String namespace);
    /**
     * read log of the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param container The container for which to stream logs. Defaults to only container if there is one container in the pod.
     * @param follow Follow the log stream of the pod. Defaults to false.
     * @param limitBytes If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.
     * @param pretty If 'true', then the output is pretty printed.
     * @param previous Return previous terminated container logs. Defaults to false.
     * @param sinceSeconds A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
     * @param tailLines If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime
     * @param timestamps If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String readNamespacedPodLog(String name, String namespace, String container, Boolean follow, Integer limitBytes, String pretty, Boolean previous, Integer sinceSeconds, Integer tailLines, Boolean timestamps);

    /**
     * read log of the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param container The container for which to stream logs. Defaults to only container if there is one container in the pod.
     * @param follow Follow the log stream of the pod. Defaults to false.
     * @param limitBytes If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.
     * @param pretty If 'true', then the output is pretty printed.
     * @param previous Return previous terminated container logs. Defaults to false.
     * @param sinceSeconds A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
     * @param tailLines If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime
     * @param timestamps If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> readNamespacedPodLogAsync(String name, String namespace, String container, Boolean follow, Integer limitBytes, String pretty, Boolean previous, Integer sinceSeconds, Integer tailLines, Boolean timestamps, final ServiceCallback<String> serviceCallback);

    /**
     * read log of the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param container The container for which to stream logs. Defaults to only container if there is one container in the pod.
     * @param follow Follow the log stream of the pod. Defaults to false.
     * @param limitBytes If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.
     * @param pretty If 'true', then the output is pretty printed.
     * @param previous Return previous terminated container logs. Defaults to false.
     * @param sinceSeconds A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
     * @param tailLines If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime
     * @param timestamps If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> readNamespacedPodLogAsync(String name, String namespace, String container, Boolean follow, Integer limitBytes, String pretty, Boolean previous, Integer sinceSeconds, Integer tailLines, Boolean timestamps);

    /**
     * read log of the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param container The container for which to stream logs. Defaults to only container if there is one container in the pod.
     * @param follow Follow the log stream of the pod. Defaults to false.
     * @param limitBytes If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.
     * @param pretty If 'true', then the output is pretty printed.
     * @param previous Return previous terminated container logs. Defaults to false.
     * @param sinceSeconds A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
     * @param tailLines If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime
     * @param timestamps If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> readNamespacedPodLogWithServiceResponseAsync(String name, String namespace, String container, Boolean follow, Integer limitBytes, String pretty, Boolean previous, Integer sinceSeconds, Integer tailLines, Boolean timestamps);

    /**
     * connect GET requests to portforward of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectGetNamespacedPodPortforward(String name, String namespace);

    /**
     * connect GET requests to portforward of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectGetNamespacedPodPortforwardAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * connect GET requests to portforward of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectGetNamespacedPodPortforwardAsync(String name, String namespace);

    /**
     * connect GET requests to portforward of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectGetNamespacedPodPortforwardWithServiceResponseAsync(String name, String namespace);
    /**
     * connect GET requests to portforward of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ports List of ports to forward Required when using WebSockets
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectGetNamespacedPodPortforward(String name, String namespace, Integer ports);

    /**
     * connect GET requests to portforward of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ports List of ports to forward Required when using WebSockets
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectGetNamespacedPodPortforwardAsync(String name, String namespace, Integer ports, final ServiceCallback<String> serviceCallback);

    /**
     * connect GET requests to portforward of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ports List of ports to forward Required when using WebSockets
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectGetNamespacedPodPortforwardAsync(String name, String namespace, Integer ports);

    /**
     * connect GET requests to portforward of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ports List of ports to forward Required when using WebSockets
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectGetNamespacedPodPortforwardWithServiceResponseAsync(String name, String namespace, Integer ports);

    /**
     * connect POST requests to portforward of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPostNamespacedPodPortforward(String name, String namespace);

    /**
     * connect POST requests to portforward of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPostNamespacedPodPortforwardAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * connect POST requests to portforward of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPostNamespacedPodPortforwardAsync(String name, String namespace);

    /**
     * connect POST requests to portforward of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPostNamespacedPodPortforwardWithServiceResponseAsync(String name, String namespace);
    /**
     * connect POST requests to portforward of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ports List of ports to forward Required when using WebSockets
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPostNamespacedPodPortforward(String name, String namespace, Integer ports);

    /**
     * connect POST requests to portforward of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ports List of ports to forward Required when using WebSockets
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPostNamespacedPodPortforwardAsync(String name, String namespace, Integer ports, final ServiceCallback<String> serviceCallback);

    /**
     * connect POST requests to portforward of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ports List of ports to forward Required when using WebSockets
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPostNamespacedPodPortforwardAsync(String name, String namespace, Integer ports);

    /**
     * connect POST requests to portforward of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ports List of ports to forward Required when using WebSockets
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPostNamespacedPodPortforwardWithServiceResponseAsync(String name, String namespace, Integer ports);

    /**
     * connect GET requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectGetNamespacedPodProxy(String name, String namespace);

    /**
     * connect GET requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectGetNamespacedPodProxyAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * connect GET requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectGetNamespacedPodProxyAsync(String name, String namespace);

    /**
     * connect GET requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectGetNamespacedPodProxyWithServiceResponseAsync(String name, String namespace);
    /**
     * connect GET requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectGetNamespacedPodProxy(String name, String namespace, String path);

    /**
     * connect GET requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectGetNamespacedPodProxyAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * connect GET requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectGetNamespacedPodProxyAsync(String name, String namespace, String path);

    /**
     * connect GET requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectGetNamespacedPodProxyWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * connect PUT requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPutNamespacedPodProxy(String name, String namespace);

    /**
     * connect PUT requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPutNamespacedPodProxyAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * connect PUT requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPutNamespacedPodProxyAsync(String name, String namespace);

    /**
     * connect PUT requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPutNamespacedPodProxyWithServiceResponseAsync(String name, String namespace);
    /**
     * connect PUT requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPutNamespacedPodProxy(String name, String namespace, String path);

    /**
     * connect PUT requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPutNamespacedPodProxyAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * connect PUT requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPutNamespacedPodProxyAsync(String name, String namespace, String path);

    /**
     * connect PUT requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPutNamespacedPodProxyWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * connect POST requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPostNamespacedPodProxy(String name, String namespace);

    /**
     * connect POST requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPostNamespacedPodProxyAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * connect POST requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPostNamespacedPodProxyAsync(String name, String namespace);

    /**
     * connect POST requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPostNamespacedPodProxyWithServiceResponseAsync(String name, String namespace);
    /**
     * connect POST requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPostNamespacedPodProxy(String name, String namespace, String path);

    /**
     * connect POST requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPostNamespacedPodProxyAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * connect POST requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPostNamespacedPodProxyAsync(String name, String namespace, String path);

    /**
     * connect POST requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPostNamespacedPodProxyWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * connect DELETE requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectDeleteNamespacedPodProxy(String name, String namespace);

    /**
     * connect DELETE requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectDeleteNamespacedPodProxyAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * connect DELETE requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectDeleteNamespacedPodProxyAsync(String name, String namespace);

    /**
     * connect DELETE requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectDeleteNamespacedPodProxyWithServiceResponseAsync(String name, String namespace);
    /**
     * connect DELETE requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectDeleteNamespacedPodProxy(String name, String namespace, String path);

    /**
     * connect DELETE requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectDeleteNamespacedPodProxyAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * connect DELETE requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectDeleteNamespacedPodProxyAsync(String name, String namespace, String path);

    /**
     * connect DELETE requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectDeleteNamespacedPodProxyWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * connect HEAD requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectHeadNamespacedPodProxy(String name, String namespace);

    /**
     * connect HEAD requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectHeadNamespacedPodProxyAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * connect HEAD requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectHeadNamespacedPodProxyAsync(String name, String namespace);

    /**
     * connect HEAD requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectHeadNamespacedPodProxyWithServiceResponseAsync(String name, String namespace);
    /**
     * connect HEAD requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectHeadNamespacedPodProxy(String name, String namespace, String path);

    /**
     * connect HEAD requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectHeadNamespacedPodProxyAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * connect HEAD requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectHeadNamespacedPodProxyAsync(String name, String namespace, String path);

    /**
     * connect HEAD requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectHeadNamespacedPodProxyWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * connect GET requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectGetNamespacedPodProxyWithPath(String name, String namespace, String path, String path1);

    /**
     * connect GET requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectGetNamespacedPodProxyWithPathAsync(String name, String namespace, String path, String path1, final ServiceCallback<String> serviceCallback);

    /**
     * connect GET requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectGetNamespacedPodProxyWithPathAsync(String name, String namespace, String path, String path1);

    /**
     * connect GET requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectGetNamespacedPodProxyWithPathWithServiceResponseAsync(String name, String namespace, String path, String path1);

    /**
     * connect PUT requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPutNamespacedPodProxyWithPath(String name, String namespace, String path, String path1);

    /**
     * connect PUT requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPutNamespacedPodProxyWithPathAsync(String name, String namespace, String path, String path1, final ServiceCallback<String> serviceCallback);

    /**
     * connect PUT requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPutNamespacedPodProxyWithPathAsync(String name, String namespace, String path, String path1);

    /**
     * connect PUT requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPutNamespacedPodProxyWithPathWithServiceResponseAsync(String name, String namespace, String path, String path1);

    /**
     * connect POST requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPostNamespacedPodProxyWithPath(String name, String namespace, String path, String path1);

    /**
     * connect POST requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPostNamespacedPodProxyWithPathAsync(String name, String namespace, String path, String path1, final ServiceCallback<String> serviceCallback);

    /**
     * connect POST requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPostNamespacedPodProxyWithPathAsync(String name, String namespace, String path, String path1);

    /**
     * connect POST requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPostNamespacedPodProxyWithPathWithServiceResponseAsync(String name, String namespace, String path, String path1);

    /**
     * connect DELETE requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectDeleteNamespacedPodProxyWithPath(String name, String namespace, String path, String path1);

    /**
     * connect DELETE requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectDeleteNamespacedPodProxyWithPathAsync(String name, String namespace, String path, String path1, final ServiceCallback<String> serviceCallback);

    /**
     * connect DELETE requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectDeleteNamespacedPodProxyWithPathAsync(String name, String namespace, String path, String path1);

    /**
     * connect DELETE requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectDeleteNamespacedPodProxyWithPathWithServiceResponseAsync(String name, String namespace, String path, String path1);

    /**
     * connect HEAD requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectHeadNamespacedPodProxyWithPath(String name, String namespace, String path, String path1);

    /**
     * connect HEAD requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectHeadNamespacedPodProxyWithPathAsync(String name, String namespace, String path, String path1, final ServiceCallback<String> serviceCallback);

    /**
     * connect HEAD requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectHeadNamespacedPodProxyWithPathAsync(String name, String namespace, String path, String path1);

    /**
     * connect HEAD requests to proxy of Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to pod.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectHeadNamespacedPodProxyWithPathWithServiceResponseAsync(String name, String namespace, String path, String path1);

    /**
     * read status of the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Pod object if successful.
     */
    V1Pod readNamespacedPodStatus(String name, String namespace);

    /**
     * read status of the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Pod> readNamespacedPodStatusAsync(String name, String namespace, final ServiceCallback<V1Pod> serviceCallback);

    /**
     * read status of the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<V1Pod> readNamespacedPodStatusAsync(String name, String namespace);

    /**
     * read status of the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<ServiceResponse<V1Pod>> readNamespacedPodStatusWithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Pod object if successful.
     */
    V1Pod readNamespacedPodStatus(String name, String namespace, String pretty);

    /**
     * read status of the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Pod> readNamespacedPodStatusAsync(String name, String namespace, String pretty, final ServiceCallback<V1Pod> serviceCallback);

    /**
     * read status of the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<V1Pod> readNamespacedPodStatusAsync(String name, String namespace, String pretty);

    /**
     * read status of the specified Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<ServiceResponse<V1Pod>> readNamespacedPodStatusWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified Pod.
     *
     * @param body the V1Pod value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Pod object if successful.
     */
    V1Pod replaceNamespacedPodStatus(V1Pod body, String name, String namespace);

    /**
     * replace status of the specified Pod.
     *
     * @param body the V1Pod value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Pod> replaceNamespacedPodStatusAsync(V1Pod body, String name, String namespace, final ServiceCallback<V1Pod> serviceCallback);

    /**
     * replace status of the specified Pod.
     *
     * @param body the V1Pod value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<V1Pod> replaceNamespacedPodStatusAsync(V1Pod body, String name, String namespace);

    /**
     * replace status of the specified Pod.
     *
     * @param body the V1Pod value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<ServiceResponse<V1Pod>> replaceNamespacedPodStatusWithServiceResponseAsync(V1Pod body, String name, String namespace);
    /**
     * replace status of the specified Pod.
     *
     * @param body the V1Pod value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Pod object if successful.
     */
    V1Pod replaceNamespacedPodStatus(V1Pod body, String name, String namespace, String pretty);

    /**
     * replace status of the specified Pod.
     *
     * @param body the V1Pod value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Pod> replaceNamespacedPodStatusAsync(V1Pod body, String name, String namespace, String pretty, final ServiceCallback<V1Pod> serviceCallback);

    /**
     * replace status of the specified Pod.
     *
     * @param body the V1Pod value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<V1Pod> replaceNamespacedPodStatusAsync(V1Pod body, String name, String namespace, String pretty);

    /**
     * replace status of the specified Pod.
     *
     * @param body the V1Pod value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<ServiceResponse<V1Pod>> replaceNamespacedPodStatusWithServiceResponseAsync(V1Pod body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Pod.
     *
     * @param body the Object value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Pod object if successful.
     */
    V1Pod patchNamespacedPodStatus(Object body, String name, String namespace);

    /**
     * partially update status of the specified Pod.
     *
     * @param body the Object value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Pod> patchNamespacedPodStatusAsync(Object body, String name, String namespace, final ServiceCallback<V1Pod> serviceCallback);

    /**
     * partially update status of the specified Pod.
     *
     * @param body the Object value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<V1Pod> patchNamespacedPodStatusAsync(Object body, String name, String namespace);

    /**
     * partially update status of the specified Pod.
     *
     * @param body the Object value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<ServiceResponse<V1Pod>> patchNamespacedPodStatusWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified Pod.
     *
     * @param body the Object value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Pod object if successful.
     */
    V1Pod patchNamespacedPodStatus(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Pod.
     *
     * @param body the Object value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Pod> patchNamespacedPodStatusAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1Pod> serviceCallback);

    /**
     * partially update status of the specified Pod.
     *
     * @param body the Object value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<V1Pod> patchNamespacedPodStatusAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Pod.
     *
     * @param body the Object value
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Pod object
     */
    Observable<ServiceResponse<V1Pod>> patchNamespacedPodStatusWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind PodTemplate.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PodTemplateList object if successful.
     */
    V1PodTemplateList listNamespacedPodTemplate(String namespace);

    /**
     * list or watch objects of kind PodTemplate.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PodTemplateList> listNamespacedPodTemplateAsync(String namespace, final ServiceCallback<V1PodTemplateList> serviceCallback);

    /**
     * list or watch objects of kind PodTemplate.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplateList object
     */
    Observable<V1PodTemplateList> listNamespacedPodTemplateAsync(String namespace);

    /**
     * list or watch objects of kind PodTemplate.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplateList object
     */
    Observable<ServiceResponse<V1PodTemplateList>> listNamespacedPodTemplateWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind PodTemplate.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PodTemplateList object if successful.
     */
    V1PodTemplateList listNamespacedPodTemplate(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind PodTemplate.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PodTemplateList> listNamespacedPodTemplateAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1PodTemplateList> serviceCallback);

    /**
     * list or watch objects of kind PodTemplate.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplateList object
     */
    Observable<V1PodTemplateList> listNamespacedPodTemplateAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind PodTemplate.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplateList object
     */
    Observable<ServiceResponse<V1PodTemplateList>> listNamespacedPodTemplateWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a PodTemplate.
     *
     * @param body the V1PodTemplate value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PodTemplate object if successful.
     */
    V1PodTemplate createNamespacedPodTemplate(V1PodTemplate body, String namespace);

    /**
     * create a PodTemplate.
     *
     * @param body the V1PodTemplate value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PodTemplate> createNamespacedPodTemplateAsync(V1PodTemplate body, String namespace, final ServiceCallback<V1PodTemplate> serviceCallback);

    /**
     * create a PodTemplate.
     *
     * @param body the V1PodTemplate value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplate object
     */
    Observable<V1PodTemplate> createNamespacedPodTemplateAsync(V1PodTemplate body, String namespace);

    /**
     * create a PodTemplate.
     *
     * @param body the V1PodTemplate value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplate object
     */
    Observable<ServiceResponse<V1PodTemplate>> createNamespacedPodTemplateWithServiceResponseAsync(V1PodTemplate body, String namespace);
    /**
     * create a PodTemplate.
     *
     * @param body the V1PodTemplate value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PodTemplate object if successful.
     */
    V1PodTemplate createNamespacedPodTemplate(V1PodTemplate body, String namespace, String pretty);

    /**
     * create a PodTemplate.
     *
     * @param body the V1PodTemplate value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PodTemplate> createNamespacedPodTemplateAsync(V1PodTemplate body, String namespace, String pretty, final ServiceCallback<V1PodTemplate> serviceCallback);

    /**
     * create a PodTemplate.
     *
     * @param body the V1PodTemplate value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplate object
     */
    Observable<V1PodTemplate> createNamespacedPodTemplateAsync(V1PodTemplate body, String namespace, String pretty);

    /**
     * create a PodTemplate.
     *
     * @param body the V1PodTemplate value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplate object
     */
    Observable<ServiceResponse<V1PodTemplate>> createNamespacedPodTemplateWithServiceResponseAsync(V1PodTemplate body, String namespace, String pretty);

    /**
     * delete collection of PodTemplate.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedPodTemplate(String namespace);

    /**
     * delete collection of PodTemplate.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedPodTemplateAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of PodTemplate.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedPodTemplateAsync(String namespace);

    /**
     * delete collection of PodTemplate.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedPodTemplateWithServiceResponseAsync(String namespace);
    /**
     * delete collection of PodTemplate.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedPodTemplate(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of PodTemplate.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedPodTemplateAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of PodTemplate.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedPodTemplateAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of PodTemplate.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedPodTemplateWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified PodTemplate.
     *
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PodTemplate object if successful.
     */
    V1PodTemplate readNamespacedPodTemplate(String name, String namespace);

    /**
     * read the specified PodTemplate.
     *
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PodTemplate> readNamespacedPodTemplateAsync(String name, String namespace, final ServiceCallback<V1PodTemplate> serviceCallback);

    /**
     * read the specified PodTemplate.
     *
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplate object
     */
    Observable<V1PodTemplate> readNamespacedPodTemplateAsync(String name, String namespace);

    /**
     * read the specified PodTemplate.
     *
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplate object
     */
    Observable<ServiceResponse<V1PodTemplate>> readNamespacedPodTemplateWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified PodTemplate.
     *
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PodTemplate object if successful.
     */
    V1PodTemplate readNamespacedPodTemplate(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified PodTemplate.
     *
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PodTemplate> readNamespacedPodTemplateAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1PodTemplate> serviceCallback);

    /**
     * read the specified PodTemplate.
     *
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplate object
     */
    Observable<V1PodTemplate> readNamespacedPodTemplateAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified PodTemplate.
     *
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplate object
     */
    Observable<ServiceResponse<V1PodTemplate>> readNamespacedPodTemplateWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified PodTemplate.
     *
     * @param body the V1PodTemplate value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PodTemplate object if successful.
     */
    V1PodTemplate replaceNamespacedPodTemplate(V1PodTemplate body, String name, String namespace);

    /**
     * replace the specified PodTemplate.
     *
     * @param body the V1PodTemplate value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PodTemplate> replaceNamespacedPodTemplateAsync(V1PodTemplate body, String name, String namespace, final ServiceCallback<V1PodTemplate> serviceCallback);

    /**
     * replace the specified PodTemplate.
     *
     * @param body the V1PodTemplate value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplate object
     */
    Observable<V1PodTemplate> replaceNamespacedPodTemplateAsync(V1PodTemplate body, String name, String namespace);

    /**
     * replace the specified PodTemplate.
     *
     * @param body the V1PodTemplate value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplate object
     */
    Observable<ServiceResponse<V1PodTemplate>> replaceNamespacedPodTemplateWithServiceResponseAsync(V1PodTemplate body, String name, String namespace);
    /**
     * replace the specified PodTemplate.
     *
     * @param body the V1PodTemplate value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PodTemplate object if successful.
     */
    V1PodTemplate replaceNamespacedPodTemplate(V1PodTemplate body, String name, String namespace, String pretty);

    /**
     * replace the specified PodTemplate.
     *
     * @param body the V1PodTemplate value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PodTemplate> replaceNamespacedPodTemplateAsync(V1PodTemplate body, String name, String namespace, String pretty, final ServiceCallback<V1PodTemplate> serviceCallback);

    /**
     * replace the specified PodTemplate.
     *
     * @param body the V1PodTemplate value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplate object
     */
    Observable<V1PodTemplate> replaceNamespacedPodTemplateAsync(V1PodTemplate body, String name, String namespace, String pretty);

    /**
     * replace the specified PodTemplate.
     *
     * @param body the V1PodTemplate value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplate object
     */
    Observable<ServiceResponse<V1PodTemplate>> replaceNamespacedPodTemplateWithServiceResponseAsync(V1PodTemplate body, String name, String namespace, String pretty);

    /**
     * delete a PodTemplate.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedPodTemplate(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a PodTemplate.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedPodTemplateAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a PodTemplate.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedPodTemplateAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a PodTemplate.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedPodTemplateWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a PodTemplate.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedPodTemplate(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a PodTemplate.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedPodTemplateAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a PodTemplate.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedPodTemplateAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a PodTemplate.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedPodTemplateWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified PodTemplate.
     *
     * @param body the Object value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PodTemplate object if successful.
     */
    V1PodTemplate patchNamespacedPodTemplate(Object body, String name, String namespace);

    /**
     * partially update the specified PodTemplate.
     *
     * @param body the Object value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PodTemplate> patchNamespacedPodTemplateAsync(Object body, String name, String namespace, final ServiceCallback<V1PodTemplate> serviceCallback);

    /**
     * partially update the specified PodTemplate.
     *
     * @param body the Object value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplate object
     */
    Observable<V1PodTemplate> patchNamespacedPodTemplateAsync(Object body, String name, String namespace);

    /**
     * partially update the specified PodTemplate.
     *
     * @param body the Object value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplate object
     */
    Observable<ServiceResponse<V1PodTemplate>> patchNamespacedPodTemplateWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified PodTemplate.
     *
     * @param body the Object value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PodTemplate object if successful.
     */
    V1PodTemplate patchNamespacedPodTemplate(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified PodTemplate.
     *
     * @param body the Object value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PodTemplate> patchNamespacedPodTemplateAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1PodTemplate> serviceCallback);

    /**
     * partially update the specified PodTemplate.
     *
     * @param body the Object value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplate object
     */
    Observable<V1PodTemplate> patchNamespacedPodTemplateAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified PodTemplate.
     *
     * @param body the Object value
     * @param name name of the PodTemplate
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplate object
     */
    Observable<ServiceResponse<V1PodTemplate>> patchNamespacedPodTemplateWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind ReplicationController.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationControllerList object if successful.
     */
    V1ReplicationControllerList listNamespacedReplicationController(String namespace);

    /**
     * list or watch objects of kind ReplicationController.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationControllerList> listNamespacedReplicationControllerAsync(String namespace, final ServiceCallback<V1ReplicationControllerList> serviceCallback);

    /**
     * list or watch objects of kind ReplicationController.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationControllerList object
     */
    Observable<V1ReplicationControllerList> listNamespacedReplicationControllerAsync(String namespace);

    /**
     * list or watch objects of kind ReplicationController.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationControllerList object
     */
    Observable<ServiceResponse<V1ReplicationControllerList>> listNamespacedReplicationControllerWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind ReplicationController.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationControllerList object if successful.
     */
    V1ReplicationControllerList listNamespacedReplicationController(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ReplicationController.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationControllerList> listNamespacedReplicationControllerAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1ReplicationControllerList> serviceCallback);

    /**
     * list or watch objects of kind ReplicationController.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationControllerList object
     */
    Observable<V1ReplicationControllerList> listNamespacedReplicationControllerAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ReplicationController.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationControllerList object
     */
    Observable<ServiceResponse<V1ReplicationControllerList>> listNamespacedReplicationControllerWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationController object if successful.
     */
    V1ReplicationController createNamespacedReplicationController(V1ReplicationController body, String namespace);

    /**
     * create a ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationController> createNamespacedReplicationControllerAsync(V1ReplicationController body, String namespace, final ServiceCallback<V1ReplicationController> serviceCallback);

    /**
     * create a ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<V1ReplicationController> createNamespacedReplicationControllerAsync(V1ReplicationController body, String namespace);

    /**
     * create a ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<ServiceResponse<V1ReplicationController>> createNamespacedReplicationControllerWithServiceResponseAsync(V1ReplicationController body, String namespace);
    /**
     * create a ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationController object if successful.
     */
    V1ReplicationController createNamespacedReplicationController(V1ReplicationController body, String namespace, String pretty);

    /**
     * create a ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationController> createNamespacedReplicationControllerAsync(V1ReplicationController body, String namespace, String pretty, final ServiceCallback<V1ReplicationController> serviceCallback);

    /**
     * create a ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<V1ReplicationController> createNamespacedReplicationControllerAsync(V1ReplicationController body, String namespace, String pretty);

    /**
     * create a ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<ServiceResponse<V1ReplicationController>> createNamespacedReplicationControllerWithServiceResponseAsync(V1ReplicationController body, String namespace, String pretty);

    /**
     * delete collection of ReplicationController.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedReplicationController(String namespace);

    /**
     * delete collection of ReplicationController.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedReplicationControllerAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ReplicationController.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedReplicationControllerAsync(String namespace);

    /**
     * delete collection of ReplicationController.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedReplicationControllerWithServiceResponseAsync(String namespace);
    /**
     * delete collection of ReplicationController.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedReplicationController(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ReplicationController.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedReplicationControllerAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ReplicationController.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedReplicationControllerAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ReplicationController.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedReplicationControllerWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified ReplicationController.
     *
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationController object if successful.
     */
    V1ReplicationController readNamespacedReplicationController(String name, String namespace);

    /**
     * read the specified ReplicationController.
     *
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationController> readNamespacedReplicationControllerAsync(String name, String namespace, final ServiceCallback<V1ReplicationController> serviceCallback);

    /**
     * read the specified ReplicationController.
     *
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<V1ReplicationController> readNamespacedReplicationControllerAsync(String name, String namespace);

    /**
     * read the specified ReplicationController.
     *
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<ServiceResponse<V1ReplicationController>> readNamespacedReplicationControllerWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified ReplicationController.
     *
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationController object if successful.
     */
    V1ReplicationController readNamespacedReplicationController(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified ReplicationController.
     *
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationController> readNamespacedReplicationControllerAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1ReplicationController> serviceCallback);

    /**
     * read the specified ReplicationController.
     *
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<V1ReplicationController> readNamespacedReplicationControllerAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified ReplicationController.
     *
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<ServiceResponse<V1ReplicationController>> readNamespacedReplicationControllerWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationController object if successful.
     */
    V1ReplicationController replaceNamespacedReplicationController(V1ReplicationController body, String name, String namespace);

    /**
     * replace the specified ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationController> replaceNamespacedReplicationControllerAsync(V1ReplicationController body, String name, String namespace, final ServiceCallback<V1ReplicationController> serviceCallback);

    /**
     * replace the specified ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<V1ReplicationController> replaceNamespacedReplicationControllerAsync(V1ReplicationController body, String name, String namespace);

    /**
     * replace the specified ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<ServiceResponse<V1ReplicationController>> replaceNamespacedReplicationControllerWithServiceResponseAsync(V1ReplicationController body, String name, String namespace);
    /**
     * replace the specified ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationController object if successful.
     */
    V1ReplicationController replaceNamespacedReplicationController(V1ReplicationController body, String name, String namespace, String pretty);

    /**
     * replace the specified ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationController> replaceNamespacedReplicationControllerAsync(V1ReplicationController body, String name, String namespace, String pretty, final ServiceCallback<V1ReplicationController> serviceCallback);

    /**
     * replace the specified ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<V1ReplicationController> replaceNamespacedReplicationControllerAsync(V1ReplicationController body, String name, String namespace, String pretty);

    /**
     * replace the specified ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<ServiceResponse<V1ReplicationController>> replaceNamespacedReplicationControllerWithServiceResponseAsync(V1ReplicationController body, String name, String namespace, String pretty);

    /**
     * delete a ReplicationController.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedReplicationController(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a ReplicationController.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedReplicationControllerAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ReplicationController.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedReplicationControllerAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a ReplicationController.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedReplicationControllerWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a ReplicationController.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedReplicationController(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ReplicationController.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedReplicationControllerAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ReplicationController.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedReplicationControllerAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ReplicationController.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedReplicationControllerWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified ReplicationController.
     *
     * @param body the Object value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationController object if successful.
     */
    V1ReplicationController patchNamespacedReplicationController(Object body, String name, String namespace);

    /**
     * partially update the specified ReplicationController.
     *
     * @param body the Object value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationController> patchNamespacedReplicationControllerAsync(Object body, String name, String namespace, final ServiceCallback<V1ReplicationController> serviceCallback);

    /**
     * partially update the specified ReplicationController.
     *
     * @param body the Object value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<V1ReplicationController> patchNamespacedReplicationControllerAsync(Object body, String name, String namespace);

    /**
     * partially update the specified ReplicationController.
     *
     * @param body the Object value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<ServiceResponse<V1ReplicationController>> patchNamespacedReplicationControllerWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified ReplicationController.
     *
     * @param body the Object value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationController object if successful.
     */
    V1ReplicationController patchNamespacedReplicationController(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified ReplicationController.
     *
     * @param body the Object value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationController> patchNamespacedReplicationControllerAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1ReplicationController> serviceCallback);

    /**
     * partially update the specified ReplicationController.
     *
     * @param body the Object value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<V1ReplicationController> patchNamespacedReplicationControllerAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified ReplicationController.
     *
     * @param body the Object value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<ServiceResponse<V1ReplicationController>> patchNamespacedReplicationControllerWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Scale object if successful.
     */
    V1Scale readNamespacedScaleScale(String name, String namespace);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Scale> readNamespacedScaleScaleAsync(String name, String namespace, final ServiceCallback<V1Scale> serviceCallback);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Scale object
     */
    Observable<V1Scale> readNamespacedScaleScaleAsync(String name, String namespace);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Scale object
     */
    Observable<ServiceResponse<V1Scale>> readNamespacedScaleScaleWithServiceResponseAsync(String name, String namespace);
    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Scale object if successful.
     */
    V1Scale readNamespacedScaleScale(String name, String namespace, String pretty);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Scale> readNamespacedScaleScaleAsync(String name, String namespace, String pretty, final ServiceCallback<V1Scale> serviceCallback);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Scale object
     */
    Observable<V1Scale> readNamespacedScaleScaleAsync(String name, String namespace, String pretty);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Scale object
     */
    Observable<ServiceResponse<V1Scale>> readNamespacedScaleScaleWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the V1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Scale object if successful.
     */
    V1Scale replaceNamespacedScaleScale(V1Scale body, String name, String namespace);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the V1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Scale> replaceNamespacedScaleScaleAsync(V1Scale body, String name, String namespace, final ServiceCallback<V1Scale> serviceCallback);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the V1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Scale object
     */
    Observable<V1Scale> replaceNamespacedScaleScaleAsync(V1Scale body, String name, String namespace);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the V1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Scale object
     */
    Observable<ServiceResponse<V1Scale>> replaceNamespacedScaleScaleWithServiceResponseAsync(V1Scale body, String name, String namespace);
    /**
     * replace scale of the specified Scale.
     *
     * @param body the V1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Scale object if successful.
     */
    V1Scale replaceNamespacedScaleScale(V1Scale body, String name, String namespace, String pretty);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the V1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Scale> replaceNamespacedScaleScaleAsync(V1Scale body, String name, String namespace, String pretty, final ServiceCallback<V1Scale> serviceCallback);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the V1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Scale object
     */
    Observable<V1Scale> replaceNamespacedScaleScaleAsync(V1Scale body, String name, String namespace, String pretty);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the V1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Scale object
     */
    Observable<ServiceResponse<V1Scale>> replaceNamespacedScaleScaleWithServiceResponseAsync(V1Scale body, String name, String namespace, String pretty);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Scale object if successful.
     */
    V1Scale patchNamespacedScaleScale(Object body, String name, String namespace);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Scale> patchNamespacedScaleScaleAsync(Object body, String name, String namespace, final ServiceCallback<V1Scale> serviceCallback);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Scale object
     */
    Observable<V1Scale> patchNamespacedScaleScaleAsync(Object body, String name, String namespace);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Scale object
     */
    Observable<ServiceResponse<V1Scale>> patchNamespacedScaleScaleWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Scale object if successful.
     */
    V1Scale patchNamespacedScaleScale(Object body, String name, String namespace, String pretty);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Scale> patchNamespacedScaleScaleAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1Scale> serviceCallback);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Scale object
     */
    Observable<V1Scale> patchNamespacedScaleScaleAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Scale object
     */
    Observable<ServiceResponse<V1Scale>> patchNamespacedScaleScaleWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read status of the specified ReplicationController.
     *
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationController object if successful.
     */
    V1ReplicationController readNamespacedReplicationControllerStatus(String name, String namespace);

    /**
     * read status of the specified ReplicationController.
     *
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationController> readNamespacedReplicationControllerStatusAsync(String name, String namespace, final ServiceCallback<V1ReplicationController> serviceCallback);

    /**
     * read status of the specified ReplicationController.
     *
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<V1ReplicationController> readNamespacedReplicationControllerStatusAsync(String name, String namespace);

    /**
     * read status of the specified ReplicationController.
     *
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<ServiceResponse<V1ReplicationController>> readNamespacedReplicationControllerStatusWithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified ReplicationController.
     *
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationController object if successful.
     */
    V1ReplicationController readNamespacedReplicationControllerStatus(String name, String namespace, String pretty);

    /**
     * read status of the specified ReplicationController.
     *
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationController> readNamespacedReplicationControllerStatusAsync(String name, String namespace, String pretty, final ServiceCallback<V1ReplicationController> serviceCallback);

    /**
     * read status of the specified ReplicationController.
     *
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<V1ReplicationController> readNamespacedReplicationControllerStatusAsync(String name, String namespace, String pretty);

    /**
     * read status of the specified ReplicationController.
     *
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<ServiceResponse<V1ReplicationController>> readNamespacedReplicationControllerStatusWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationController object if successful.
     */
    V1ReplicationController replaceNamespacedReplicationControllerStatus(V1ReplicationController body, String name, String namespace);

    /**
     * replace status of the specified ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationController> replaceNamespacedReplicationControllerStatusAsync(V1ReplicationController body, String name, String namespace, final ServiceCallback<V1ReplicationController> serviceCallback);

    /**
     * replace status of the specified ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<V1ReplicationController> replaceNamespacedReplicationControllerStatusAsync(V1ReplicationController body, String name, String namespace);

    /**
     * replace status of the specified ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<ServiceResponse<V1ReplicationController>> replaceNamespacedReplicationControllerStatusWithServiceResponseAsync(V1ReplicationController body, String name, String namespace);
    /**
     * replace status of the specified ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationController object if successful.
     */
    V1ReplicationController replaceNamespacedReplicationControllerStatus(V1ReplicationController body, String name, String namespace, String pretty);

    /**
     * replace status of the specified ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationController> replaceNamespacedReplicationControllerStatusAsync(V1ReplicationController body, String name, String namespace, String pretty, final ServiceCallback<V1ReplicationController> serviceCallback);

    /**
     * replace status of the specified ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<V1ReplicationController> replaceNamespacedReplicationControllerStatusAsync(V1ReplicationController body, String name, String namespace, String pretty);

    /**
     * replace status of the specified ReplicationController.
     *
     * @param body the V1ReplicationController value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<ServiceResponse<V1ReplicationController>> replaceNamespacedReplicationControllerStatusWithServiceResponseAsync(V1ReplicationController body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified ReplicationController.
     *
     * @param body the Object value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationController object if successful.
     */
    V1ReplicationController patchNamespacedReplicationControllerStatus(Object body, String name, String namespace);

    /**
     * partially update status of the specified ReplicationController.
     *
     * @param body the Object value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationController> patchNamespacedReplicationControllerStatusAsync(Object body, String name, String namespace, final ServiceCallback<V1ReplicationController> serviceCallback);

    /**
     * partially update status of the specified ReplicationController.
     *
     * @param body the Object value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<V1ReplicationController> patchNamespacedReplicationControllerStatusAsync(Object body, String name, String namespace);

    /**
     * partially update status of the specified ReplicationController.
     *
     * @param body the Object value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<ServiceResponse<V1ReplicationController>> patchNamespacedReplicationControllerStatusWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified ReplicationController.
     *
     * @param body the Object value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationController object if successful.
     */
    V1ReplicationController patchNamespacedReplicationControllerStatus(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified ReplicationController.
     *
     * @param body the Object value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationController> patchNamespacedReplicationControllerStatusAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1ReplicationController> serviceCallback);

    /**
     * partially update status of the specified ReplicationController.
     *
     * @param body the Object value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<V1ReplicationController> patchNamespacedReplicationControllerStatusAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified ReplicationController.
     *
     * @param body the Object value
     * @param name name of the ReplicationController
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationController object
     */
    Observable<ServiceResponse<V1ReplicationController>> patchNamespacedReplicationControllerStatusWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind ResourceQuota.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuotaList object if successful.
     */
    V1ResourceQuotaList listNamespacedResourceQuota(String namespace);

    /**
     * list or watch objects of kind ResourceQuota.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuotaList> listNamespacedResourceQuotaAsync(String namespace, final ServiceCallback<V1ResourceQuotaList> serviceCallback);

    /**
     * list or watch objects of kind ResourceQuota.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuotaList object
     */
    Observable<V1ResourceQuotaList> listNamespacedResourceQuotaAsync(String namespace);

    /**
     * list or watch objects of kind ResourceQuota.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuotaList object
     */
    Observable<ServiceResponse<V1ResourceQuotaList>> listNamespacedResourceQuotaWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind ResourceQuota.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuotaList object if successful.
     */
    V1ResourceQuotaList listNamespacedResourceQuota(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ResourceQuota.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuotaList> listNamespacedResourceQuotaAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1ResourceQuotaList> serviceCallback);

    /**
     * list or watch objects of kind ResourceQuota.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuotaList object
     */
    Observable<V1ResourceQuotaList> listNamespacedResourceQuotaAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ResourceQuota.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuotaList object
     */
    Observable<ServiceResponse<V1ResourceQuotaList>> listNamespacedResourceQuotaWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuota object if successful.
     */
    V1ResourceQuota createNamespacedResourceQuota(V1ResourceQuota body, String namespace);

    /**
     * create a ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuota> createNamespacedResourceQuotaAsync(V1ResourceQuota body, String namespace, final ServiceCallback<V1ResourceQuota> serviceCallback);

    /**
     * create a ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<V1ResourceQuota> createNamespacedResourceQuotaAsync(V1ResourceQuota body, String namespace);

    /**
     * create a ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<ServiceResponse<V1ResourceQuota>> createNamespacedResourceQuotaWithServiceResponseAsync(V1ResourceQuota body, String namespace);
    /**
     * create a ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuota object if successful.
     */
    V1ResourceQuota createNamespacedResourceQuota(V1ResourceQuota body, String namespace, String pretty);

    /**
     * create a ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuota> createNamespacedResourceQuotaAsync(V1ResourceQuota body, String namespace, String pretty, final ServiceCallback<V1ResourceQuota> serviceCallback);

    /**
     * create a ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<V1ResourceQuota> createNamespacedResourceQuotaAsync(V1ResourceQuota body, String namespace, String pretty);

    /**
     * create a ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<ServiceResponse<V1ResourceQuota>> createNamespacedResourceQuotaWithServiceResponseAsync(V1ResourceQuota body, String namespace, String pretty);

    /**
     * delete collection of ResourceQuota.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedResourceQuota(String namespace);

    /**
     * delete collection of ResourceQuota.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedResourceQuotaAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ResourceQuota.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedResourceQuotaAsync(String namespace);

    /**
     * delete collection of ResourceQuota.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedResourceQuotaWithServiceResponseAsync(String namespace);
    /**
     * delete collection of ResourceQuota.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedResourceQuota(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ResourceQuota.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedResourceQuotaAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ResourceQuota.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedResourceQuotaAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ResourceQuota.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedResourceQuotaWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified ResourceQuota.
     *
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuota object if successful.
     */
    V1ResourceQuota readNamespacedResourceQuota(String name, String namespace);

    /**
     * read the specified ResourceQuota.
     *
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuota> readNamespacedResourceQuotaAsync(String name, String namespace, final ServiceCallback<V1ResourceQuota> serviceCallback);

    /**
     * read the specified ResourceQuota.
     *
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<V1ResourceQuota> readNamespacedResourceQuotaAsync(String name, String namespace);

    /**
     * read the specified ResourceQuota.
     *
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<ServiceResponse<V1ResourceQuota>> readNamespacedResourceQuotaWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified ResourceQuota.
     *
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuota object if successful.
     */
    V1ResourceQuota readNamespacedResourceQuota(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified ResourceQuota.
     *
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuota> readNamespacedResourceQuotaAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1ResourceQuota> serviceCallback);

    /**
     * read the specified ResourceQuota.
     *
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<V1ResourceQuota> readNamespacedResourceQuotaAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified ResourceQuota.
     *
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<ServiceResponse<V1ResourceQuota>> readNamespacedResourceQuotaWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuota object if successful.
     */
    V1ResourceQuota replaceNamespacedResourceQuota(V1ResourceQuota body, String name, String namespace);

    /**
     * replace the specified ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuota> replaceNamespacedResourceQuotaAsync(V1ResourceQuota body, String name, String namespace, final ServiceCallback<V1ResourceQuota> serviceCallback);

    /**
     * replace the specified ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<V1ResourceQuota> replaceNamespacedResourceQuotaAsync(V1ResourceQuota body, String name, String namespace);

    /**
     * replace the specified ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<ServiceResponse<V1ResourceQuota>> replaceNamespacedResourceQuotaWithServiceResponseAsync(V1ResourceQuota body, String name, String namespace);
    /**
     * replace the specified ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuota object if successful.
     */
    V1ResourceQuota replaceNamespacedResourceQuota(V1ResourceQuota body, String name, String namespace, String pretty);

    /**
     * replace the specified ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuota> replaceNamespacedResourceQuotaAsync(V1ResourceQuota body, String name, String namespace, String pretty, final ServiceCallback<V1ResourceQuota> serviceCallback);

    /**
     * replace the specified ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<V1ResourceQuota> replaceNamespacedResourceQuotaAsync(V1ResourceQuota body, String name, String namespace, String pretty);

    /**
     * replace the specified ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<ServiceResponse<V1ResourceQuota>> replaceNamespacedResourceQuotaWithServiceResponseAsync(V1ResourceQuota body, String name, String namespace, String pretty);

    /**
     * delete a ResourceQuota.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedResourceQuota(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a ResourceQuota.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedResourceQuotaAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ResourceQuota.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedResourceQuotaAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a ResourceQuota.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedResourceQuotaWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a ResourceQuota.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedResourceQuota(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ResourceQuota.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedResourceQuotaAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ResourceQuota.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedResourceQuotaAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ResourceQuota.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedResourceQuotaWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified ResourceQuota.
     *
     * @param body the Object value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuota object if successful.
     */
    V1ResourceQuota patchNamespacedResourceQuota(Object body, String name, String namespace);

    /**
     * partially update the specified ResourceQuota.
     *
     * @param body the Object value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuota> patchNamespacedResourceQuotaAsync(Object body, String name, String namespace, final ServiceCallback<V1ResourceQuota> serviceCallback);

    /**
     * partially update the specified ResourceQuota.
     *
     * @param body the Object value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<V1ResourceQuota> patchNamespacedResourceQuotaAsync(Object body, String name, String namespace);

    /**
     * partially update the specified ResourceQuota.
     *
     * @param body the Object value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<ServiceResponse<V1ResourceQuota>> patchNamespacedResourceQuotaWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified ResourceQuota.
     *
     * @param body the Object value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuota object if successful.
     */
    V1ResourceQuota patchNamespacedResourceQuota(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified ResourceQuota.
     *
     * @param body the Object value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuota> patchNamespacedResourceQuotaAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1ResourceQuota> serviceCallback);

    /**
     * partially update the specified ResourceQuota.
     *
     * @param body the Object value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<V1ResourceQuota> patchNamespacedResourceQuotaAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified ResourceQuota.
     *
     * @param body the Object value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<ServiceResponse<V1ResourceQuota>> patchNamespacedResourceQuotaWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read status of the specified ResourceQuota.
     *
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuota object if successful.
     */
    V1ResourceQuota readNamespacedResourceQuotaStatus(String name, String namespace);

    /**
     * read status of the specified ResourceQuota.
     *
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuota> readNamespacedResourceQuotaStatusAsync(String name, String namespace, final ServiceCallback<V1ResourceQuota> serviceCallback);

    /**
     * read status of the specified ResourceQuota.
     *
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<V1ResourceQuota> readNamespacedResourceQuotaStatusAsync(String name, String namespace);

    /**
     * read status of the specified ResourceQuota.
     *
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<ServiceResponse<V1ResourceQuota>> readNamespacedResourceQuotaStatusWithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified ResourceQuota.
     *
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuota object if successful.
     */
    V1ResourceQuota readNamespacedResourceQuotaStatus(String name, String namespace, String pretty);

    /**
     * read status of the specified ResourceQuota.
     *
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuota> readNamespacedResourceQuotaStatusAsync(String name, String namespace, String pretty, final ServiceCallback<V1ResourceQuota> serviceCallback);

    /**
     * read status of the specified ResourceQuota.
     *
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<V1ResourceQuota> readNamespacedResourceQuotaStatusAsync(String name, String namespace, String pretty);

    /**
     * read status of the specified ResourceQuota.
     *
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<ServiceResponse<V1ResourceQuota>> readNamespacedResourceQuotaStatusWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuota object if successful.
     */
    V1ResourceQuota replaceNamespacedResourceQuotaStatus(V1ResourceQuota body, String name, String namespace);

    /**
     * replace status of the specified ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuota> replaceNamespacedResourceQuotaStatusAsync(V1ResourceQuota body, String name, String namespace, final ServiceCallback<V1ResourceQuota> serviceCallback);

    /**
     * replace status of the specified ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<V1ResourceQuota> replaceNamespacedResourceQuotaStatusAsync(V1ResourceQuota body, String name, String namespace);

    /**
     * replace status of the specified ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<ServiceResponse<V1ResourceQuota>> replaceNamespacedResourceQuotaStatusWithServiceResponseAsync(V1ResourceQuota body, String name, String namespace);
    /**
     * replace status of the specified ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuota object if successful.
     */
    V1ResourceQuota replaceNamespacedResourceQuotaStatus(V1ResourceQuota body, String name, String namespace, String pretty);

    /**
     * replace status of the specified ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuota> replaceNamespacedResourceQuotaStatusAsync(V1ResourceQuota body, String name, String namespace, String pretty, final ServiceCallback<V1ResourceQuota> serviceCallback);

    /**
     * replace status of the specified ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<V1ResourceQuota> replaceNamespacedResourceQuotaStatusAsync(V1ResourceQuota body, String name, String namespace, String pretty);

    /**
     * replace status of the specified ResourceQuota.
     *
     * @param body the V1ResourceQuota value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<ServiceResponse<V1ResourceQuota>> replaceNamespacedResourceQuotaStatusWithServiceResponseAsync(V1ResourceQuota body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified ResourceQuota.
     *
     * @param body the Object value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuota object if successful.
     */
    V1ResourceQuota patchNamespacedResourceQuotaStatus(Object body, String name, String namespace);

    /**
     * partially update status of the specified ResourceQuota.
     *
     * @param body the Object value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuota> patchNamespacedResourceQuotaStatusAsync(Object body, String name, String namespace, final ServiceCallback<V1ResourceQuota> serviceCallback);

    /**
     * partially update status of the specified ResourceQuota.
     *
     * @param body the Object value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<V1ResourceQuota> patchNamespacedResourceQuotaStatusAsync(Object body, String name, String namespace);

    /**
     * partially update status of the specified ResourceQuota.
     *
     * @param body the Object value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<ServiceResponse<V1ResourceQuota>> patchNamespacedResourceQuotaStatusWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified ResourceQuota.
     *
     * @param body the Object value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuota object if successful.
     */
    V1ResourceQuota patchNamespacedResourceQuotaStatus(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified ResourceQuota.
     *
     * @param body the Object value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuota> patchNamespacedResourceQuotaStatusAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1ResourceQuota> serviceCallback);

    /**
     * partially update status of the specified ResourceQuota.
     *
     * @param body the Object value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<V1ResourceQuota> patchNamespacedResourceQuotaStatusAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified ResourceQuota.
     *
     * @param body the Object value
     * @param name name of the ResourceQuota
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuota object
     */
    Observable<ServiceResponse<V1ResourceQuota>> patchNamespacedResourceQuotaStatusWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind Secret.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1SecretList object if successful.
     */
    V1SecretList listNamespacedSecret(String namespace);

    /**
     * list or watch objects of kind Secret.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1SecretList> listNamespacedSecretAsync(String namespace, final ServiceCallback<V1SecretList> serviceCallback);

    /**
     * list or watch objects of kind Secret.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1SecretList object
     */
    Observable<V1SecretList> listNamespacedSecretAsync(String namespace);

    /**
     * list or watch objects of kind Secret.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1SecretList object
     */
    Observable<ServiceResponse<V1SecretList>> listNamespacedSecretWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind Secret.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1SecretList object if successful.
     */
    V1SecretList listNamespacedSecret(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Secret.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1SecretList> listNamespacedSecretAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1SecretList> serviceCallback);

    /**
     * list or watch objects of kind Secret.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1SecretList object
     */
    Observable<V1SecretList> listNamespacedSecretAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Secret.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1SecretList object
     */
    Observable<ServiceResponse<V1SecretList>> listNamespacedSecretWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a Secret.
     *
     * @param body the V1Secret value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Secret object if successful.
     */
    V1Secret createNamespacedSecret(V1Secret body, String namespace);

    /**
     * create a Secret.
     *
     * @param body the V1Secret value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Secret> createNamespacedSecretAsync(V1Secret body, String namespace, final ServiceCallback<V1Secret> serviceCallback);

    /**
     * create a Secret.
     *
     * @param body the V1Secret value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Secret object
     */
    Observable<V1Secret> createNamespacedSecretAsync(V1Secret body, String namespace);

    /**
     * create a Secret.
     *
     * @param body the V1Secret value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Secret object
     */
    Observable<ServiceResponse<V1Secret>> createNamespacedSecretWithServiceResponseAsync(V1Secret body, String namespace);
    /**
     * create a Secret.
     *
     * @param body the V1Secret value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Secret object if successful.
     */
    V1Secret createNamespacedSecret(V1Secret body, String namespace, String pretty);

    /**
     * create a Secret.
     *
     * @param body the V1Secret value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Secret> createNamespacedSecretAsync(V1Secret body, String namespace, String pretty, final ServiceCallback<V1Secret> serviceCallback);

    /**
     * create a Secret.
     *
     * @param body the V1Secret value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Secret object
     */
    Observable<V1Secret> createNamespacedSecretAsync(V1Secret body, String namespace, String pretty);

    /**
     * create a Secret.
     *
     * @param body the V1Secret value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Secret object
     */
    Observable<ServiceResponse<V1Secret>> createNamespacedSecretWithServiceResponseAsync(V1Secret body, String namespace, String pretty);

    /**
     * delete collection of Secret.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedSecret(String namespace);

    /**
     * delete collection of Secret.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedSecretAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Secret.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedSecretAsync(String namespace);

    /**
     * delete collection of Secret.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedSecretWithServiceResponseAsync(String namespace);
    /**
     * delete collection of Secret.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedSecret(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Secret.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedSecretAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Secret.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedSecretAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Secret.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedSecretWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified Secret.
     *
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Secret object if successful.
     */
    V1Secret readNamespacedSecret(String name, String namespace);

    /**
     * read the specified Secret.
     *
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Secret> readNamespacedSecretAsync(String name, String namespace, final ServiceCallback<V1Secret> serviceCallback);

    /**
     * read the specified Secret.
     *
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Secret object
     */
    Observable<V1Secret> readNamespacedSecretAsync(String name, String namespace);

    /**
     * read the specified Secret.
     *
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Secret object
     */
    Observable<ServiceResponse<V1Secret>> readNamespacedSecretWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified Secret.
     *
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Secret object if successful.
     */
    V1Secret readNamespacedSecret(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Secret.
     *
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Secret> readNamespacedSecretAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1Secret> serviceCallback);

    /**
     * read the specified Secret.
     *
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Secret object
     */
    Observable<V1Secret> readNamespacedSecretAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Secret.
     *
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Secret object
     */
    Observable<ServiceResponse<V1Secret>> readNamespacedSecretWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified Secret.
     *
     * @param body the V1Secret value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Secret object if successful.
     */
    V1Secret replaceNamespacedSecret(V1Secret body, String name, String namespace);

    /**
     * replace the specified Secret.
     *
     * @param body the V1Secret value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Secret> replaceNamespacedSecretAsync(V1Secret body, String name, String namespace, final ServiceCallback<V1Secret> serviceCallback);

    /**
     * replace the specified Secret.
     *
     * @param body the V1Secret value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Secret object
     */
    Observable<V1Secret> replaceNamespacedSecretAsync(V1Secret body, String name, String namespace);

    /**
     * replace the specified Secret.
     *
     * @param body the V1Secret value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Secret object
     */
    Observable<ServiceResponse<V1Secret>> replaceNamespacedSecretWithServiceResponseAsync(V1Secret body, String name, String namespace);
    /**
     * replace the specified Secret.
     *
     * @param body the V1Secret value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Secret object if successful.
     */
    V1Secret replaceNamespacedSecret(V1Secret body, String name, String namespace, String pretty);

    /**
     * replace the specified Secret.
     *
     * @param body the V1Secret value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Secret> replaceNamespacedSecretAsync(V1Secret body, String name, String namespace, String pretty, final ServiceCallback<V1Secret> serviceCallback);

    /**
     * replace the specified Secret.
     *
     * @param body the V1Secret value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Secret object
     */
    Observable<V1Secret> replaceNamespacedSecretAsync(V1Secret body, String name, String namespace, String pretty);

    /**
     * replace the specified Secret.
     *
     * @param body the V1Secret value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Secret object
     */
    Observable<ServiceResponse<V1Secret>> replaceNamespacedSecretWithServiceResponseAsync(V1Secret body, String name, String namespace, String pretty);

    /**
     * delete a Secret.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedSecret(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a Secret.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedSecretAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Secret.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedSecretAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a Secret.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedSecretWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a Secret.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedSecret(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Secret.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedSecretAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Secret.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedSecretAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Secret.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedSecretWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified Secret.
     *
     * @param body the Object value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Secret object if successful.
     */
    V1Secret patchNamespacedSecret(Object body, String name, String namespace);

    /**
     * partially update the specified Secret.
     *
     * @param body the Object value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Secret> patchNamespacedSecretAsync(Object body, String name, String namespace, final ServiceCallback<V1Secret> serviceCallback);

    /**
     * partially update the specified Secret.
     *
     * @param body the Object value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Secret object
     */
    Observable<V1Secret> patchNamespacedSecretAsync(Object body, String name, String namespace);

    /**
     * partially update the specified Secret.
     *
     * @param body the Object value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Secret object
     */
    Observable<ServiceResponse<V1Secret>> patchNamespacedSecretWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified Secret.
     *
     * @param body the Object value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Secret object if successful.
     */
    V1Secret patchNamespacedSecret(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Secret.
     *
     * @param body the Object value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Secret> patchNamespacedSecretAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1Secret> serviceCallback);

    /**
     * partially update the specified Secret.
     *
     * @param body the Object value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Secret object
     */
    Observable<V1Secret> patchNamespacedSecretAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Secret.
     *
     * @param body the Object value
     * @param name name of the Secret
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Secret object
     */
    Observable<ServiceResponse<V1Secret>> patchNamespacedSecretWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind ServiceAccount.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ServiceAccountList object if successful.
     */
    V1ServiceAccountList listNamespacedServiceAccount(String namespace);

    /**
     * list or watch objects of kind ServiceAccount.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ServiceAccountList> listNamespacedServiceAccountAsync(String namespace, final ServiceCallback<V1ServiceAccountList> serviceCallback);

    /**
     * list or watch objects of kind ServiceAccount.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccountList object
     */
    Observable<V1ServiceAccountList> listNamespacedServiceAccountAsync(String namespace);

    /**
     * list or watch objects of kind ServiceAccount.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccountList object
     */
    Observable<ServiceResponse<V1ServiceAccountList>> listNamespacedServiceAccountWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind ServiceAccount.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ServiceAccountList object if successful.
     */
    V1ServiceAccountList listNamespacedServiceAccount(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ServiceAccount.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ServiceAccountList> listNamespacedServiceAccountAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1ServiceAccountList> serviceCallback);

    /**
     * list or watch objects of kind ServiceAccount.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccountList object
     */
    Observable<V1ServiceAccountList> listNamespacedServiceAccountAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ServiceAccount.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccountList object
     */
    Observable<ServiceResponse<V1ServiceAccountList>> listNamespacedServiceAccountWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a ServiceAccount.
     *
     * @param body the V1ServiceAccount value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ServiceAccount object if successful.
     */
    V1ServiceAccount createNamespacedServiceAccount(V1ServiceAccount body, String namespace);

    /**
     * create a ServiceAccount.
     *
     * @param body the V1ServiceAccount value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ServiceAccount> createNamespacedServiceAccountAsync(V1ServiceAccount body, String namespace, final ServiceCallback<V1ServiceAccount> serviceCallback);

    /**
     * create a ServiceAccount.
     *
     * @param body the V1ServiceAccount value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccount object
     */
    Observable<V1ServiceAccount> createNamespacedServiceAccountAsync(V1ServiceAccount body, String namespace);

    /**
     * create a ServiceAccount.
     *
     * @param body the V1ServiceAccount value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccount object
     */
    Observable<ServiceResponse<V1ServiceAccount>> createNamespacedServiceAccountWithServiceResponseAsync(V1ServiceAccount body, String namespace);
    /**
     * create a ServiceAccount.
     *
     * @param body the V1ServiceAccount value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ServiceAccount object if successful.
     */
    V1ServiceAccount createNamespacedServiceAccount(V1ServiceAccount body, String namespace, String pretty);

    /**
     * create a ServiceAccount.
     *
     * @param body the V1ServiceAccount value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ServiceAccount> createNamespacedServiceAccountAsync(V1ServiceAccount body, String namespace, String pretty, final ServiceCallback<V1ServiceAccount> serviceCallback);

    /**
     * create a ServiceAccount.
     *
     * @param body the V1ServiceAccount value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccount object
     */
    Observable<V1ServiceAccount> createNamespacedServiceAccountAsync(V1ServiceAccount body, String namespace, String pretty);

    /**
     * create a ServiceAccount.
     *
     * @param body the V1ServiceAccount value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccount object
     */
    Observable<ServiceResponse<V1ServiceAccount>> createNamespacedServiceAccountWithServiceResponseAsync(V1ServiceAccount body, String namespace, String pretty);

    /**
     * delete collection of ServiceAccount.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedServiceAccount(String namespace);

    /**
     * delete collection of ServiceAccount.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedServiceAccountAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ServiceAccount.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedServiceAccountAsync(String namespace);

    /**
     * delete collection of ServiceAccount.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedServiceAccountWithServiceResponseAsync(String namespace);
    /**
     * delete collection of ServiceAccount.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedServiceAccount(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ServiceAccount.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedServiceAccountAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ServiceAccount.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedServiceAccountAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ServiceAccount.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedServiceAccountWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified ServiceAccount.
     *
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ServiceAccount object if successful.
     */
    V1ServiceAccount readNamespacedServiceAccount(String name, String namespace);

    /**
     * read the specified ServiceAccount.
     *
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ServiceAccount> readNamespacedServiceAccountAsync(String name, String namespace, final ServiceCallback<V1ServiceAccount> serviceCallback);

    /**
     * read the specified ServiceAccount.
     *
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccount object
     */
    Observable<V1ServiceAccount> readNamespacedServiceAccountAsync(String name, String namespace);

    /**
     * read the specified ServiceAccount.
     *
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccount object
     */
    Observable<ServiceResponse<V1ServiceAccount>> readNamespacedServiceAccountWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified ServiceAccount.
     *
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ServiceAccount object if successful.
     */
    V1ServiceAccount readNamespacedServiceAccount(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified ServiceAccount.
     *
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ServiceAccount> readNamespacedServiceAccountAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1ServiceAccount> serviceCallback);

    /**
     * read the specified ServiceAccount.
     *
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccount object
     */
    Observable<V1ServiceAccount> readNamespacedServiceAccountAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified ServiceAccount.
     *
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccount object
     */
    Observable<ServiceResponse<V1ServiceAccount>> readNamespacedServiceAccountWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified ServiceAccount.
     *
     * @param body the V1ServiceAccount value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ServiceAccount object if successful.
     */
    V1ServiceAccount replaceNamespacedServiceAccount(V1ServiceAccount body, String name, String namespace);

    /**
     * replace the specified ServiceAccount.
     *
     * @param body the V1ServiceAccount value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ServiceAccount> replaceNamespacedServiceAccountAsync(V1ServiceAccount body, String name, String namespace, final ServiceCallback<V1ServiceAccount> serviceCallback);

    /**
     * replace the specified ServiceAccount.
     *
     * @param body the V1ServiceAccount value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccount object
     */
    Observable<V1ServiceAccount> replaceNamespacedServiceAccountAsync(V1ServiceAccount body, String name, String namespace);

    /**
     * replace the specified ServiceAccount.
     *
     * @param body the V1ServiceAccount value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccount object
     */
    Observable<ServiceResponse<V1ServiceAccount>> replaceNamespacedServiceAccountWithServiceResponseAsync(V1ServiceAccount body, String name, String namespace);
    /**
     * replace the specified ServiceAccount.
     *
     * @param body the V1ServiceAccount value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ServiceAccount object if successful.
     */
    V1ServiceAccount replaceNamespacedServiceAccount(V1ServiceAccount body, String name, String namespace, String pretty);

    /**
     * replace the specified ServiceAccount.
     *
     * @param body the V1ServiceAccount value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ServiceAccount> replaceNamespacedServiceAccountAsync(V1ServiceAccount body, String name, String namespace, String pretty, final ServiceCallback<V1ServiceAccount> serviceCallback);

    /**
     * replace the specified ServiceAccount.
     *
     * @param body the V1ServiceAccount value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccount object
     */
    Observable<V1ServiceAccount> replaceNamespacedServiceAccountAsync(V1ServiceAccount body, String name, String namespace, String pretty);

    /**
     * replace the specified ServiceAccount.
     *
     * @param body the V1ServiceAccount value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccount object
     */
    Observable<ServiceResponse<V1ServiceAccount>> replaceNamespacedServiceAccountWithServiceResponseAsync(V1ServiceAccount body, String name, String namespace, String pretty);

    /**
     * delete a ServiceAccount.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedServiceAccount(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a ServiceAccount.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedServiceAccountAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ServiceAccount.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedServiceAccountAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a ServiceAccount.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedServiceAccountWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a ServiceAccount.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedServiceAccount(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ServiceAccount.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedServiceAccountAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ServiceAccount.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedServiceAccountAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ServiceAccount.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedServiceAccountWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified ServiceAccount.
     *
     * @param body the Object value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ServiceAccount object if successful.
     */
    V1ServiceAccount patchNamespacedServiceAccount(Object body, String name, String namespace);

    /**
     * partially update the specified ServiceAccount.
     *
     * @param body the Object value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ServiceAccount> patchNamespacedServiceAccountAsync(Object body, String name, String namespace, final ServiceCallback<V1ServiceAccount> serviceCallback);

    /**
     * partially update the specified ServiceAccount.
     *
     * @param body the Object value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccount object
     */
    Observable<V1ServiceAccount> patchNamespacedServiceAccountAsync(Object body, String name, String namespace);

    /**
     * partially update the specified ServiceAccount.
     *
     * @param body the Object value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccount object
     */
    Observable<ServiceResponse<V1ServiceAccount>> patchNamespacedServiceAccountWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified ServiceAccount.
     *
     * @param body the Object value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ServiceAccount object if successful.
     */
    V1ServiceAccount patchNamespacedServiceAccount(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified ServiceAccount.
     *
     * @param body the Object value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ServiceAccount> patchNamespacedServiceAccountAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1ServiceAccount> serviceCallback);

    /**
     * partially update the specified ServiceAccount.
     *
     * @param body the Object value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccount object
     */
    Observable<V1ServiceAccount> patchNamespacedServiceAccountAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified ServiceAccount.
     *
     * @param body the Object value
     * @param name name of the ServiceAccount
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccount object
     */
    Observable<ServiceResponse<V1ServiceAccount>> patchNamespacedServiceAccountWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind Service.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ServiceList object if successful.
     */
    V1ServiceList listNamespacedService(String namespace);

    /**
     * list or watch objects of kind Service.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ServiceList> listNamespacedServiceAsync(String namespace, final ServiceCallback<V1ServiceList> serviceCallback);

    /**
     * list or watch objects of kind Service.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceList object
     */
    Observable<V1ServiceList> listNamespacedServiceAsync(String namespace);

    /**
     * list or watch objects of kind Service.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceList object
     */
    Observable<ServiceResponse<V1ServiceList>> listNamespacedServiceWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind Service.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ServiceList object if successful.
     */
    V1ServiceList listNamespacedService(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Service.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ServiceList> listNamespacedServiceAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1ServiceList> serviceCallback);

    /**
     * list or watch objects of kind Service.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceList object
     */
    Observable<V1ServiceList> listNamespacedServiceAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Service.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceList object
     */
    Observable<ServiceResponse<V1ServiceList>> listNamespacedServiceWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a Service.
     *
     * @param body the V1Service value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Service object if successful.
     */
    V1Service createNamespacedService(V1Service body, String namespace);

    /**
     * create a Service.
     *
     * @param body the V1Service value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Service> createNamespacedServiceAsync(V1Service body, String namespace, final ServiceCallback<V1Service> serviceCallback);

    /**
     * create a Service.
     *
     * @param body the V1Service value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<V1Service> createNamespacedServiceAsync(V1Service body, String namespace);

    /**
     * create a Service.
     *
     * @param body the V1Service value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<ServiceResponse<V1Service>> createNamespacedServiceWithServiceResponseAsync(V1Service body, String namespace);
    /**
     * create a Service.
     *
     * @param body the V1Service value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Service object if successful.
     */
    V1Service createNamespacedService(V1Service body, String namespace, String pretty);

    /**
     * create a Service.
     *
     * @param body the V1Service value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Service> createNamespacedServiceAsync(V1Service body, String namespace, String pretty, final ServiceCallback<V1Service> serviceCallback);

    /**
     * create a Service.
     *
     * @param body the V1Service value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<V1Service> createNamespacedServiceAsync(V1Service body, String namespace, String pretty);

    /**
     * create a Service.
     *
     * @param body the V1Service value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<ServiceResponse<V1Service>> createNamespacedServiceWithServiceResponseAsync(V1Service body, String namespace, String pretty);

    /**
     * read the specified Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Service object if successful.
     */
    V1Service readNamespacedService(String name, String namespace);

    /**
     * read the specified Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Service> readNamespacedServiceAsync(String name, String namespace, final ServiceCallback<V1Service> serviceCallback);

    /**
     * read the specified Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<V1Service> readNamespacedServiceAsync(String name, String namespace);

    /**
     * read the specified Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<ServiceResponse<V1Service>> readNamespacedServiceWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Service object if successful.
     */
    V1Service readNamespacedService(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Service> readNamespacedServiceAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1Service> serviceCallback);

    /**
     * read the specified Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<V1Service> readNamespacedServiceAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<ServiceResponse<V1Service>> readNamespacedServiceWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified Service.
     *
     * @param body the V1Service value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Service object if successful.
     */
    V1Service replaceNamespacedService(V1Service body, String name, String namespace);

    /**
     * replace the specified Service.
     *
     * @param body the V1Service value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Service> replaceNamespacedServiceAsync(V1Service body, String name, String namespace, final ServiceCallback<V1Service> serviceCallback);

    /**
     * replace the specified Service.
     *
     * @param body the V1Service value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<V1Service> replaceNamespacedServiceAsync(V1Service body, String name, String namespace);

    /**
     * replace the specified Service.
     *
     * @param body the V1Service value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<ServiceResponse<V1Service>> replaceNamespacedServiceWithServiceResponseAsync(V1Service body, String name, String namespace);
    /**
     * replace the specified Service.
     *
     * @param body the V1Service value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Service object if successful.
     */
    V1Service replaceNamespacedService(V1Service body, String name, String namespace, String pretty);

    /**
     * replace the specified Service.
     *
     * @param body the V1Service value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Service> replaceNamespacedServiceAsync(V1Service body, String name, String namespace, String pretty, final ServiceCallback<V1Service> serviceCallback);

    /**
     * replace the specified Service.
     *
     * @param body the V1Service value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<V1Service> replaceNamespacedServiceAsync(V1Service body, String name, String namespace, String pretty);

    /**
     * replace the specified Service.
     *
     * @param body the V1Service value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<ServiceResponse<V1Service>> replaceNamespacedServiceWithServiceResponseAsync(V1Service body, String name, String namespace, String pretty);

    /**
     * delete a Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedService(String name, String namespace);

    /**
     * delete a Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedServiceAsync(String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedServiceAsync(String name, String namespace);

    /**
     * delete a Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedServiceWithServiceResponseAsync(String name, String namespace);
    /**
     * delete a Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedService(String name, String namespace, String pretty);

    /**
     * delete a Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedServiceAsync(String name, String namespace, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedServiceAsync(String name, String namespace, String pretty);

    /**
     * delete a Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedServiceWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * partially update the specified Service.
     *
     * @param body the Object value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Service object if successful.
     */
    V1Service patchNamespacedService(Object body, String name, String namespace);

    /**
     * partially update the specified Service.
     *
     * @param body the Object value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Service> patchNamespacedServiceAsync(Object body, String name, String namespace, final ServiceCallback<V1Service> serviceCallback);

    /**
     * partially update the specified Service.
     *
     * @param body the Object value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<V1Service> patchNamespacedServiceAsync(Object body, String name, String namespace);

    /**
     * partially update the specified Service.
     *
     * @param body the Object value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<ServiceResponse<V1Service>> patchNamespacedServiceWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified Service.
     *
     * @param body the Object value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Service object if successful.
     */
    V1Service patchNamespacedService(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Service.
     *
     * @param body the Object value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Service> patchNamespacedServiceAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1Service> serviceCallback);

    /**
     * partially update the specified Service.
     *
     * @param body the Object value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<V1Service> patchNamespacedServiceAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Service.
     *
     * @param body the Object value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<ServiceResponse<V1Service>> patchNamespacedServiceWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * connect GET requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectGetNamespacedServiceProxy(String name, String namespace);

    /**
     * connect GET requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectGetNamespacedServiceProxyAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * connect GET requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectGetNamespacedServiceProxyAsync(String name, String namespace);

    /**
     * connect GET requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectGetNamespacedServiceProxyWithServiceResponseAsync(String name, String namespace);
    /**
     * connect GET requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectGetNamespacedServiceProxy(String name, String namespace, String path);

    /**
     * connect GET requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectGetNamespacedServiceProxyAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * connect GET requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectGetNamespacedServiceProxyAsync(String name, String namespace, String path);

    /**
     * connect GET requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectGetNamespacedServiceProxyWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * connect PUT requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPutNamespacedServiceProxy(String name, String namespace);

    /**
     * connect PUT requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPutNamespacedServiceProxyAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * connect PUT requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPutNamespacedServiceProxyAsync(String name, String namespace);

    /**
     * connect PUT requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPutNamespacedServiceProxyWithServiceResponseAsync(String name, String namespace);
    /**
     * connect PUT requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPutNamespacedServiceProxy(String name, String namespace, String path);

    /**
     * connect PUT requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPutNamespacedServiceProxyAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * connect PUT requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPutNamespacedServiceProxyAsync(String name, String namespace, String path);

    /**
     * connect PUT requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPutNamespacedServiceProxyWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * connect POST requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPostNamespacedServiceProxy(String name, String namespace);

    /**
     * connect POST requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPostNamespacedServiceProxyAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * connect POST requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPostNamespacedServiceProxyAsync(String name, String namespace);

    /**
     * connect POST requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPostNamespacedServiceProxyWithServiceResponseAsync(String name, String namespace);
    /**
     * connect POST requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPostNamespacedServiceProxy(String name, String namespace, String path);

    /**
     * connect POST requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPostNamespacedServiceProxyAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * connect POST requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPostNamespacedServiceProxyAsync(String name, String namespace, String path);

    /**
     * connect POST requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPostNamespacedServiceProxyWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * connect DELETE requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectDeleteNamespacedServiceProxy(String name, String namespace);

    /**
     * connect DELETE requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectDeleteNamespacedServiceProxyAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * connect DELETE requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectDeleteNamespacedServiceProxyAsync(String name, String namespace);

    /**
     * connect DELETE requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectDeleteNamespacedServiceProxyWithServiceResponseAsync(String name, String namespace);
    /**
     * connect DELETE requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectDeleteNamespacedServiceProxy(String name, String namespace, String path);

    /**
     * connect DELETE requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectDeleteNamespacedServiceProxyAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * connect DELETE requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectDeleteNamespacedServiceProxyAsync(String name, String namespace, String path);

    /**
     * connect DELETE requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectDeleteNamespacedServiceProxyWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * connect HEAD requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectHeadNamespacedServiceProxy(String name, String namespace);

    /**
     * connect HEAD requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectHeadNamespacedServiceProxyAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * connect HEAD requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectHeadNamespacedServiceProxyAsync(String name, String namespace);

    /**
     * connect HEAD requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectHeadNamespacedServiceProxyWithServiceResponseAsync(String name, String namespace);
    /**
     * connect HEAD requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectHeadNamespacedServiceProxy(String name, String namespace, String path);

    /**
     * connect HEAD requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectHeadNamespacedServiceProxyAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * connect HEAD requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectHeadNamespacedServiceProxyAsync(String name, String namespace, String path);

    /**
     * connect HEAD requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectHeadNamespacedServiceProxyWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * connect GET requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectGetNamespacedServiceProxyWithPath(String name, String namespace, String path, String path1);

    /**
     * connect GET requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectGetNamespacedServiceProxyWithPathAsync(String name, String namespace, String path, String path1, final ServiceCallback<String> serviceCallback);

    /**
     * connect GET requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectGetNamespacedServiceProxyWithPathAsync(String name, String namespace, String path, String path1);

    /**
     * connect GET requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectGetNamespacedServiceProxyWithPathWithServiceResponseAsync(String name, String namespace, String path, String path1);

    /**
     * connect PUT requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPutNamespacedServiceProxyWithPath(String name, String namespace, String path, String path1);

    /**
     * connect PUT requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPutNamespacedServiceProxyWithPathAsync(String name, String namespace, String path, String path1, final ServiceCallback<String> serviceCallback);

    /**
     * connect PUT requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPutNamespacedServiceProxyWithPathAsync(String name, String namespace, String path, String path1);

    /**
     * connect PUT requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPutNamespacedServiceProxyWithPathWithServiceResponseAsync(String name, String namespace, String path, String path1);

    /**
     * connect POST requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPostNamespacedServiceProxyWithPath(String name, String namespace, String path, String path1);

    /**
     * connect POST requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPostNamespacedServiceProxyWithPathAsync(String name, String namespace, String path, String path1, final ServiceCallback<String> serviceCallback);

    /**
     * connect POST requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPostNamespacedServiceProxyWithPathAsync(String name, String namespace, String path, String path1);

    /**
     * connect POST requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPostNamespacedServiceProxyWithPathWithServiceResponseAsync(String name, String namespace, String path, String path1);

    /**
     * connect DELETE requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectDeleteNamespacedServiceProxyWithPath(String name, String namespace, String path, String path1);

    /**
     * connect DELETE requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectDeleteNamespacedServiceProxyWithPathAsync(String name, String namespace, String path, String path1, final ServiceCallback<String> serviceCallback);

    /**
     * connect DELETE requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectDeleteNamespacedServiceProxyWithPathAsync(String name, String namespace, String path, String path1);

    /**
     * connect DELETE requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectDeleteNamespacedServiceProxyWithPathWithServiceResponseAsync(String name, String namespace, String path, String path1);

    /**
     * connect HEAD requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectHeadNamespacedServiceProxyWithPath(String name, String namespace, String path, String path1);

    /**
     * connect HEAD requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectHeadNamespacedServiceProxyWithPathAsync(String name, String namespace, String path, String path1, final ServiceCallback<String> serviceCallback);

    /**
     * connect HEAD requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectHeadNamespacedServiceProxyWithPathAsync(String name, String namespace, String path, String path1);

    /**
     * connect HEAD requests to proxy of Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param path1 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectHeadNamespacedServiceProxyWithPathWithServiceResponseAsync(String name, String namespace, String path, String path1);

    /**
     * read status of the specified Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Service object if successful.
     */
    V1Service readNamespacedServiceStatus(String name, String namespace);

    /**
     * read status of the specified Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Service> readNamespacedServiceStatusAsync(String name, String namespace, final ServiceCallback<V1Service> serviceCallback);

    /**
     * read status of the specified Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<V1Service> readNamespacedServiceStatusAsync(String name, String namespace);

    /**
     * read status of the specified Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<ServiceResponse<V1Service>> readNamespacedServiceStatusWithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Service object if successful.
     */
    V1Service readNamespacedServiceStatus(String name, String namespace, String pretty);

    /**
     * read status of the specified Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Service> readNamespacedServiceStatusAsync(String name, String namespace, String pretty, final ServiceCallback<V1Service> serviceCallback);

    /**
     * read status of the specified Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<V1Service> readNamespacedServiceStatusAsync(String name, String namespace, String pretty);

    /**
     * read status of the specified Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<ServiceResponse<V1Service>> readNamespacedServiceStatusWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified Service.
     *
     * @param body the V1Service value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Service object if successful.
     */
    V1Service replaceNamespacedServiceStatus(V1Service body, String name, String namespace);

    /**
     * replace status of the specified Service.
     *
     * @param body the V1Service value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Service> replaceNamespacedServiceStatusAsync(V1Service body, String name, String namespace, final ServiceCallback<V1Service> serviceCallback);

    /**
     * replace status of the specified Service.
     *
     * @param body the V1Service value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<V1Service> replaceNamespacedServiceStatusAsync(V1Service body, String name, String namespace);

    /**
     * replace status of the specified Service.
     *
     * @param body the V1Service value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<ServiceResponse<V1Service>> replaceNamespacedServiceStatusWithServiceResponseAsync(V1Service body, String name, String namespace);
    /**
     * replace status of the specified Service.
     *
     * @param body the V1Service value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Service object if successful.
     */
    V1Service replaceNamespacedServiceStatus(V1Service body, String name, String namespace, String pretty);

    /**
     * replace status of the specified Service.
     *
     * @param body the V1Service value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Service> replaceNamespacedServiceStatusAsync(V1Service body, String name, String namespace, String pretty, final ServiceCallback<V1Service> serviceCallback);

    /**
     * replace status of the specified Service.
     *
     * @param body the V1Service value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<V1Service> replaceNamespacedServiceStatusAsync(V1Service body, String name, String namespace, String pretty);

    /**
     * replace status of the specified Service.
     *
     * @param body the V1Service value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<ServiceResponse<V1Service>> replaceNamespacedServiceStatusWithServiceResponseAsync(V1Service body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Service.
     *
     * @param body the Object value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Service object if successful.
     */
    V1Service patchNamespacedServiceStatus(Object body, String name, String namespace);

    /**
     * partially update status of the specified Service.
     *
     * @param body the Object value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Service> patchNamespacedServiceStatusAsync(Object body, String name, String namespace, final ServiceCallback<V1Service> serviceCallback);

    /**
     * partially update status of the specified Service.
     *
     * @param body the Object value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<V1Service> patchNamespacedServiceStatusAsync(Object body, String name, String namespace);

    /**
     * partially update status of the specified Service.
     *
     * @param body the Object value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<ServiceResponse<V1Service>> patchNamespacedServiceStatusWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified Service.
     *
     * @param body the Object value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Service object if successful.
     */
    V1Service patchNamespacedServiceStatus(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Service.
     *
     * @param body the Object value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Service> patchNamespacedServiceStatusAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1Service> serviceCallback);

    /**
     * partially update status of the specified Service.
     *
     * @param body the Object value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<V1Service> patchNamespacedServiceStatusAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Service.
     *
     * @param body the Object value
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Service object
     */
    Observable<ServiceResponse<V1Service>> patchNamespacedServiceStatusWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read the specified Namespace.
     *
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Namespace object if successful.
     */
    V1Namespace readNamespace(String name);

    /**
     * read the specified Namespace.
     *
     * @param name name of the Namespace
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Namespace> readNamespaceAsync(String name, final ServiceCallback<V1Namespace> serviceCallback);

    /**
     * read the specified Namespace.
     *
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<V1Namespace> readNamespaceAsync(String name);

    /**
     * read the specified Namespace.
     *
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<ServiceResponse<V1Namespace>> readNamespaceWithServiceResponseAsync(String name);
    /**
     * read the specified Namespace.
     *
     * @param name name of the Namespace
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Namespace object if successful.
     */
    V1Namespace readNamespace(String name, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Namespace.
     *
     * @param name name of the Namespace
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Namespace> readNamespaceAsync(String name, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1Namespace> serviceCallback);

    /**
     * read the specified Namespace.
     *
     * @param name name of the Namespace
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<V1Namespace> readNamespaceAsync(String name, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Namespace.
     *
     * @param name name of the Namespace
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<ServiceResponse<V1Namespace>> readNamespaceWithServiceResponseAsync(String name, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Namespace object if successful.
     */
    V1Namespace replaceNamespace(V1Namespace body, String name);

    /**
     * replace the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Namespace> replaceNamespaceAsync(V1Namespace body, String name, final ServiceCallback<V1Namespace> serviceCallback);

    /**
     * replace the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<V1Namespace> replaceNamespaceAsync(V1Namespace body, String name);

    /**
     * replace the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<ServiceResponse<V1Namespace>> replaceNamespaceWithServiceResponseAsync(V1Namespace body, String name);
    /**
     * replace the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Namespace object if successful.
     */
    V1Namespace replaceNamespace(V1Namespace body, String name, String pretty);

    /**
     * replace the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Namespace> replaceNamespaceAsync(V1Namespace body, String name, String pretty, final ServiceCallback<V1Namespace> serviceCallback);

    /**
     * replace the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<V1Namespace> replaceNamespaceAsync(V1Namespace body, String name, String pretty);

    /**
     * replace the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<ServiceResponse<V1Namespace>> replaceNamespaceWithServiceResponseAsync(V1Namespace body, String name, String pretty);

    /**
     * delete a Namespace.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespace(V1DeleteOptions body, String name);

    /**
     * delete a Namespace.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Namespace
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespaceAsync(V1DeleteOptions body, String name, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Namespace.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespaceAsync(V1DeleteOptions body, String name);

    /**
     * delete a Namespace.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespaceWithServiceResponseAsync(V1DeleteOptions body, String name);
    /**
     * delete a Namespace.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Namespace
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespace(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Namespace.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Namespace
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespaceAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Namespace.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Namespace
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespaceAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Namespace.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Namespace
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespaceWithServiceResponseAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified Namespace.
     *
     * @param body the Object value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Namespace object if successful.
     */
    V1Namespace patchNamespace(Object body, String name);

    /**
     * partially update the specified Namespace.
     *
     * @param body the Object value
     * @param name name of the Namespace
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Namespace> patchNamespaceAsync(Object body, String name, final ServiceCallback<V1Namespace> serviceCallback);

    /**
     * partially update the specified Namespace.
     *
     * @param body the Object value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<V1Namespace> patchNamespaceAsync(Object body, String name);

    /**
     * partially update the specified Namespace.
     *
     * @param body the Object value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<ServiceResponse<V1Namespace>> patchNamespaceWithServiceResponseAsync(Object body, String name);
    /**
     * partially update the specified Namespace.
     *
     * @param body the Object value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Namespace object if successful.
     */
    V1Namespace patchNamespace(Object body, String name, String pretty);

    /**
     * partially update the specified Namespace.
     *
     * @param body the Object value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Namespace> patchNamespaceAsync(Object body, String name, String pretty, final ServiceCallback<V1Namespace> serviceCallback);

    /**
     * partially update the specified Namespace.
     *
     * @param body the Object value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<V1Namespace> patchNamespaceAsync(Object body, String name, String pretty);

    /**
     * partially update the specified Namespace.
     *
     * @param body the Object value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<ServiceResponse<V1Namespace>> patchNamespaceWithServiceResponseAsync(Object body, String name, String pretty);

    /**
     * replace finalize of the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Namespace object if successful.
     */
    V1Namespace replaceNamespaceFinalize(V1Namespace body, String name);

    /**
     * replace finalize of the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Namespace> replaceNamespaceFinalizeAsync(V1Namespace body, String name, final ServiceCallback<V1Namespace> serviceCallback);

    /**
     * replace finalize of the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<V1Namespace> replaceNamespaceFinalizeAsync(V1Namespace body, String name);

    /**
     * replace finalize of the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<ServiceResponse<V1Namespace>> replaceNamespaceFinalizeWithServiceResponseAsync(V1Namespace body, String name);
    /**
     * replace finalize of the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Namespace object if successful.
     */
    V1Namespace replaceNamespaceFinalize(V1Namespace body, String name, String pretty);

    /**
     * replace finalize of the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Namespace> replaceNamespaceFinalizeAsync(V1Namespace body, String name, String pretty, final ServiceCallback<V1Namespace> serviceCallback);

    /**
     * replace finalize of the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<V1Namespace> replaceNamespaceFinalizeAsync(V1Namespace body, String name, String pretty);

    /**
     * replace finalize of the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<ServiceResponse<V1Namespace>> replaceNamespaceFinalizeWithServiceResponseAsync(V1Namespace body, String name, String pretty);

    /**
     * read status of the specified Namespace.
     *
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Namespace object if successful.
     */
    V1Namespace readNamespaceStatus(String name);

    /**
     * read status of the specified Namespace.
     *
     * @param name name of the Namespace
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Namespace> readNamespaceStatusAsync(String name, final ServiceCallback<V1Namespace> serviceCallback);

    /**
     * read status of the specified Namespace.
     *
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<V1Namespace> readNamespaceStatusAsync(String name);

    /**
     * read status of the specified Namespace.
     *
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<ServiceResponse<V1Namespace>> readNamespaceStatusWithServiceResponseAsync(String name);
    /**
     * read status of the specified Namespace.
     *
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Namespace object if successful.
     */
    V1Namespace readNamespaceStatus(String name, String pretty);

    /**
     * read status of the specified Namespace.
     *
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Namespace> readNamespaceStatusAsync(String name, String pretty, final ServiceCallback<V1Namespace> serviceCallback);

    /**
     * read status of the specified Namespace.
     *
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<V1Namespace> readNamespaceStatusAsync(String name, String pretty);

    /**
     * read status of the specified Namespace.
     *
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<ServiceResponse<V1Namespace>> readNamespaceStatusWithServiceResponseAsync(String name, String pretty);

    /**
     * replace status of the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Namespace object if successful.
     */
    V1Namespace replaceNamespaceStatus(V1Namespace body, String name);

    /**
     * replace status of the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Namespace> replaceNamespaceStatusAsync(V1Namespace body, String name, final ServiceCallback<V1Namespace> serviceCallback);

    /**
     * replace status of the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<V1Namespace> replaceNamespaceStatusAsync(V1Namespace body, String name);

    /**
     * replace status of the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<ServiceResponse<V1Namespace>> replaceNamespaceStatusWithServiceResponseAsync(V1Namespace body, String name);
    /**
     * replace status of the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Namespace object if successful.
     */
    V1Namespace replaceNamespaceStatus(V1Namespace body, String name, String pretty);

    /**
     * replace status of the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Namespace> replaceNamespaceStatusAsync(V1Namespace body, String name, String pretty, final ServiceCallback<V1Namespace> serviceCallback);

    /**
     * replace status of the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<V1Namespace> replaceNamespaceStatusAsync(V1Namespace body, String name, String pretty);

    /**
     * replace status of the specified Namespace.
     *
     * @param body the V1Namespace value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<ServiceResponse<V1Namespace>> replaceNamespaceStatusWithServiceResponseAsync(V1Namespace body, String name, String pretty);

    /**
     * partially update status of the specified Namespace.
     *
     * @param body the Object value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Namespace object if successful.
     */
    V1Namespace patchNamespaceStatus(Object body, String name);

    /**
     * partially update status of the specified Namespace.
     *
     * @param body the Object value
     * @param name name of the Namespace
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Namespace> patchNamespaceStatusAsync(Object body, String name, final ServiceCallback<V1Namespace> serviceCallback);

    /**
     * partially update status of the specified Namespace.
     *
     * @param body the Object value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<V1Namespace> patchNamespaceStatusAsync(Object body, String name);

    /**
     * partially update status of the specified Namespace.
     *
     * @param body the Object value
     * @param name name of the Namespace
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<ServiceResponse<V1Namespace>> patchNamespaceStatusWithServiceResponseAsync(Object body, String name);
    /**
     * partially update status of the specified Namespace.
     *
     * @param body the Object value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Namespace object if successful.
     */
    V1Namespace patchNamespaceStatus(Object body, String name, String pretty);

    /**
     * partially update status of the specified Namespace.
     *
     * @param body the Object value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Namespace> patchNamespaceStatusAsync(Object body, String name, String pretty, final ServiceCallback<V1Namespace> serviceCallback);

    /**
     * partially update status of the specified Namespace.
     *
     * @param body the Object value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<V1Namespace> patchNamespaceStatusAsync(Object body, String name, String pretty);

    /**
     * partially update status of the specified Namespace.
     *
     * @param body the Object value
     * @param name name of the Namespace
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Namespace object
     */
    Observable<ServiceResponse<V1Namespace>> patchNamespaceStatusWithServiceResponseAsync(Object body, String name, String pretty);

    /**
     * list or watch objects of kind Node.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1NodeList object if successful.
     */
    V1NodeList listNode();

    /**
     * list or watch objects of kind Node.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1NodeList> listNodeAsync(final ServiceCallback<V1NodeList> serviceCallback);

    /**
     * list or watch objects of kind Node.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1NodeList object
     */
    Observable<V1NodeList> listNodeAsync();

    /**
     * list or watch objects of kind Node.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1NodeList object
     */
    Observable<ServiceResponse<V1NodeList>> listNodeWithServiceResponseAsync();
    /**
     * list or watch objects of kind Node.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1NodeList object if successful.
     */
    V1NodeList listNode(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Node.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1NodeList> listNodeAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1NodeList> serviceCallback);

    /**
     * list or watch objects of kind Node.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1NodeList object
     */
    Observable<V1NodeList> listNodeAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Node.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1NodeList object
     */
    Observable<ServiceResponse<V1NodeList>> listNodeWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a Node.
     *
     * @param body the V1Node value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Node object if successful.
     */
    V1Node createNode(V1Node body);

    /**
     * create a Node.
     *
     * @param body the V1Node value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Node> createNodeAsync(V1Node body, final ServiceCallback<V1Node> serviceCallback);

    /**
     * create a Node.
     *
     * @param body the V1Node value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<V1Node> createNodeAsync(V1Node body);

    /**
     * create a Node.
     *
     * @param body the V1Node value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<ServiceResponse<V1Node>> createNodeWithServiceResponseAsync(V1Node body);
    /**
     * create a Node.
     *
     * @param body the V1Node value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Node object if successful.
     */
    V1Node createNode(V1Node body, String pretty);

    /**
     * create a Node.
     *
     * @param body the V1Node value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Node> createNodeAsync(V1Node body, String pretty, final ServiceCallback<V1Node> serviceCallback);

    /**
     * create a Node.
     *
     * @param body the V1Node value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<V1Node> createNodeAsync(V1Node body, String pretty);

    /**
     * create a Node.
     *
     * @param body the V1Node value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<ServiceResponse<V1Node>> createNodeWithServiceResponseAsync(V1Node body, String pretty);

    /**
     * delete collection of Node.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNode();

    /**
     * delete collection of Node.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNodeAsync(final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Node.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNodeAsync();

    /**
     * delete collection of Node.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNodeWithServiceResponseAsync();
    /**
     * delete collection of Node.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNode(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Node.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNodeAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Node.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNodeAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Node.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNodeWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Node object if successful.
     */
    V1Node readNode(String name);

    /**
     * read the specified Node.
     *
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Node> readNodeAsync(String name, final ServiceCallback<V1Node> serviceCallback);

    /**
     * read the specified Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<V1Node> readNodeAsync(String name);

    /**
     * read the specified Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<ServiceResponse<V1Node>> readNodeWithServiceResponseAsync(String name);
    /**
     * read the specified Node.
     *
     * @param name name of the Node
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Node object if successful.
     */
    V1Node readNode(String name, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Node.
     *
     * @param name name of the Node
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Node> readNodeAsync(String name, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1Node> serviceCallback);

    /**
     * read the specified Node.
     *
     * @param name name of the Node
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<V1Node> readNodeAsync(String name, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Node.
     *
     * @param name name of the Node
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<ServiceResponse<V1Node>> readNodeWithServiceResponseAsync(String name, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified Node.
     *
     * @param body the V1Node value
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Node object if successful.
     */
    V1Node replaceNode(V1Node body, String name);

    /**
     * replace the specified Node.
     *
     * @param body the V1Node value
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Node> replaceNodeAsync(V1Node body, String name, final ServiceCallback<V1Node> serviceCallback);

    /**
     * replace the specified Node.
     *
     * @param body the V1Node value
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<V1Node> replaceNodeAsync(V1Node body, String name);

    /**
     * replace the specified Node.
     *
     * @param body the V1Node value
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<ServiceResponse<V1Node>> replaceNodeWithServiceResponseAsync(V1Node body, String name);
    /**
     * replace the specified Node.
     *
     * @param body the V1Node value
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Node object if successful.
     */
    V1Node replaceNode(V1Node body, String name, String pretty);

    /**
     * replace the specified Node.
     *
     * @param body the V1Node value
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Node> replaceNodeAsync(V1Node body, String name, String pretty, final ServiceCallback<V1Node> serviceCallback);

    /**
     * replace the specified Node.
     *
     * @param body the V1Node value
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<V1Node> replaceNodeAsync(V1Node body, String name, String pretty);

    /**
     * replace the specified Node.
     *
     * @param body the V1Node value
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<ServiceResponse<V1Node>> replaceNodeWithServiceResponseAsync(V1Node body, String name, String pretty);

    /**
     * delete a Node.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNode(V1DeleteOptions body, String name);

    /**
     * delete a Node.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNodeAsync(V1DeleteOptions body, String name, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Node.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNodeAsync(V1DeleteOptions body, String name);

    /**
     * delete a Node.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNodeWithServiceResponseAsync(V1DeleteOptions body, String name);
    /**
     * delete a Node.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Node
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNode(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Node.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Node
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNodeAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Node.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Node
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNodeAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Node.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Node
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNodeWithServiceResponseAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified Node.
     *
     * @param body the Object value
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Node object if successful.
     */
    V1Node patchNode(Object body, String name);

    /**
     * partially update the specified Node.
     *
     * @param body the Object value
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Node> patchNodeAsync(Object body, String name, final ServiceCallback<V1Node> serviceCallback);

    /**
     * partially update the specified Node.
     *
     * @param body the Object value
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<V1Node> patchNodeAsync(Object body, String name);

    /**
     * partially update the specified Node.
     *
     * @param body the Object value
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<ServiceResponse<V1Node>> patchNodeWithServiceResponseAsync(Object body, String name);
    /**
     * partially update the specified Node.
     *
     * @param body the Object value
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Node object if successful.
     */
    V1Node patchNode(Object body, String name, String pretty);

    /**
     * partially update the specified Node.
     *
     * @param body the Object value
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Node> patchNodeAsync(Object body, String name, String pretty, final ServiceCallback<V1Node> serviceCallback);

    /**
     * partially update the specified Node.
     *
     * @param body the Object value
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<V1Node> patchNodeAsync(Object body, String name, String pretty);

    /**
     * partially update the specified Node.
     *
     * @param body the Object value
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<ServiceResponse<V1Node>> patchNodeWithServiceResponseAsync(Object body, String name, String pretty);

    /**
     * connect GET requests to proxy of Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectGetNodeProxy(String name);

    /**
     * connect GET requests to proxy of Node.
     *
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectGetNodeProxyAsync(String name, final ServiceCallback<String> serviceCallback);

    /**
     * connect GET requests to proxy of Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectGetNodeProxyAsync(String name);

    /**
     * connect GET requests to proxy of Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectGetNodeProxyWithServiceResponseAsync(String name);
    /**
     * connect GET requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectGetNodeProxy(String name, String path);

    /**
     * connect GET requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectGetNodeProxyAsync(String name, String path, final ServiceCallback<String> serviceCallback);

    /**
     * connect GET requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectGetNodeProxyAsync(String name, String path);

    /**
     * connect GET requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectGetNodeProxyWithServiceResponseAsync(String name, String path);

    /**
     * connect PUT requests to proxy of Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPutNodeProxy(String name);

    /**
     * connect PUT requests to proxy of Node.
     *
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPutNodeProxyAsync(String name, final ServiceCallback<String> serviceCallback);

    /**
     * connect PUT requests to proxy of Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPutNodeProxyAsync(String name);

    /**
     * connect PUT requests to proxy of Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPutNodeProxyWithServiceResponseAsync(String name);
    /**
     * connect PUT requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPutNodeProxy(String name, String path);

    /**
     * connect PUT requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPutNodeProxyAsync(String name, String path, final ServiceCallback<String> serviceCallback);

    /**
     * connect PUT requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPutNodeProxyAsync(String name, String path);

    /**
     * connect PUT requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPutNodeProxyWithServiceResponseAsync(String name, String path);

    /**
     * connect POST requests to proxy of Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPostNodeProxy(String name);

    /**
     * connect POST requests to proxy of Node.
     *
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPostNodeProxyAsync(String name, final ServiceCallback<String> serviceCallback);

    /**
     * connect POST requests to proxy of Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPostNodeProxyAsync(String name);

    /**
     * connect POST requests to proxy of Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPostNodeProxyWithServiceResponseAsync(String name);
    /**
     * connect POST requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPostNodeProxy(String name, String path);

    /**
     * connect POST requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPostNodeProxyAsync(String name, String path, final ServiceCallback<String> serviceCallback);

    /**
     * connect POST requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPostNodeProxyAsync(String name, String path);

    /**
     * connect POST requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPostNodeProxyWithServiceResponseAsync(String name, String path);

    /**
     * connect DELETE requests to proxy of Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectDeleteNodeProxy(String name);

    /**
     * connect DELETE requests to proxy of Node.
     *
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectDeleteNodeProxyAsync(String name, final ServiceCallback<String> serviceCallback);

    /**
     * connect DELETE requests to proxy of Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectDeleteNodeProxyAsync(String name);

    /**
     * connect DELETE requests to proxy of Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectDeleteNodeProxyWithServiceResponseAsync(String name);
    /**
     * connect DELETE requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectDeleteNodeProxy(String name, String path);

    /**
     * connect DELETE requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectDeleteNodeProxyAsync(String name, String path, final ServiceCallback<String> serviceCallback);

    /**
     * connect DELETE requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectDeleteNodeProxyAsync(String name, String path);

    /**
     * connect DELETE requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectDeleteNodeProxyWithServiceResponseAsync(String name, String path);

    /**
     * connect HEAD requests to proxy of Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectHeadNodeProxy(String name);

    /**
     * connect HEAD requests to proxy of Node.
     *
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectHeadNodeProxyAsync(String name, final ServiceCallback<String> serviceCallback);

    /**
     * connect HEAD requests to proxy of Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectHeadNodeProxyAsync(String name);

    /**
     * connect HEAD requests to proxy of Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectHeadNodeProxyWithServiceResponseAsync(String name);
    /**
     * connect HEAD requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectHeadNodeProxy(String name, String path);

    /**
     * connect HEAD requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectHeadNodeProxyAsync(String name, String path, final ServiceCallback<String> serviceCallback);

    /**
     * connect HEAD requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectHeadNodeProxyAsync(String name, String path);

    /**
     * connect HEAD requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectHeadNodeProxyWithServiceResponseAsync(String name, String path);

    /**
     * connect GET requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectGetNodeProxyWithPath(String name, String path, String path1);

    /**
     * connect GET requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectGetNodeProxyWithPathAsync(String name, String path, String path1, final ServiceCallback<String> serviceCallback);

    /**
     * connect GET requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectGetNodeProxyWithPathAsync(String name, String path, String path1);

    /**
     * connect GET requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectGetNodeProxyWithPathWithServiceResponseAsync(String name, String path, String path1);

    /**
     * connect PUT requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPutNodeProxyWithPath(String name, String path, String path1);

    /**
     * connect PUT requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPutNodeProxyWithPathAsync(String name, String path, String path1, final ServiceCallback<String> serviceCallback);

    /**
     * connect PUT requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPutNodeProxyWithPathAsync(String name, String path, String path1);

    /**
     * connect PUT requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPutNodeProxyWithPathWithServiceResponseAsync(String name, String path, String path1);

    /**
     * connect POST requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectPostNodeProxyWithPath(String name, String path, String path1);

    /**
     * connect POST requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectPostNodeProxyWithPathAsync(String name, String path, String path1, final ServiceCallback<String> serviceCallback);

    /**
     * connect POST requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectPostNodeProxyWithPathAsync(String name, String path, String path1);

    /**
     * connect POST requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectPostNodeProxyWithPathWithServiceResponseAsync(String name, String path, String path1);

    /**
     * connect DELETE requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectDeleteNodeProxyWithPath(String name, String path, String path1);

    /**
     * connect DELETE requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectDeleteNodeProxyWithPathAsync(String name, String path, String path1, final ServiceCallback<String> serviceCallback);

    /**
     * connect DELETE requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectDeleteNodeProxyWithPathAsync(String name, String path, String path1);

    /**
     * connect DELETE requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectDeleteNodeProxyWithPathWithServiceResponseAsync(String name, String path, String path1);

    /**
     * connect HEAD requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String connectHeadNodeProxyWithPath(String name, String path, String path1);

    /**
     * connect HEAD requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> connectHeadNodeProxyWithPathAsync(String name, String path, String path1, final ServiceCallback<String> serviceCallback);

    /**
     * connect HEAD requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> connectHeadNodeProxyWithPathAsync(String name, String path, String path1);

    /**
     * connect HEAD requests to proxy of Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param path1 Path is the URL path to use for the current proxy request to node.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> connectHeadNodeProxyWithPathWithServiceResponseAsync(String name, String path, String path1);

    /**
     * read status of the specified Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Node object if successful.
     */
    V1Node readNodeStatus(String name);

    /**
     * read status of the specified Node.
     *
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Node> readNodeStatusAsync(String name, final ServiceCallback<V1Node> serviceCallback);

    /**
     * read status of the specified Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<V1Node> readNodeStatusAsync(String name);

    /**
     * read status of the specified Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<ServiceResponse<V1Node>> readNodeStatusWithServiceResponseAsync(String name);
    /**
     * read status of the specified Node.
     *
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Node object if successful.
     */
    V1Node readNodeStatus(String name, String pretty);

    /**
     * read status of the specified Node.
     *
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Node> readNodeStatusAsync(String name, String pretty, final ServiceCallback<V1Node> serviceCallback);

    /**
     * read status of the specified Node.
     *
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<V1Node> readNodeStatusAsync(String name, String pretty);

    /**
     * read status of the specified Node.
     *
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<ServiceResponse<V1Node>> readNodeStatusWithServiceResponseAsync(String name, String pretty);

    /**
     * replace status of the specified Node.
     *
     * @param body the V1Node value
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Node object if successful.
     */
    V1Node replaceNodeStatus(V1Node body, String name);

    /**
     * replace status of the specified Node.
     *
     * @param body the V1Node value
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Node> replaceNodeStatusAsync(V1Node body, String name, final ServiceCallback<V1Node> serviceCallback);

    /**
     * replace status of the specified Node.
     *
     * @param body the V1Node value
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<V1Node> replaceNodeStatusAsync(V1Node body, String name);

    /**
     * replace status of the specified Node.
     *
     * @param body the V1Node value
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<ServiceResponse<V1Node>> replaceNodeStatusWithServiceResponseAsync(V1Node body, String name);
    /**
     * replace status of the specified Node.
     *
     * @param body the V1Node value
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Node object if successful.
     */
    V1Node replaceNodeStatus(V1Node body, String name, String pretty);

    /**
     * replace status of the specified Node.
     *
     * @param body the V1Node value
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Node> replaceNodeStatusAsync(V1Node body, String name, String pretty, final ServiceCallback<V1Node> serviceCallback);

    /**
     * replace status of the specified Node.
     *
     * @param body the V1Node value
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<V1Node> replaceNodeStatusAsync(V1Node body, String name, String pretty);

    /**
     * replace status of the specified Node.
     *
     * @param body the V1Node value
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<ServiceResponse<V1Node>> replaceNodeStatusWithServiceResponseAsync(V1Node body, String name, String pretty);

    /**
     * partially update status of the specified Node.
     *
     * @param body the Object value
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Node object if successful.
     */
    V1Node patchNodeStatus(Object body, String name);

    /**
     * partially update status of the specified Node.
     *
     * @param body the Object value
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Node> patchNodeStatusAsync(Object body, String name, final ServiceCallback<V1Node> serviceCallback);

    /**
     * partially update status of the specified Node.
     *
     * @param body the Object value
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<V1Node> patchNodeStatusAsync(Object body, String name);

    /**
     * partially update status of the specified Node.
     *
     * @param body the Object value
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<ServiceResponse<V1Node>> patchNodeStatusWithServiceResponseAsync(Object body, String name);
    /**
     * partially update status of the specified Node.
     *
     * @param body the Object value
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Node object if successful.
     */
    V1Node patchNodeStatus(Object body, String name, String pretty);

    /**
     * partially update status of the specified Node.
     *
     * @param body the Object value
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Node> patchNodeStatusAsync(Object body, String name, String pretty, final ServiceCallback<V1Node> serviceCallback);

    /**
     * partially update status of the specified Node.
     *
     * @param body the Object value
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<V1Node> patchNodeStatusAsync(Object body, String name, String pretty);

    /**
     * partially update status of the specified Node.
     *
     * @param body the Object value
     * @param name name of the Node
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Node object
     */
    Observable<ServiceResponse<V1Node>> patchNodeStatusWithServiceResponseAsync(Object body, String name, String pretty);

    /**
     * list or watch objects of kind PersistentVolumeClaim.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaimList object if successful.
     */
    V1PersistentVolumeClaimList listPersistentVolumeClaimForAllNamespaces();

    /**
     * list or watch objects of kind PersistentVolumeClaim.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaimList> listPersistentVolumeClaimForAllNamespacesAsync(final ServiceCallback<V1PersistentVolumeClaimList> serviceCallback);

    /**
     * list or watch objects of kind PersistentVolumeClaim.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaimList object
     */
    Observable<V1PersistentVolumeClaimList> listPersistentVolumeClaimForAllNamespacesAsync();

    /**
     * list or watch objects of kind PersistentVolumeClaim.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaimList object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaimList>> listPersistentVolumeClaimForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind PersistentVolumeClaim.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeClaimList object if successful.
     */
    V1PersistentVolumeClaimList listPersistentVolumeClaimForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind PersistentVolumeClaim.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeClaimList> listPersistentVolumeClaimForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1PersistentVolumeClaimList> serviceCallback);

    /**
     * list or watch objects of kind PersistentVolumeClaim.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaimList object
     */
    Observable<V1PersistentVolumeClaimList> listPersistentVolumeClaimForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind PersistentVolumeClaim.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeClaimList object
     */
    Observable<ServiceResponse<V1PersistentVolumeClaimList>> listPersistentVolumeClaimForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind PersistentVolume.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeList object if successful.
     */
    V1PersistentVolumeList listPersistentVolume();

    /**
     * list or watch objects of kind PersistentVolume.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeList> listPersistentVolumeAsync(final ServiceCallback<V1PersistentVolumeList> serviceCallback);

    /**
     * list or watch objects of kind PersistentVolume.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeList object
     */
    Observable<V1PersistentVolumeList> listPersistentVolumeAsync();

    /**
     * list or watch objects of kind PersistentVolume.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeList object
     */
    Observable<ServiceResponse<V1PersistentVolumeList>> listPersistentVolumeWithServiceResponseAsync();
    /**
     * list or watch objects of kind PersistentVolume.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolumeList object if successful.
     */
    V1PersistentVolumeList listPersistentVolume(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind PersistentVolume.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolumeList> listPersistentVolumeAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1PersistentVolumeList> serviceCallback);

    /**
     * list or watch objects of kind PersistentVolume.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeList object
     */
    Observable<V1PersistentVolumeList> listPersistentVolumeAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind PersistentVolume.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolumeList object
     */
    Observable<ServiceResponse<V1PersistentVolumeList>> listPersistentVolumeWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolume object if successful.
     */
    V1PersistentVolume createPersistentVolume(V1PersistentVolume body);

    /**
     * create a PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolume> createPersistentVolumeAsync(V1PersistentVolume body, final ServiceCallback<V1PersistentVolume> serviceCallback);

    /**
     * create a PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<V1PersistentVolume> createPersistentVolumeAsync(V1PersistentVolume body);

    /**
     * create a PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<ServiceResponse<V1PersistentVolume>> createPersistentVolumeWithServiceResponseAsync(V1PersistentVolume body);
    /**
     * create a PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolume object if successful.
     */
    V1PersistentVolume createPersistentVolume(V1PersistentVolume body, String pretty);

    /**
     * create a PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolume> createPersistentVolumeAsync(V1PersistentVolume body, String pretty, final ServiceCallback<V1PersistentVolume> serviceCallback);

    /**
     * create a PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<V1PersistentVolume> createPersistentVolumeAsync(V1PersistentVolume body, String pretty);

    /**
     * create a PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<ServiceResponse<V1PersistentVolume>> createPersistentVolumeWithServiceResponseAsync(V1PersistentVolume body, String pretty);

    /**
     * delete collection of PersistentVolume.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionPersistentVolume();

    /**
     * delete collection of PersistentVolume.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionPersistentVolumeAsync(final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of PersistentVolume.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionPersistentVolumeAsync();

    /**
     * delete collection of PersistentVolume.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionPersistentVolumeWithServiceResponseAsync();
    /**
     * delete collection of PersistentVolume.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionPersistentVolume(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of PersistentVolume.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionPersistentVolumeAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of PersistentVolume.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionPersistentVolumeAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of PersistentVolume.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionPersistentVolumeWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified PersistentVolume.
     *
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolume object if successful.
     */
    V1PersistentVolume readPersistentVolume(String name);

    /**
     * read the specified PersistentVolume.
     *
     * @param name name of the PersistentVolume
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolume> readPersistentVolumeAsync(String name, final ServiceCallback<V1PersistentVolume> serviceCallback);

    /**
     * read the specified PersistentVolume.
     *
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<V1PersistentVolume> readPersistentVolumeAsync(String name);

    /**
     * read the specified PersistentVolume.
     *
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<ServiceResponse<V1PersistentVolume>> readPersistentVolumeWithServiceResponseAsync(String name);
    /**
     * read the specified PersistentVolume.
     *
     * @param name name of the PersistentVolume
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolume object if successful.
     */
    V1PersistentVolume readPersistentVolume(String name, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified PersistentVolume.
     *
     * @param name name of the PersistentVolume
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolume> readPersistentVolumeAsync(String name, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1PersistentVolume> serviceCallback);

    /**
     * read the specified PersistentVolume.
     *
     * @param name name of the PersistentVolume
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<V1PersistentVolume> readPersistentVolumeAsync(String name, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified PersistentVolume.
     *
     * @param name name of the PersistentVolume
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<ServiceResponse<V1PersistentVolume>> readPersistentVolumeWithServiceResponseAsync(String name, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolume object if successful.
     */
    V1PersistentVolume replacePersistentVolume(V1PersistentVolume body, String name);

    /**
     * replace the specified PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param name name of the PersistentVolume
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolume> replacePersistentVolumeAsync(V1PersistentVolume body, String name, final ServiceCallback<V1PersistentVolume> serviceCallback);

    /**
     * replace the specified PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<V1PersistentVolume> replacePersistentVolumeAsync(V1PersistentVolume body, String name);

    /**
     * replace the specified PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<ServiceResponse<V1PersistentVolume>> replacePersistentVolumeWithServiceResponseAsync(V1PersistentVolume body, String name);
    /**
     * replace the specified PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolume object if successful.
     */
    V1PersistentVolume replacePersistentVolume(V1PersistentVolume body, String name, String pretty);

    /**
     * replace the specified PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolume> replacePersistentVolumeAsync(V1PersistentVolume body, String name, String pretty, final ServiceCallback<V1PersistentVolume> serviceCallback);

    /**
     * replace the specified PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<V1PersistentVolume> replacePersistentVolumeAsync(V1PersistentVolume body, String name, String pretty);

    /**
     * replace the specified PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<ServiceResponse<V1PersistentVolume>> replacePersistentVolumeWithServiceResponseAsync(V1PersistentVolume body, String name, String pretty);

    /**
     * delete a PersistentVolume.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deletePersistentVolume(V1DeleteOptions body, String name);

    /**
     * delete a PersistentVolume.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PersistentVolume
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deletePersistentVolumeAsync(V1DeleteOptions body, String name, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a PersistentVolume.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deletePersistentVolumeAsync(V1DeleteOptions body, String name);

    /**
     * delete a PersistentVolume.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deletePersistentVolumeWithServiceResponseAsync(V1DeleteOptions body, String name);
    /**
     * delete a PersistentVolume.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PersistentVolume
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deletePersistentVolume(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a PersistentVolume.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PersistentVolume
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deletePersistentVolumeAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a PersistentVolume.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PersistentVolume
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deletePersistentVolumeAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a PersistentVolume.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PersistentVolume
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deletePersistentVolumeWithServiceResponseAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified PersistentVolume.
     *
     * @param body the Object value
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolume object if successful.
     */
    V1PersistentVolume patchPersistentVolume(Object body, String name);

    /**
     * partially update the specified PersistentVolume.
     *
     * @param body the Object value
     * @param name name of the PersistentVolume
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolume> patchPersistentVolumeAsync(Object body, String name, final ServiceCallback<V1PersistentVolume> serviceCallback);

    /**
     * partially update the specified PersistentVolume.
     *
     * @param body the Object value
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<V1PersistentVolume> patchPersistentVolumeAsync(Object body, String name);

    /**
     * partially update the specified PersistentVolume.
     *
     * @param body the Object value
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<ServiceResponse<V1PersistentVolume>> patchPersistentVolumeWithServiceResponseAsync(Object body, String name);
    /**
     * partially update the specified PersistentVolume.
     *
     * @param body the Object value
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolume object if successful.
     */
    V1PersistentVolume patchPersistentVolume(Object body, String name, String pretty);

    /**
     * partially update the specified PersistentVolume.
     *
     * @param body the Object value
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolume> patchPersistentVolumeAsync(Object body, String name, String pretty, final ServiceCallback<V1PersistentVolume> serviceCallback);

    /**
     * partially update the specified PersistentVolume.
     *
     * @param body the Object value
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<V1PersistentVolume> patchPersistentVolumeAsync(Object body, String name, String pretty);

    /**
     * partially update the specified PersistentVolume.
     *
     * @param body the Object value
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<ServiceResponse<V1PersistentVolume>> patchPersistentVolumeWithServiceResponseAsync(Object body, String name, String pretty);

    /**
     * read status of the specified PersistentVolume.
     *
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolume object if successful.
     */
    V1PersistentVolume readPersistentVolumeStatus(String name);

    /**
     * read status of the specified PersistentVolume.
     *
     * @param name name of the PersistentVolume
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolume> readPersistentVolumeStatusAsync(String name, final ServiceCallback<V1PersistentVolume> serviceCallback);

    /**
     * read status of the specified PersistentVolume.
     *
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<V1PersistentVolume> readPersistentVolumeStatusAsync(String name);

    /**
     * read status of the specified PersistentVolume.
     *
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<ServiceResponse<V1PersistentVolume>> readPersistentVolumeStatusWithServiceResponseAsync(String name);
    /**
     * read status of the specified PersistentVolume.
     *
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolume object if successful.
     */
    V1PersistentVolume readPersistentVolumeStatus(String name, String pretty);

    /**
     * read status of the specified PersistentVolume.
     *
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolume> readPersistentVolumeStatusAsync(String name, String pretty, final ServiceCallback<V1PersistentVolume> serviceCallback);

    /**
     * read status of the specified PersistentVolume.
     *
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<V1PersistentVolume> readPersistentVolumeStatusAsync(String name, String pretty);

    /**
     * read status of the specified PersistentVolume.
     *
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<ServiceResponse<V1PersistentVolume>> readPersistentVolumeStatusWithServiceResponseAsync(String name, String pretty);

    /**
     * replace status of the specified PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolume object if successful.
     */
    V1PersistentVolume replacePersistentVolumeStatus(V1PersistentVolume body, String name);

    /**
     * replace status of the specified PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param name name of the PersistentVolume
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolume> replacePersistentVolumeStatusAsync(V1PersistentVolume body, String name, final ServiceCallback<V1PersistentVolume> serviceCallback);

    /**
     * replace status of the specified PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<V1PersistentVolume> replacePersistentVolumeStatusAsync(V1PersistentVolume body, String name);

    /**
     * replace status of the specified PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<ServiceResponse<V1PersistentVolume>> replacePersistentVolumeStatusWithServiceResponseAsync(V1PersistentVolume body, String name);
    /**
     * replace status of the specified PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolume object if successful.
     */
    V1PersistentVolume replacePersistentVolumeStatus(V1PersistentVolume body, String name, String pretty);

    /**
     * replace status of the specified PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolume> replacePersistentVolumeStatusAsync(V1PersistentVolume body, String name, String pretty, final ServiceCallback<V1PersistentVolume> serviceCallback);

    /**
     * replace status of the specified PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<V1PersistentVolume> replacePersistentVolumeStatusAsync(V1PersistentVolume body, String name, String pretty);

    /**
     * replace status of the specified PersistentVolume.
     *
     * @param body the V1PersistentVolume value
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<ServiceResponse<V1PersistentVolume>> replacePersistentVolumeStatusWithServiceResponseAsync(V1PersistentVolume body, String name, String pretty);

    /**
     * partially update status of the specified PersistentVolume.
     *
     * @param body the Object value
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolume object if successful.
     */
    V1PersistentVolume patchPersistentVolumeStatus(Object body, String name);

    /**
     * partially update status of the specified PersistentVolume.
     *
     * @param body the Object value
     * @param name name of the PersistentVolume
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolume> patchPersistentVolumeStatusAsync(Object body, String name, final ServiceCallback<V1PersistentVolume> serviceCallback);

    /**
     * partially update status of the specified PersistentVolume.
     *
     * @param body the Object value
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<V1PersistentVolume> patchPersistentVolumeStatusAsync(Object body, String name);

    /**
     * partially update status of the specified PersistentVolume.
     *
     * @param body the Object value
     * @param name name of the PersistentVolume
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<ServiceResponse<V1PersistentVolume>> patchPersistentVolumeStatusWithServiceResponseAsync(Object body, String name);
    /**
     * partially update status of the specified PersistentVolume.
     *
     * @param body the Object value
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PersistentVolume object if successful.
     */
    V1PersistentVolume patchPersistentVolumeStatus(Object body, String name, String pretty);

    /**
     * partially update status of the specified PersistentVolume.
     *
     * @param body the Object value
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PersistentVolume> patchPersistentVolumeStatusAsync(Object body, String name, String pretty, final ServiceCallback<V1PersistentVolume> serviceCallback);

    /**
     * partially update status of the specified PersistentVolume.
     *
     * @param body the Object value
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<V1PersistentVolume> patchPersistentVolumeStatusAsync(Object body, String name, String pretty);

    /**
     * partially update status of the specified PersistentVolume.
     *
     * @param body the Object value
     * @param name name of the PersistentVolume
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PersistentVolume object
     */
    Observable<ServiceResponse<V1PersistentVolume>> patchPersistentVolumeStatusWithServiceResponseAsync(Object body, String name, String pretty);

    /**
     * list or watch objects of kind Pod.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PodList object if successful.
     */
    V1PodList listPodForAllNamespaces();

    /**
     * list or watch objects of kind Pod.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PodList> listPodForAllNamespacesAsync(final ServiceCallback<V1PodList> serviceCallback);

    /**
     * list or watch objects of kind Pod.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodList object
     */
    Observable<V1PodList> listPodForAllNamespacesAsync();

    /**
     * list or watch objects of kind Pod.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodList object
     */
    Observable<ServiceResponse<V1PodList>> listPodForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind Pod.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PodList object if successful.
     */
    V1PodList listPodForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Pod.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PodList> listPodForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1PodList> serviceCallback);

    /**
     * list or watch objects of kind Pod.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodList object
     */
    Observable<V1PodList> listPodForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Pod.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodList object
     */
    Observable<ServiceResponse<V1PodList>> listPodForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind PodTemplate.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PodTemplateList object if successful.
     */
    V1PodTemplateList listPodTemplateForAllNamespaces();

    /**
     * list or watch objects of kind PodTemplate.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PodTemplateList> listPodTemplateForAllNamespacesAsync(final ServiceCallback<V1PodTemplateList> serviceCallback);

    /**
     * list or watch objects of kind PodTemplate.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplateList object
     */
    Observable<V1PodTemplateList> listPodTemplateForAllNamespacesAsync();

    /**
     * list or watch objects of kind PodTemplate.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplateList object
     */
    Observable<ServiceResponse<V1PodTemplateList>> listPodTemplateForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind PodTemplate.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1PodTemplateList object if successful.
     */
    V1PodTemplateList listPodTemplateForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind PodTemplate.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1PodTemplateList> listPodTemplateForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1PodTemplateList> serviceCallback);

    /**
     * list or watch objects of kind PodTemplate.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplateList object
     */
    Observable<V1PodTemplateList> listPodTemplateForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind PodTemplate.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1PodTemplateList object
     */
    Observable<ServiceResponse<V1PodTemplateList>> listPodTemplateForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * proxy GET requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyGETNamespacedPod(String name, String namespace);

    /**
     * proxy GET requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyGETNamespacedPodAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * proxy GET requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyGETNamespacedPodAsync(String name, String namespace);

    /**
     * proxy GET requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyGETNamespacedPodWithServiceResponseAsync(String name, String namespace);

    /**
     * proxy PUT requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPUTNamespacedPod(String name, String namespace);

    /**
     * proxy PUT requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPUTNamespacedPodAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * proxy PUT requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPUTNamespacedPodAsync(String name, String namespace);

    /**
     * proxy PUT requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPUTNamespacedPodWithServiceResponseAsync(String name, String namespace);

    /**
     * proxy POST requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPOSTNamespacedPod(String name, String namespace);

    /**
     * proxy POST requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPOSTNamespacedPodAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * proxy POST requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPOSTNamespacedPodAsync(String name, String namespace);

    /**
     * proxy POST requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPOSTNamespacedPodWithServiceResponseAsync(String name, String namespace);

    /**
     * proxy DELETE requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyDELETENamespacedPod(String name, String namespace);

    /**
     * proxy DELETE requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyDELETENamespacedPodAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * proxy DELETE requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyDELETENamespacedPodAsync(String name, String namespace);

    /**
     * proxy DELETE requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyDELETENamespacedPodWithServiceResponseAsync(String name, String namespace);

    /**
     * proxy HEAD requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyHEADNamespacedPod(String name, String namespace);

    /**
     * proxy HEAD requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyHEADNamespacedPodAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * proxy HEAD requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyHEADNamespacedPodAsync(String name, String namespace);

    /**
     * proxy HEAD requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyHEADNamespacedPodWithServiceResponseAsync(String name, String namespace);

    /**
     * proxy PATCH requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPATCHNamespacedPod(String name, String namespace);

    /**
     * proxy PATCH requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPATCHNamespacedPodAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * proxy PATCH requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPATCHNamespacedPodAsync(String name, String namespace);

    /**
     * proxy PATCH requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPATCHNamespacedPodWithServiceResponseAsync(String name, String namespace);

    /**
     * proxy GET requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyGETNamespacedPodWithPath(String name, String namespace, String path);

    /**
     * proxy GET requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyGETNamespacedPodWithPathAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy GET requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyGETNamespacedPodWithPathAsync(String name, String namespace, String path);

    /**
     * proxy GET requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyGETNamespacedPodWithPathWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * proxy PUT requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPUTNamespacedPodWithPath(String name, String namespace, String path);

    /**
     * proxy PUT requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPUTNamespacedPodWithPathAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy PUT requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPUTNamespacedPodWithPathAsync(String name, String namespace, String path);

    /**
     * proxy PUT requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPUTNamespacedPodWithPathWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * proxy POST requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPOSTNamespacedPodWithPath(String name, String namespace, String path);

    /**
     * proxy POST requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPOSTNamespacedPodWithPathAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy POST requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPOSTNamespacedPodWithPathAsync(String name, String namespace, String path);

    /**
     * proxy POST requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPOSTNamespacedPodWithPathWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * proxy DELETE requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyDELETENamespacedPodWithPath(String name, String namespace, String path);

    /**
     * proxy DELETE requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyDELETENamespacedPodWithPathAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy DELETE requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyDELETENamespacedPodWithPathAsync(String name, String namespace, String path);

    /**
     * proxy DELETE requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyDELETENamespacedPodWithPathWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * proxy HEAD requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyHEADNamespacedPodWithPath(String name, String namespace, String path);

    /**
     * proxy HEAD requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyHEADNamespacedPodWithPathAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy HEAD requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyHEADNamespacedPodWithPathAsync(String name, String namespace, String path);

    /**
     * proxy HEAD requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyHEADNamespacedPodWithPathWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * proxy PATCH requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPATCHNamespacedPodWithPath(String name, String namespace, String path);

    /**
     * proxy PATCH requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPATCHNamespacedPodWithPathAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy PATCH requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPATCHNamespacedPodWithPathAsync(String name, String namespace, String path);

    /**
     * proxy PATCH requests to Pod.
     *
     * @param name name of the Pod
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPATCHNamespacedPodWithPathWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * proxy GET requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyGETNamespacedService(String name, String namespace);

    /**
     * proxy GET requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyGETNamespacedServiceAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * proxy GET requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyGETNamespacedServiceAsync(String name, String namespace);

    /**
     * proxy GET requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyGETNamespacedServiceWithServiceResponseAsync(String name, String namespace);

    /**
     * proxy PUT requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPUTNamespacedService(String name, String namespace);

    /**
     * proxy PUT requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPUTNamespacedServiceAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * proxy PUT requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPUTNamespacedServiceAsync(String name, String namespace);

    /**
     * proxy PUT requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPUTNamespacedServiceWithServiceResponseAsync(String name, String namespace);

    /**
     * proxy POST requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPOSTNamespacedService(String name, String namespace);

    /**
     * proxy POST requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPOSTNamespacedServiceAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * proxy POST requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPOSTNamespacedServiceAsync(String name, String namespace);

    /**
     * proxy POST requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPOSTNamespacedServiceWithServiceResponseAsync(String name, String namespace);

    /**
     * proxy DELETE requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyDELETENamespacedService(String name, String namespace);

    /**
     * proxy DELETE requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyDELETENamespacedServiceAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * proxy DELETE requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyDELETENamespacedServiceAsync(String name, String namespace);

    /**
     * proxy DELETE requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyDELETENamespacedServiceWithServiceResponseAsync(String name, String namespace);

    /**
     * proxy HEAD requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyHEADNamespacedService(String name, String namespace);

    /**
     * proxy HEAD requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyHEADNamespacedServiceAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * proxy HEAD requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyHEADNamespacedServiceAsync(String name, String namespace);

    /**
     * proxy HEAD requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyHEADNamespacedServiceWithServiceResponseAsync(String name, String namespace);

    /**
     * proxy PATCH requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPATCHNamespacedService(String name, String namespace);

    /**
     * proxy PATCH requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPATCHNamespacedServiceAsync(String name, String namespace, final ServiceCallback<String> serviceCallback);

    /**
     * proxy PATCH requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPATCHNamespacedServiceAsync(String name, String namespace);

    /**
     * proxy PATCH requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPATCHNamespacedServiceWithServiceResponseAsync(String name, String namespace);

    /**
     * proxy GET requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyGETNamespacedServiceWithPath(String name, String namespace, String path);

    /**
     * proxy GET requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyGETNamespacedServiceWithPathAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy GET requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyGETNamespacedServiceWithPathAsync(String name, String namespace, String path);

    /**
     * proxy GET requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyGETNamespacedServiceWithPathWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * proxy PUT requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPUTNamespacedServiceWithPath(String name, String namespace, String path);

    /**
     * proxy PUT requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPUTNamespacedServiceWithPathAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy PUT requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPUTNamespacedServiceWithPathAsync(String name, String namespace, String path);

    /**
     * proxy PUT requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPUTNamespacedServiceWithPathWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * proxy POST requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPOSTNamespacedServiceWithPath(String name, String namespace, String path);

    /**
     * proxy POST requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPOSTNamespacedServiceWithPathAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy POST requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPOSTNamespacedServiceWithPathAsync(String name, String namespace, String path);

    /**
     * proxy POST requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPOSTNamespacedServiceWithPathWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * proxy DELETE requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyDELETENamespacedServiceWithPath(String name, String namespace, String path);

    /**
     * proxy DELETE requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyDELETENamespacedServiceWithPathAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy DELETE requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyDELETENamespacedServiceWithPathAsync(String name, String namespace, String path);

    /**
     * proxy DELETE requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyDELETENamespacedServiceWithPathWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * proxy HEAD requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyHEADNamespacedServiceWithPath(String name, String namespace, String path);

    /**
     * proxy HEAD requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyHEADNamespacedServiceWithPathAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy HEAD requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyHEADNamespacedServiceWithPathAsync(String name, String namespace, String path);

    /**
     * proxy HEAD requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyHEADNamespacedServiceWithPathWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * proxy PATCH requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPATCHNamespacedServiceWithPath(String name, String namespace, String path);

    /**
     * proxy PATCH requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPATCHNamespacedServiceWithPathAsync(String name, String namespace, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy PATCH requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPATCHNamespacedServiceWithPathAsync(String name, String namespace, String path);

    /**
     * proxy PATCH requests to Service.
     *
     * @param name name of the Service
     * @param namespace object name and auth scope, such as for teams and projects
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPATCHNamespacedServiceWithPathWithServiceResponseAsync(String name, String namespace, String path);

    /**
     * proxy GET requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyGETNode(String name);

    /**
     * proxy GET requests to Node.
     *
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyGETNodeAsync(String name, final ServiceCallback<String> serviceCallback);

    /**
     * proxy GET requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyGETNodeAsync(String name);

    /**
     * proxy GET requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyGETNodeWithServiceResponseAsync(String name);

    /**
     * proxy PUT requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPUTNode(String name);

    /**
     * proxy PUT requests to Node.
     *
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPUTNodeAsync(String name, final ServiceCallback<String> serviceCallback);

    /**
     * proxy PUT requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPUTNodeAsync(String name);

    /**
     * proxy PUT requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPUTNodeWithServiceResponseAsync(String name);

    /**
     * proxy POST requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPOSTNode(String name);

    /**
     * proxy POST requests to Node.
     *
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPOSTNodeAsync(String name, final ServiceCallback<String> serviceCallback);

    /**
     * proxy POST requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPOSTNodeAsync(String name);

    /**
     * proxy POST requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPOSTNodeWithServiceResponseAsync(String name);

    /**
     * proxy DELETE requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyDELETENode(String name);

    /**
     * proxy DELETE requests to Node.
     *
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyDELETENodeAsync(String name, final ServiceCallback<String> serviceCallback);

    /**
     * proxy DELETE requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyDELETENodeAsync(String name);

    /**
     * proxy DELETE requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyDELETENodeWithServiceResponseAsync(String name);

    /**
     * proxy HEAD requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyHEADNode(String name);

    /**
     * proxy HEAD requests to Node.
     *
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyHEADNodeAsync(String name, final ServiceCallback<String> serviceCallback);

    /**
     * proxy HEAD requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyHEADNodeAsync(String name);

    /**
     * proxy HEAD requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyHEADNodeWithServiceResponseAsync(String name);

    /**
     * proxy PATCH requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPATCHNode(String name);

    /**
     * proxy PATCH requests to Node.
     *
     * @param name name of the Node
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPATCHNodeAsync(String name, final ServiceCallback<String> serviceCallback);

    /**
     * proxy PATCH requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPATCHNodeAsync(String name);

    /**
     * proxy PATCH requests to Node.
     *
     * @param name name of the Node
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPATCHNodeWithServiceResponseAsync(String name);

    /**
     * proxy GET requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyGETNodeWithPath(String name, String path);

    /**
     * proxy GET requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyGETNodeWithPathAsync(String name, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy GET requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyGETNodeWithPathAsync(String name, String path);

    /**
     * proxy GET requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyGETNodeWithPathWithServiceResponseAsync(String name, String path);

    /**
     * proxy PUT requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPUTNodeWithPath(String name, String path);

    /**
     * proxy PUT requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPUTNodeWithPathAsync(String name, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy PUT requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPUTNodeWithPathAsync(String name, String path);

    /**
     * proxy PUT requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPUTNodeWithPathWithServiceResponseAsync(String name, String path);

    /**
     * proxy POST requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPOSTNodeWithPath(String name, String path);

    /**
     * proxy POST requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPOSTNodeWithPathAsync(String name, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy POST requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPOSTNodeWithPathAsync(String name, String path);

    /**
     * proxy POST requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPOSTNodeWithPathWithServiceResponseAsync(String name, String path);

    /**
     * proxy DELETE requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyDELETENodeWithPath(String name, String path);

    /**
     * proxy DELETE requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyDELETENodeWithPathAsync(String name, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy DELETE requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyDELETENodeWithPathAsync(String name, String path);

    /**
     * proxy DELETE requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyDELETENodeWithPathWithServiceResponseAsync(String name, String path);

    /**
     * proxy HEAD requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyHEADNodeWithPath(String name, String path);

    /**
     * proxy HEAD requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyHEADNodeWithPathAsync(String name, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy HEAD requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyHEADNodeWithPathAsync(String name, String path);

    /**
     * proxy HEAD requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyHEADNodeWithPathWithServiceResponseAsync(String name, String path);

    /**
     * proxy PATCH requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String proxyPATCHNodeWithPath(String name, String path);

    /**
     * proxy PATCH requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> proxyPATCHNodeWithPathAsync(String name, String path, final ServiceCallback<String> serviceCallback);

    /**
     * proxy PATCH requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> proxyPATCHNodeWithPathAsync(String name, String path);

    /**
     * proxy PATCH requests to Node.
     *
     * @param name name of the Node
     * @param path path to the resource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> proxyPATCHNodeWithPathWithServiceResponseAsync(String name, String path);

    /**
     * list or watch objects of kind ReplicationController.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationControllerList object if successful.
     */
    V1ReplicationControllerList listReplicationControllerForAllNamespaces();

    /**
     * list or watch objects of kind ReplicationController.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationControllerList> listReplicationControllerForAllNamespacesAsync(final ServiceCallback<V1ReplicationControllerList> serviceCallback);

    /**
     * list or watch objects of kind ReplicationController.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationControllerList object
     */
    Observable<V1ReplicationControllerList> listReplicationControllerForAllNamespacesAsync();

    /**
     * list or watch objects of kind ReplicationController.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationControllerList object
     */
    Observable<ServiceResponse<V1ReplicationControllerList>> listReplicationControllerForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind ReplicationController.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ReplicationControllerList object if successful.
     */
    V1ReplicationControllerList listReplicationControllerForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind ReplicationController.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ReplicationControllerList> listReplicationControllerForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1ReplicationControllerList> serviceCallback);

    /**
     * list or watch objects of kind ReplicationController.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationControllerList object
     */
    Observable<V1ReplicationControllerList> listReplicationControllerForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind ReplicationController.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ReplicationControllerList object
     */
    Observable<ServiceResponse<V1ReplicationControllerList>> listReplicationControllerForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind ResourceQuota.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuotaList object if successful.
     */
    V1ResourceQuotaList listResourceQuotaForAllNamespaces();

    /**
     * list or watch objects of kind ResourceQuota.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuotaList> listResourceQuotaForAllNamespacesAsync(final ServiceCallback<V1ResourceQuotaList> serviceCallback);

    /**
     * list or watch objects of kind ResourceQuota.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuotaList object
     */
    Observable<V1ResourceQuotaList> listResourceQuotaForAllNamespacesAsync();

    /**
     * list or watch objects of kind ResourceQuota.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuotaList object
     */
    Observable<ServiceResponse<V1ResourceQuotaList>> listResourceQuotaForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind ResourceQuota.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ResourceQuotaList object if successful.
     */
    V1ResourceQuotaList listResourceQuotaForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind ResourceQuota.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ResourceQuotaList> listResourceQuotaForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1ResourceQuotaList> serviceCallback);

    /**
     * list or watch objects of kind ResourceQuota.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuotaList object
     */
    Observable<V1ResourceQuotaList> listResourceQuotaForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind ResourceQuota.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ResourceQuotaList object
     */
    Observable<ServiceResponse<V1ResourceQuotaList>> listResourceQuotaForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Secret.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1SecretList object if successful.
     */
    V1SecretList listSecretForAllNamespaces();

    /**
     * list or watch objects of kind Secret.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1SecretList> listSecretForAllNamespacesAsync(final ServiceCallback<V1SecretList> serviceCallback);

    /**
     * list or watch objects of kind Secret.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1SecretList object
     */
    Observable<V1SecretList> listSecretForAllNamespacesAsync();

    /**
     * list or watch objects of kind Secret.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1SecretList object
     */
    Observable<ServiceResponse<V1SecretList>> listSecretForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind Secret.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1SecretList object if successful.
     */
    V1SecretList listSecretForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Secret.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1SecretList> listSecretForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1SecretList> serviceCallback);

    /**
     * list or watch objects of kind Secret.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1SecretList object
     */
    Observable<V1SecretList> listSecretForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Secret.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1SecretList object
     */
    Observable<ServiceResponse<V1SecretList>> listSecretForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind ServiceAccount.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ServiceAccountList object if successful.
     */
    V1ServiceAccountList listServiceAccountForAllNamespaces();

    /**
     * list or watch objects of kind ServiceAccount.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ServiceAccountList> listServiceAccountForAllNamespacesAsync(final ServiceCallback<V1ServiceAccountList> serviceCallback);

    /**
     * list or watch objects of kind ServiceAccount.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccountList object
     */
    Observable<V1ServiceAccountList> listServiceAccountForAllNamespacesAsync();

    /**
     * list or watch objects of kind ServiceAccount.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccountList object
     */
    Observable<ServiceResponse<V1ServiceAccountList>> listServiceAccountForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind ServiceAccount.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ServiceAccountList object if successful.
     */
    V1ServiceAccountList listServiceAccountForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind ServiceAccount.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ServiceAccountList> listServiceAccountForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1ServiceAccountList> serviceCallback);

    /**
     * list or watch objects of kind ServiceAccount.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccountList object
     */
    Observable<V1ServiceAccountList> listServiceAccountForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind ServiceAccount.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceAccountList object
     */
    Observable<ServiceResponse<V1ServiceAccountList>> listServiceAccountForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Service.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ServiceList object if successful.
     */
    V1ServiceList listServiceForAllNamespaces();

    /**
     * list or watch objects of kind Service.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ServiceList> listServiceForAllNamespacesAsync(final ServiceCallback<V1ServiceList> serviceCallback);

    /**
     * list or watch objects of kind Service.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceList object
     */
    Observable<V1ServiceList> listServiceForAllNamespacesAsync();

    /**
     * list or watch objects of kind Service.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceList object
     */
    Observable<ServiceResponse<V1ServiceList>> listServiceForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind Service.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1ServiceList object if successful.
     */
    V1ServiceList listServiceForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Service.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1ServiceList> listServiceForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1ServiceList> serviceCallback);

    /**
     * list or watch objects of kind Service.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceList object
     */
    Observable<V1ServiceList> listServiceForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Service.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1ServiceList object
     */
    Observable<ServiceResponse<V1ServiceList>> listServiceForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * get available API versions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIGroupList object if successful.
     */
    V1APIGroupList getAPIVersions1();

    /**
     * get available API versions.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIGroupList> getAPIVersions1Async(final ServiceCallback<V1APIGroupList> serviceCallback);

    /**
     * get available API versions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroupList object
     */
    Observable<V1APIGroupList> getAPIVersions1Async();

    /**
     * get available API versions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroupList object
     */
    Observable<ServiceResponse<V1APIGroupList>> getAPIVersions1WithServiceResponseAsync();

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIGroup object if successful.
     */
    V1APIGroup getAPIGroup();

    /**
     * get information of a group.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIGroup> getAPIGroupAsync(final ServiceCallback<V1APIGroup> serviceCallback);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<V1APIGroup> getAPIGroupAsync();

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<ServiceResponse<V1APIGroup>> getAPIGroupWithServiceResponseAsync();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources1();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources1Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources1Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources1WithServiceResponseAsync();

    /**
     * list or watch objects of kind Deployment.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1DeploymentList object if successful.
     */
    Appsv1beta1DeploymentList listDeploymentForAllNamespaces();

    /**
     * list or watch objects of kind Deployment.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1DeploymentList> listDeploymentForAllNamespacesAsync(final ServiceCallback<Appsv1beta1DeploymentList> serviceCallback);

    /**
     * list or watch objects of kind Deployment.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1DeploymentList object
     */
    Observable<Appsv1beta1DeploymentList> listDeploymentForAllNamespacesAsync();

    /**
     * list or watch objects of kind Deployment.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1DeploymentList object
     */
    Observable<ServiceResponse<Appsv1beta1DeploymentList>> listDeploymentForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind Deployment.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1DeploymentList object if successful.
     */
    Appsv1beta1DeploymentList listDeploymentForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1DeploymentList> listDeploymentForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<Appsv1beta1DeploymentList> serviceCallback);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1DeploymentList object
     */
    Observable<Appsv1beta1DeploymentList> listDeploymentForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1DeploymentList object
     */
    Observable<ServiceResponse<Appsv1beta1DeploymentList>> listDeploymentForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1DeploymentList object if successful.
     */
    Appsv1beta1DeploymentList listNamespacedDeployment(String namespace);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1DeploymentList> listNamespacedDeploymentAsync(String namespace, final ServiceCallback<Appsv1beta1DeploymentList> serviceCallback);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1DeploymentList object
     */
    Observable<Appsv1beta1DeploymentList> listNamespacedDeploymentAsync(String namespace);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1DeploymentList object
     */
    Observable<ServiceResponse<Appsv1beta1DeploymentList>> listNamespacedDeploymentWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1DeploymentList object if successful.
     */
    Appsv1beta1DeploymentList listNamespacedDeployment(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1DeploymentList> listNamespacedDeploymentAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<Appsv1beta1DeploymentList> serviceCallback);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1DeploymentList object
     */
    Observable<Appsv1beta1DeploymentList> listNamespacedDeploymentAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1DeploymentList object
     */
    Observable<ServiceResponse<Appsv1beta1DeploymentList>> listNamespacedDeploymentWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Deployment object if successful.
     */
    Appsv1beta1Deployment createNamespacedDeployment(Appsv1beta1Deployment body, String namespace);

    /**
     * create a Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Deployment> createNamespacedDeploymentAsync(Appsv1beta1Deployment body, String namespace, final ServiceCallback<Appsv1beta1Deployment> serviceCallback);

    /**
     * create a Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<Appsv1beta1Deployment> createNamespacedDeploymentAsync(Appsv1beta1Deployment body, String namespace);

    /**
     * create a Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<ServiceResponse<Appsv1beta1Deployment>> createNamespacedDeploymentWithServiceResponseAsync(Appsv1beta1Deployment body, String namespace);
    /**
     * create a Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Deployment object if successful.
     */
    Appsv1beta1Deployment createNamespacedDeployment(Appsv1beta1Deployment body, String namespace, String pretty);

    /**
     * create a Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Deployment> createNamespacedDeploymentAsync(Appsv1beta1Deployment body, String namespace, String pretty, final ServiceCallback<Appsv1beta1Deployment> serviceCallback);

    /**
     * create a Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<Appsv1beta1Deployment> createNamespacedDeploymentAsync(Appsv1beta1Deployment body, String namespace, String pretty);

    /**
     * create a Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<ServiceResponse<Appsv1beta1Deployment>> createNamespacedDeploymentWithServiceResponseAsync(Appsv1beta1Deployment body, String namespace, String pretty);

    /**
     * delete collection of Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedDeployment(String namespace);

    /**
     * delete collection of Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedDeploymentAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedDeploymentAsync(String namespace);

    /**
     * delete collection of Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedDeploymentWithServiceResponseAsync(String namespace);
    /**
     * delete collection of Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedDeployment(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedDeploymentAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedDeploymentAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedDeploymentWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Deployment object if successful.
     */
    Appsv1beta1Deployment readNamespacedDeployment(String name, String namespace);

    /**
     * read the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Deployment> readNamespacedDeploymentAsync(String name, String namespace, final ServiceCallback<Appsv1beta1Deployment> serviceCallback);

    /**
     * read the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<Appsv1beta1Deployment> readNamespacedDeploymentAsync(String name, String namespace);

    /**
     * read the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<ServiceResponse<Appsv1beta1Deployment>> readNamespacedDeploymentWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Deployment object if successful.
     */
    Appsv1beta1Deployment readNamespacedDeployment(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Deployment> readNamespacedDeploymentAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<Appsv1beta1Deployment> serviceCallback);

    /**
     * read the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<Appsv1beta1Deployment> readNamespacedDeploymentAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<ServiceResponse<Appsv1beta1Deployment>> readNamespacedDeploymentWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Deployment object if successful.
     */
    Appsv1beta1Deployment replaceNamespacedDeployment(Appsv1beta1Deployment body, String name, String namespace);

    /**
     * replace the specified Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Deployment> replaceNamespacedDeploymentAsync(Appsv1beta1Deployment body, String name, String namespace, final ServiceCallback<Appsv1beta1Deployment> serviceCallback);

    /**
     * replace the specified Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<Appsv1beta1Deployment> replaceNamespacedDeploymentAsync(Appsv1beta1Deployment body, String name, String namespace);

    /**
     * replace the specified Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<ServiceResponse<Appsv1beta1Deployment>> replaceNamespacedDeploymentWithServiceResponseAsync(Appsv1beta1Deployment body, String name, String namespace);
    /**
     * replace the specified Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Deployment object if successful.
     */
    Appsv1beta1Deployment replaceNamespacedDeployment(Appsv1beta1Deployment body, String name, String namespace, String pretty);

    /**
     * replace the specified Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Deployment> replaceNamespacedDeploymentAsync(Appsv1beta1Deployment body, String name, String namespace, String pretty, final ServiceCallback<Appsv1beta1Deployment> serviceCallback);

    /**
     * replace the specified Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<Appsv1beta1Deployment> replaceNamespacedDeploymentAsync(Appsv1beta1Deployment body, String name, String namespace, String pretty);

    /**
     * replace the specified Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<ServiceResponse<Appsv1beta1Deployment>> replaceNamespacedDeploymentWithServiceResponseAsync(Appsv1beta1Deployment body, String name, String namespace, String pretty);

    /**
     * delete a Deployment.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedDeployment(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a Deployment.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedDeploymentAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Deployment.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedDeploymentAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a Deployment.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedDeploymentWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a Deployment.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedDeployment(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Deployment.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedDeploymentAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Deployment.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedDeploymentAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Deployment.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedDeploymentWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Deployment object if successful.
     */
    Appsv1beta1Deployment patchNamespacedDeployment(Object body, String name, String namespace);

    /**
     * partially update the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Deployment> patchNamespacedDeploymentAsync(Object body, String name, String namespace, final ServiceCallback<Appsv1beta1Deployment> serviceCallback);

    /**
     * partially update the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<Appsv1beta1Deployment> patchNamespacedDeploymentAsync(Object body, String name, String namespace);

    /**
     * partially update the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<ServiceResponse<Appsv1beta1Deployment>> patchNamespacedDeploymentWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Deployment object if successful.
     */
    Appsv1beta1Deployment patchNamespacedDeployment(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Deployment> patchNamespacedDeploymentAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<Appsv1beta1Deployment> serviceCallback);

    /**
     * partially update the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<Appsv1beta1Deployment> patchNamespacedDeploymentAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<ServiceResponse<Appsv1beta1Deployment>> patchNamespacedDeploymentWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * create rollback of a DeploymentRollback.
     *
     * @param body the Appsv1beta1DeploymentRollback value
     * @param name name of the DeploymentRollback
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1DeploymentRollback object if successful.
     */
    Appsv1beta1DeploymentRollback createNamespacedDeploymentRollbackRollback(Appsv1beta1DeploymentRollback body, String name, String namespace);

    /**
     * create rollback of a DeploymentRollback.
     *
     * @param body the Appsv1beta1DeploymentRollback value
     * @param name name of the DeploymentRollback
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1DeploymentRollback> createNamespacedDeploymentRollbackRollbackAsync(Appsv1beta1DeploymentRollback body, String name, String namespace, final ServiceCallback<Appsv1beta1DeploymentRollback> serviceCallback);

    /**
     * create rollback of a DeploymentRollback.
     *
     * @param body the Appsv1beta1DeploymentRollback value
     * @param name name of the DeploymentRollback
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1DeploymentRollback object
     */
    Observable<Appsv1beta1DeploymentRollback> createNamespacedDeploymentRollbackRollbackAsync(Appsv1beta1DeploymentRollback body, String name, String namespace);

    /**
     * create rollback of a DeploymentRollback.
     *
     * @param body the Appsv1beta1DeploymentRollback value
     * @param name name of the DeploymentRollback
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1DeploymentRollback object
     */
    Observable<ServiceResponse<Appsv1beta1DeploymentRollback>> createNamespacedDeploymentRollbackRollbackWithServiceResponseAsync(Appsv1beta1DeploymentRollback body, String name, String namespace);
    /**
     * create rollback of a DeploymentRollback.
     *
     * @param body the Appsv1beta1DeploymentRollback value
     * @param name name of the DeploymentRollback
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1DeploymentRollback object if successful.
     */
    Appsv1beta1DeploymentRollback createNamespacedDeploymentRollbackRollback(Appsv1beta1DeploymentRollback body, String name, String namespace, String pretty);

    /**
     * create rollback of a DeploymentRollback.
     *
     * @param body the Appsv1beta1DeploymentRollback value
     * @param name name of the DeploymentRollback
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1DeploymentRollback> createNamespacedDeploymentRollbackRollbackAsync(Appsv1beta1DeploymentRollback body, String name, String namespace, String pretty, final ServiceCallback<Appsv1beta1DeploymentRollback> serviceCallback);

    /**
     * create rollback of a DeploymentRollback.
     *
     * @param body the Appsv1beta1DeploymentRollback value
     * @param name name of the DeploymentRollback
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1DeploymentRollback object
     */
    Observable<Appsv1beta1DeploymentRollback> createNamespacedDeploymentRollbackRollbackAsync(Appsv1beta1DeploymentRollback body, String name, String namespace, String pretty);

    /**
     * create rollback of a DeploymentRollback.
     *
     * @param body the Appsv1beta1DeploymentRollback value
     * @param name name of the DeploymentRollback
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1DeploymentRollback object
     */
    Observable<ServiceResponse<Appsv1beta1DeploymentRollback>> createNamespacedDeploymentRollbackRollbackWithServiceResponseAsync(Appsv1beta1DeploymentRollback body, String name, String namespace, String pretty);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Scale object if successful.
     */
    Appsv1beta1Scale readNamespacedScaleScale1(String name, String namespace);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Scale> readNamespacedScaleScale1Async(String name, String namespace, final ServiceCallback<Appsv1beta1Scale> serviceCallback);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Scale object
     */
    Observable<Appsv1beta1Scale> readNamespacedScaleScale1Async(String name, String namespace);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Scale object
     */
    Observable<ServiceResponse<Appsv1beta1Scale>> readNamespacedScaleScale1WithServiceResponseAsync(String name, String namespace);
    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Scale object if successful.
     */
    Appsv1beta1Scale readNamespacedScaleScale1(String name, String namespace, String pretty);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Scale> readNamespacedScaleScale1Async(String name, String namespace, String pretty, final ServiceCallback<Appsv1beta1Scale> serviceCallback);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Scale object
     */
    Observable<Appsv1beta1Scale> readNamespacedScaleScale1Async(String name, String namespace, String pretty);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Scale object
     */
    Observable<ServiceResponse<Appsv1beta1Scale>> readNamespacedScaleScale1WithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Appsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Scale object if successful.
     */
    Appsv1beta1Scale replaceNamespacedScaleScale1(Appsv1beta1Scale body, String name, String namespace);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Appsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Scale> replaceNamespacedScaleScale1Async(Appsv1beta1Scale body, String name, String namespace, final ServiceCallback<Appsv1beta1Scale> serviceCallback);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Appsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Scale object
     */
    Observable<Appsv1beta1Scale> replaceNamespacedScaleScale1Async(Appsv1beta1Scale body, String name, String namespace);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Appsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Scale object
     */
    Observable<ServiceResponse<Appsv1beta1Scale>> replaceNamespacedScaleScale1WithServiceResponseAsync(Appsv1beta1Scale body, String name, String namespace);
    /**
     * replace scale of the specified Scale.
     *
     * @param body the Appsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Scale object if successful.
     */
    Appsv1beta1Scale replaceNamespacedScaleScale1(Appsv1beta1Scale body, String name, String namespace, String pretty);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Appsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Scale> replaceNamespacedScaleScale1Async(Appsv1beta1Scale body, String name, String namespace, String pretty, final ServiceCallback<Appsv1beta1Scale> serviceCallback);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Appsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Scale object
     */
    Observable<Appsv1beta1Scale> replaceNamespacedScaleScale1Async(Appsv1beta1Scale body, String name, String namespace, String pretty);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Appsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Scale object
     */
    Observable<ServiceResponse<Appsv1beta1Scale>> replaceNamespacedScaleScale1WithServiceResponseAsync(Appsv1beta1Scale body, String name, String namespace, String pretty);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Scale object if successful.
     */
    Appsv1beta1Scale patchNamespacedScaleScale1(Object body, String name, String namespace);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Scale> patchNamespacedScaleScale1Async(Object body, String name, String namespace, final ServiceCallback<Appsv1beta1Scale> serviceCallback);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Scale object
     */
    Observable<Appsv1beta1Scale> patchNamespacedScaleScale1Async(Object body, String name, String namespace);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Scale object
     */
    Observable<ServiceResponse<Appsv1beta1Scale>> patchNamespacedScaleScale1WithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Scale object if successful.
     */
    Appsv1beta1Scale patchNamespacedScaleScale1(Object body, String name, String namespace, String pretty);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Scale> patchNamespacedScaleScale1Async(Object body, String name, String namespace, String pretty, final ServiceCallback<Appsv1beta1Scale> serviceCallback);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Scale object
     */
    Observable<Appsv1beta1Scale> patchNamespacedScaleScale1Async(Object body, String name, String namespace, String pretty);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Scale object
     */
    Observable<ServiceResponse<Appsv1beta1Scale>> patchNamespacedScaleScale1WithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read status of the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Deployment object if successful.
     */
    Appsv1beta1Deployment readNamespacedDeploymentStatus(String name, String namespace);

    /**
     * read status of the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Deployment> readNamespacedDeploymentStatusAsync(String name, String namespace, final ServiceCallback<Appsv1beta1Deployment> serviceCallback);

    /**
     * read status of the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<Appsv1beta1Deployment> readNamespacedDeploymentStatusAsync(String name, String namespace);

    /**
     * read status of the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<ServiceResponse<Appsv1beta1Deployment>> readNamespacedDeploymentStatusWithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Deployment object if successful.
     */
    Appsv1beta1Deployment readNamespacedDeploymentStatus(String name, String namespace, String pretty);

    /**
     * read status of the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Deployment> readNamespacedDeploymentStatusAsync(String name, String namespace, String pretty, final ServiceCallback<Appsv1beta1Deployment> serviceCallback);

    /**
     * read status of the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<Appsv1beta1Deployment> readNamespacedDeploymentStatusAsync(String name, String namespace, String pretty);

    /**
     * read status of the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<ServiceResponse<Appsv1beta1Deployment>> readNamespacedDeploymentStatusWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Deployment object if successful.
     */
    Appsv1beta1Deployment replaceNamespacedDeploymentStatus(Appsv1beta1Deployment body, String name, String namespace);

    /**
     * replace status of the specified Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Deployment> replaceNamespacedDeploymentStatusAsync(Appsv1beta1Deployment body, String name, String namespace, final ServiceCallback<Appsv1beta1Deployment> serviceCallback);

    /**
     * replace status of the specified Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<Appsv1beta1Deployment> replaceNamespacedDeploymentStatusAsync(Appsv1beta1Deployment body, String name, String namespace);

    /**
     * replace status of the specified Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<ServiceResponse<Appsv1beta1Deployment>> replaceNamespacedDeploymentStatusWithServiceResponseAsync(Appsv1beta1Deployment body, String name, String namespace);
    /**
     * replace status of the specified Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Deployment object if successful.
     */
    Appsv1beta1Deployment replaceNamespacedDeploymentStatus(Appsv1beta1Deployment body, String name, String namespace, String pretty);

    /**
     * replace status of the specified Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Deployment> replaceNamespacedDeploymentStatusAsync(Appsv1beta1Deployment body, String name, String namespace, String pretty, final ServiceCallback<Appsv1beta1Deployment> serviceCallback);

    /**
     * replace status of the specified Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<Appsv1beta1Deployment> replaceNamespacedDeploymentStatusAsync(Appsv1beta1Deployment body, String name, String namespace, String pretty);

    /**
     * replace status of the specified Deployment.
     *
     * @param body the Appsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<ServiceResponse<Appsv1beta1Deployment>> replaceNamespacedDeploymentStatusWithServiceResponseAsync(Appsv1beta1Deployment body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Deployment object if successful.
     */
    Appsv1beta1Deployment patchNamespacedDeploymentStatus(Object body, String name, String namespace);

    /**
     * partially update status of the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Deployment> patchNamespacedDeploymentStatusAsync(Object body, String name, String namespace, final ServiceCallback<Appsv1beta1Deployment> serviceCallback);

    /**
     * partially update status of the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<Appsv1beta1Deployment> patchNamespacedDeploymentStatusAsync(Object body, String name, String namespace);

    /**
     * partially update status of the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<ServiceResponse<Appsv1beta1Deployment>> patchNamespacedDeploymentStatusWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Appsv1beta1Deployment object if successful.
     */
    Appsv1beta1Deployment patchNamespacedDeploymentStatus(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Appsv1beta1Deployment> patchNamespacedDeploymentStatusAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<Appsv1beta1Deployment> serviceCallback);

    /**
     * partially update status of the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<Appsv1beta1Deployment> patchNamespacedDeploymentStatusAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Appsv1beta1Deployment object
     */
    Observable<ServiceResponse<Appsv1beta1Deployment>> patchNamespacedDeploymentStatusWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind StatefulSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSetList object if successful.
     */
    V1beta1StatefulSetList listNamespacedStatefulSet(String namespace);

    /**
     * list or watch objects of kind StatefulSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSetList> listNamespacedStatefulSetAsync(String namespace, final ServiceCallback<V1beta1StatefulSetList> serviceCallback);

    /**
     * list or watch objects of kind StatefulSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSetList object
     */
    Observable<V1beta1StatefulSetList> listNamespacedStatefulSetAsync(String namespace);

    /**
     * list or watch objects of kind StatefulSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSetList object
     */
    Observable<ServiceResponse<V1beta1StatefulSetList>> listNamespacedStatefulSetWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind StatefulSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSetList object if successful.
     */
    V1beta1StatefulSetList listNamespacedStatefulSet(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind StatefulSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSetList> listNamespacedStatefulSetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1beta1StatefulSetList> serviceCallback);

    /**
     * list or watch objects of kind StatefulSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSetList object
     */
    Observable<V1beta1StatefulSetList> listNamespacedStatefulSetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind StatefulSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSetList object
     */
    Observable<ServiceResponse<V1beta1StatefulSetList>> listNamespacedStatefulSetWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSet object if successful.
     */
    V1beta1StatefulSet createNamespacedStatefulSet(V1beta1StatefulSet body, String namespace);

    /**
     * create a StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSet> createNamespacedStatefulSetAsync(V1beta1StatefulSet body, String namespace, final ServiceCallback<V1beta1StatefulSet> serviceCallback);

    /**
     * create a StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<V1beta1StatefulSet> createNamespacedStatefulSetAsync(V1beta1StatefulSet body, String namespace);

    /**
     * create a StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<ServiceResponse<V1beta1StatefulSet>> createNamespacedStatefulSetWithServiceResponseAsync(V1beta1StatefulSet body, String namespace);
    /**
     * create a StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSet object if successful.
     */
    V1beta1StatefulSet createNamespacedStatefulSet(V1beta1StatefulSet body, String namespace, String pretty);

    /**
     * create a StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSet> createNamespacedStatefulSetAsync(V1beta1StatefulSet body, String namespace, String pretty, final ServiceCallback<V1beta1StatefulSet> serviceCallback);

    /**
     * create a StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<V1beta1StatefulSet> createNamespacedStatefulSetAsync(V1beta1StatefulSet body, String namespace, String pretty);

    /**
     * create a StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<ServiceResponse<V1beta1StatefulSet>> createNamespacedStatefulSetWithServiceResponseAsync(V1beta1StatefulSet body, String namespace, String pretty);

    /**
     * delete collection of StatefulSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedStatefulSet(String namespace);

    /**
     * delete collection of StatefulSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedStatefulSetAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of StatefulSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedStatefulSetAsync(String namespace);

    /**
     * delete collection of StatefulSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedStatefulSetWithServiceResponseAsync(String namespace);
    /**
     * delete collection of StatefulSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedStatefulSet(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of StatefulSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedStatefulSetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of StatefulSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedStatefulSetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of StatefulSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedStatefulSetWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified StatefulSet.
     *
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSet object if successful.
     */
    V1beta1StatefulSet readNamespacedStatefulSet(String name, String namespace);

    /**
     * read the specified StatefulSet.
     *
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSet> readNamespacedStatefulSetAsync(String name, String namespace, final ServiceCallback<V1beta1StatefulSet> serviceCallback);

    /**
     * read the specified StatefulSet.
     *
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<V1beta1StatefulSet> readNamespacedStatefulSetAsync(String name, String namespace);

    /**
     * read the specified StatefulSet.
     *
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<ServiceResponse<V1beta1StatefulSet>> readNamespacedStatefulSetWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified StatefulSet.
     *
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSet object if successful.
     */
    V1beta1StatefulSet readNamespacedStatefulSet(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified StatefulSet.
     *
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSet> readNamespacedStatefulSetAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1beta1StatefulSet> serviceCallback);

    /**
     * read the specified StatefulSet.
     *
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<V1beta1StatefulSet> readNamespacedStatefulSetAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified StatefulSet.
     *
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<ServiceResponse<V1beta1StatefulSet>> readNamespacedStatefulSetWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSet object if successful.
     */
    V1beta1StatefulSet replaceNamespacedStatefulSet(V1beta1StatefulSet body, String name, String namespace);

    /**
     * replace the specified StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSet> replaceNamespacedStatefulSetAsync(V1beta1StatefulSet body, String name, String namespace, final ServiceCallback<V1beta1StatefulSet> serviceCallback);

    /**
     * replace the specified StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<V1beta1StatefulSet> replaceNamespacedStatefulSetAsync(V1beta1StatefulSet body, String name, String namespace);

    /**
     * replace the specified StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<ServiceResponse<V1beta1StatefulSet>> replaceNamespacedStatefulSetWithServiceResponseAsync(V1beta1StatefulSet body, String name, String namespace);
    /**
     * replace the specified StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSet object if successful.
     */
    V1beta1StatefulSet replaceNamespacedStatefulSet(V1beta1StatefulSet body, String name, String namespace, String pretty);

    /**
     * replace the specified StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSet> replaceNamespacedStatefulSetAsync(V1beta1StatefulSet body, String name, String namespace, String pretty, final ServiceCallback<V1beta1StatefulSet> serviceCallback);

    /**
     * replace the specified StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<V1beta1StatefulSet> replaceNamespacedStatefulSetAsync(V1beta1StatefulSet body, String name, String namespace, String pretty);

    /**
     * replace the specified StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<ServiceResponse<V1beta1StatefulSet>> replaceNamespacedStatefulSetWithServiceResponseAsync(V1beta1StatefulSet body, String name, String namespace, String pretty);

    /**
     * delete a StatefulSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedStatefulSet(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a StatefulSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedStatefulSetAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a StatefulSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedStatefulSetAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a StatefulSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedStatefulSetWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a StatefulSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedStatefulSet(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a StatefulSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedStatefulSetAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a StatefulSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedStatefulSetAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a StatefulSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedStatefulSetWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified StatefulSet.
     *
     * @param body the Object value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSet object if successful.
     */
    V1beta1StatefulSet patchNamespacedStatefulSet(Object body, String name, String namespace);

    /**
     * partially update the specified StatefulSet.
     *
     * @param body the Object value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSet> patchNamespacedStatefulSetAsync(Object body, String name, String namespace, final ServiceCallback<V1beta1StatefulSet> serviceCallback);

    /**
     * partially update the specified StatefulSet.
     *
     * @param body the Object value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<V1beta1StatefulSet> patchNamespacedStatefulSetAsync(Object body, String name, String namespace);

    /**
     * partially update the specified StatefulSet.
     *
     * @param body the Object value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<ServiceResponse<V1beta1StatefulSet>> patchNamespacedStatefulSetWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified StatefulSet.
     *
     * @param body the Object value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSet object if successful.
     */
    V1beta1StatefulSet patchNamespacedStatefulSet(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified StatefulSet.
     *
     * @param body the Object value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSet> patchNamespacedStatefulSetAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1beta1StatefulSet> serviceCallback);

    /**
     * partially update the specified StatefulSet.
     *
     * @param body the Object value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<V1beta1StatefulSet> patchNamespacedStatefulSetAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified StatefulSet.
     *
     * @param body the Object value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<ServiceResponse<V1beta1StatefulSet>> patchNamespacedStatefulSetWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read status of the specified StatefulSet.
     *
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSet object if successful.
     */
    V1beta1StatefulSet readNamespacedStatefulSetStatus(String name, String namespace);

    /**
     * read status of the specified StatefulSet.
     *
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSet> readNamespacedStatefulSetStatusAsync(String name, String namespace, final ServiceCallback<V1beta1StatefulSet> serviceCallback);

    /**
     * read status of the specified StatefulSet.
     *
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<V1beta1StatefulSet> readNamespacedStatefulSetStatusAsync(String name, String namespace);

    /**
     * read status of the specified StatefulSet.
     *
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<ServiceResponse<V1beta1StatefulSet>> readNamespacedStatefulSetStatusWithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified StatefulSet.
     *
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSet object if successful.
     */
    V1beta1StatefulSet readNamespacedStatefulSetStatus(String name, String namespace, String pretty);

    /**
     * read status of the specified StatefulSet.
     *
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSet> readNamespacedStatefulSetStatusAsync(String name, String namespace, String pretty, final ServiceCallback<V1beta1StatefulSet> serviceCallback);

    /**
     * read status of the specified StatefulSet.
     *
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<V1beta1StatefulSet> readNamespacedStatefulSetStatusAsync(String name, String namespace, String pretty);

    /**
     * read status of the specified StatefulSet.
     *
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<ServiceResponse<V1beta1StatefulSet>> readNamespacedStatefulSetStatusWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSet object if successful.
     */
    V1beta1StatefulSet replaceNamespacedStatefulSetStatus(V1beta1StatefulSet body, String name, String namespace);

    /**
     * replace status of the specified StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSet> replaceNamespacedStatefulSetStatusAsync(V1beta1StatefulSet body, String name, String namespace, final ServiceCallback<V1beta1StatefulSet> serviceCallback);

    /**
     * replace status of the specified StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<V1beta1StatefulSet> replaceNamespacedStatefulSetStatusAsync(V1beta1StatefulSet body, String name, String namespace);

    /**
     * replace status of the specified StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<ServiceResponse<V1beta1StatefulSet>> replaceNamespacedStatefulSetStatusWithServiceResponseAsync(V1beta1StatefulSet body, String name, String namespace);
    /**
     * replace status of the specified StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSet object if successful.
     */
    V1beta1StatefulSet replaceNamespacedStatefulSetStatus(V1beta1StatefulSet body, String name, String namespace, String pretty);

    /**
     * replace status of the specified StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSet> replaceNamespacedStatefulSetStatusAsync(V1beta1StatefulSet body, String name, String namespace, String pretty, final ServiceCallback<V1beta1StatefulSet> serviceCallback);

    /**
     * replace status of the specified StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<V1beta1StatefulSet> replaceNamespacedStatefulSetStatusAsync(V1beta1StatefulSet body, String name, String namespace, String pretty);

    /**
     * replace status of the specified StatefulSet.
     *
     * @param body the V1beta1StatefulSet value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<ServiceResponse<V1beta1StatefulSet>> replaceNamespacedStatefulSetStatusWithServiceResponseAsync(V1beta1StatefulSet body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified StatefulSet.
     *
     * @param body the Object value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSet object if successful.
     */
    V1beta1StatefulSet patchNamespacedStatefulSetStatus(Object body, String name, String namespace);

    /**
     * partially update status of the specified StatefulSet.
     *
     * @param body the Object value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSet> patchNamespacedStatefulSetStatusAsync(Object body, String name, String namespace, final ServiceCallback<V1beta1StatefulSet> serviceCallback);

    /**
     * partially update status of the specified StatefulSet.
     *
     * @param body the Object value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<V1beta1StatefulSet> patchNamespacedStatefulSetStatusAsync(Object body, String name, String namespace);

    /**
     * partially update status of the specified StatefulSet.
     *
     * @param body the Object value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<ServiceResponse<V1beta1StatefulSet>> patchNamespacedStatefulSetStatusWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified StatefulSet.
     *
     * @param body the Object value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSet object if successful.
     */
    V1beta1StatefulSet patchNamespacedStatefulSetStatus(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified StatefulSet.
     *
     * @param body the Object value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSet> patchNamespacedStatefulSetStatusAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1beta1StatefulSet> serviceCallback);

    /**
     * partially update status of the specified StatefulSet.
     *
     * @param body the Object value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<V1beta1StatefulSet> patchNamespacedStatefulSetStatusAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified StatefulSet.
     *
     * @param body the Object value
     * @param name name of the StatefulSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSet object
     */
    Observable<ServiceResponse<V1beta1StatefulSet>> patchNamespacedStatefulSetStatusWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind StatefulSet.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSetList object if successful.
     */
    V1beta1StatefulSetList listStatefulSetForAllNamespaces();

    /**
     * list or watch objects of kind StatefulSet.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSetList> listStatefulSetForAllNamespacesAsync(final ServiceCallback<V1beta1StatefulSetList> serviceCallback);

    /**
     * list or watch objects of kind StatefulSet.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSetList object
     */
    Observable<V1beta1StatefulSetList> listStatefulSetForAllNamespacesAsync();

    /**
     * list or watch objects of kind StatefulSet.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSetList object
     */
    Observable<ServiceResponse<V1beta1StatefulSetList>> listStatefulSetForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind StatefulSet.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StatefulSetList object if successful.
     */
    V1beta1StatefulSetList listStatefulSetForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind StatefulSet.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StatefulSetList> listStatefulSetForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1beta1StatefulSetList> serviceCallback);

    /**
     * list or watch objects of kind StatefulSet.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSetList object
     */
    Observable<V1beta1StatefulSetList> listStatefulSetForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind StatefulSet.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StatefulSetList object
     */
    Observable<ServiceResponse<V1beta1StatefulSetList>> listStatefulSetForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIGroup object if successful.
     */
    V1APIGroup getAPIGroup1();

    /**
     * get information of a group.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIGroup> getAPIGroup1Async(final ServiceCallback<V1APIGroup> serviceCallback);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<V1APIGroup> getAPIGroup1Async();

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<ServiceResponse<V1APIGroup>> getAPIGroup1WithServiceResponseAsync();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources2();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources2Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources2Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources2WithServiceResponseAsync();

    /**
     * create a TokenReview.
     *
     * @param body the V1TokenReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1TokenReview object if successful.
     */
    V1TokenReview createTokenReview(V1TokenReview body);

    /**
     * create a TokenReview.
     *
     * @param body the V1TokenReview value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1TokenReview> createTokenReviewAsync(V1TokenReview body, final ServiceCallback<V1TokenReview> serviceCallback);

    /**
     * create a TokenReview.
     *
     * @param body the V1TokenReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1TokenReview object
     */
    Observable<V1TokenReview> createTokenReviewAsync(V1TokenReview body);

    /**
     * create a TokenReview.
     *
     * @param body the V1TokenReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1TokenReview object
     */
    Observable<ServiceResponse<V1TokenReview>> createTokenReviewWithServiceResponseAsync(V1TokenReview body);
    /**
     * create a TokenReview.
     *
     * @param body the V1TokenReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1TokenReview object if successful.
     */
    V1TokenReview createTokenReview(V1TokenReview body, String pretty);

    /**
     * create a TokenReview.
     *
     * @param body the V1TokenReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1TokenReview> createTokenReviewAsync(V1TokenReview body, String pretty, final ServiceCallback<V1TokenReview> serviceCallback);

    /**
     * create a TokenReview.
     *
     * @param body the V1TokenReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1TokenReview object
     */
    Observable<V1TokenReview> createTokenReviewAsync(V1TokenReview body, String pretty);

    /**
     * create a TokenReview.
     *
     * @param body the V1TokenReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1TokenReview object
     */
    Observable<ServiceResponse<V1TokenReview>> createTokenReviewWithServiceResponseAsync(V1TokenReview body, String pretty);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources3();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources3Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources3Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources3WithServiceResponseAsync();

    /**
     * create a TokenReview.
     *
     * @param body the V1beta1TokenReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1TokenReview object if successful.
     */
    V1beta1TokenReview createTokenReview1(V1beta1TokenReview body);

    /**
     * create a TokenReview.
     *
     * @param body the V1beta1TokenReview value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1TokenReview> createTokenReview1Async(V1beta1TokenReview body, final ServiceCallback<V1beta1TokenReview> serviceCallback);

    /**
     * create a TokenReview.
     *
     * @param body the V1beta1TokenReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1TokenReview object
     */
    Observable<V1beta1TokenReview> createTokenReview1Async(V1beta1TokenReview body);

    /**
     * create a TokenReview.
     *
     * @param body the V1beta1TokenReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1TokenReview object
     */
    Observable<ServiceResponse<V1beta1TokenReview>> createTokenReview1WithServiceResponseAsync(V1beta1TokenReview body);
    /**
     * create a TokenReview.
     *
     * @param body the V1beta1TokenReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1TokenReview object if successful.
     */
    V1beta1TokenReview createTokenReview1(V1beta1TokenReview body, String pretty);

    /**
     * create a TokenReview.
     *
     * @param body the V1beta1TokenReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1TokenReview> createTokenReview1Async(V1beta1TokenReview body, String pretty, final ServiceCallback<V1beta1TokenReview> serviceCallback);

    /**
     * create a TokenReview.
     *
     * @param body the V1beta1TokenReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1TokenReview object
     */
    Observable<V1beta1TokenReview> createTokenReview1Async(V1beta1TokenReview body, String pretty);

    /**
     * create a TokenReview.
     *
     * @param body the V1beta1TokenReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1TokenReview object
     */
    Observable<ServiceResponse<V1beta1TokenReview>> createTokenReview1WithServiceResponseAsync(V1beta1TokenReview body, String pretty);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIGroup object if successful.
     */
    V1APIGroup getAPIGroup2();

    /**
     * get information of a group.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIGroup> getAPIGroup2Async(final ServiceCallback<V1APIGroup> serviceCallback);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<V1APIGroup> getAPIGroup2Async();

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<ServiceResponse<V1APIGroup>> getAPIGroup2WithServiceResponseAsync();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources4();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources4Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources4Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources4WithServiceResponseAsync();

    /**
     * create a LocalSubjectAccessReview.
     *
     * @param body the V1LocalSubjectAccessReview value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1LocalSubjectAccessReview object if successful.
     */
    V1LocalSubjectAccessReview createNamespacedLocalSubjectAccessReview(V1LocalSubjectAccessReview body, String namespace);

    /**
     * create a LocalSubjectAccessReview.
     *
     * @param body the V1LocalSubjectAccessReview value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1LocalSubjectAccessReview> createNamespacedLocalSubjectAccessReviewAsync(V1LocalSubjectAccessReview body, String namespace, final ServiceCallback<V1LocalSubjectAccessReview> serviceCallback);

    /**
     * create a LocalSubjectAccessReview.
     *
     * @param body the V1LocalSubjectAccessReview value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LocalSubjectAccessReview object
     */
    Observable<V1LocalSubjectAccessReview> createNamespacedLocalSubjectAccessReviewAsync(V1LocalSubjectAccessReview body, String namespace);

    /**
     * create a LocalSubjectAccessReview.
     *
     * @param body the V1LocalSubjectAccessReview value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LocalSubjectAccessReview object
     */
    Observable<ServiceResponse<V1LocalSubjectAccessReview>> createNamespacedLocalSubjectAccessReviewWithServiceResponseAsync(V1LocalSubjectAccessReview body, String namespace);
    /**
     * create a LocalSubjectAccessReview.
     *
     * @param body the V1LocalSubjectAccessReview value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1LocalSubjectAccessReview object if successful.
     */
    V1LocalSubjectAccessReview createNamespacedLocalSubjectAccessReview(V1LocalSubjectAccessReview body, String namespace, String pretty);

    /**
     * create a LocalSubjectAccessReview.
     *
     * @param body the V1LocalSubjectAccessReview value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1LocalSubjectAccessReview> createNamespacedLocalSubjectAccessReviewAsync(V1LocalSubjectAccessReview body, String namespace, String pretty, final ServiceCallback<V1LocalSubjectAccessReview> serviceCallback);

    /**
     * create a LocalSubjectAccessReview.
     *
     * @param body the V1LocalSubjectAccessReview value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LocalSubjectAccessReview object
     */
    Observable<V1LocalSubjectAccessReview> createNamespacedLocalSubjectAccessReviewAsync(V1LocalSubjectAccessReview body, String namespace, String pretty);

    /**
     * create a LocalSubjectAccessReview.
     *
     * @param body the V1LocalSubjectAccessReview value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1LocalSubjectAccessReview object
     */
    Observable<ServiceResponse<V1LocalSubjectAccessReview>> createNamespacedLocalSubjectAccessReviewWithServiceResponseAsync(V1LocalSubjectAccessReview body, String namespace, String pretty);

    /**
     * create a SelfSubjectAccessReview.
     *
     * @param body the V1SelfSubjectAccessReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1SelfSubjectAccessReview object if successful.
     */
    V1SelfSubjectAccessReview createSelfSubjectAccessReview(V1SelfSubjectAccessReview body);

    /**
     * create a SelfSubjectAccessReview.
     *
     * @param body the V1SelfSubjectAccessReview value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1SelfSubjectAccessReview> createSelfSubjectAccessReviewAsync(V1SelfSubjectAccessReview body, final ServiceCallback<V1SelfSubjectAccessReview> serviceCallback);

    /**
     * create a SelfSubjectAccessReview.
     *
     * @param body the V1SelfSubjectAccessReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1SelfSubjectAccessReview object
     */
    Observable<V1SelfSubjectAccessReview> createSelfSubjectAccessReviewAsync(V1SelfSubjectAccessReview body);

    /**
     * create a SelfSubjectAccessReview.
     *
     * @param body the V1SelfSubjectAccessReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1SelfSubjectAccessReview object
     */
    Observable<ServiceResponse<V1SelfSubjectAccessReview>> createSelfSubjectAccessReviewWithServiceResponseAsync(V1SelfSubjectAccessReview body);
    /**
     * create a SelfSubjectAccessReview.
     *
     * @param body the V1SelfSubjectAccessReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1SelfSubjectAccessReview object if successful.
     */
    V1SelfSubjectAccessReview createSelfSubjectAccessReview(V1SelfSubjectAccessReview body, String pretty);

    /**
     * create a SelfSubjectAccessReview.
     *
     * @param body the V1SelfSubjectAccessReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1SelfSubjectAccessReview> createSelfSubjectAccessReviewAsync(V1SelfSubjectAccessReview body, String pretty, final ServiceCallback<V1SelfSubjectAccessReview> serviceCallback);

    /**
     * create a SelfSubjectAccessReview.
     *
     * @param body the V1SelfSubjectAccessReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1SelfSubjectAccessReview object
     */
    Observable<V1SelfSubjectAccessReview> createSelfSubjectAccessReviewAsync(V1SelfSubjectAccessReview body, String pretty);

    /**
     * create a SelfSubjectAccessReview.
     *
     * @param body the V1SelfSubjectAccessReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1SelfSubjectAccessReview object
     */
    Observable<ServiceResponse<V1SelfSubjectAccessReview>> createSelfSubjectAccessReviewWithServiceResponseAsync(V1SelfSubjectAccessReview body, String pretty);

    /**
     * create a SubjectAccessReview.
     *
     * @param body the V1SubjectAccessReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1SubjectAccessReview object if successful.
     */
    V1SubjectAccessReview createSubjectAccessReview(V1SubjectAccessReview body);

    /**
     * create a SubjectAccessReview.
     *
     * @param body the V1SubjectAccessReview value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1SubjectAccessReview> createSubjectAccessReviewAsync(V1SubjectAccessReview body, final ServiceCallback<V1SubjectAccessReview> serviceCallback);

    /**
     * create a SubjectAccessReview.
     *
     * @param body the V1SubjectAccessReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1SubjectAccessReview object
     */
    Observable<V1SubjectAccessReview> createSubjectAccessReviewAsync(V1SubjectAccessReview body);

    /**
     * create a SubjectAccessReview.
     *
     * @param body the V1SubjectAccessReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1SubjectAccessReview object
     */
    Observable<ServiceResponse<V1SubjectAccessReview>> createSubjectAccessReviewWithServiceResponseAsync(V1SubjectAccessReview body);
    /**
     * create a SubjectAccessReview.
     *
     * @param body the V1SubjectAccessReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1SubjectAccessReview object if successful.
     */
    V1SubjectAccessReview createSubjectAccessReview(V1SubjectAccessReview body, String pretty);

    /**
     * create a SubjectAccessReview.
     *
     * @param body the V1SubjectAccessReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1SubjectAccessReview> createSubjectAccessReviewAsync(V1SubjectAccessReview body, String pretty, final ServiceCallback<V1SubjectAccessReview> serviceCallback);

    /**
     * create a SubjectAccessReview.
     *
     * @param body the V1SubjectAccessReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1SubjectAccessReview object
     */
    Observable<V1SubjectAccessReview> createSubjectAccessReviewAsync(V1SubjectAccessReview body, String pretty);

    /**
     * create a SubjectAccessReview.
     *
     * @param body the V1SubjectAccessReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1SubjectAccessReview object
     */
    Observable<ServiceResponse<V1SubjectAccessReview>> createSubjectAccessReviewWithServiceResponseAsync(V1SubjectAccessReview body, String pretty);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources5();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources5Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources5Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources5WithServiceResponseAsync();

    /**
     * create a LocalSubjectAccessReview.
     *
     * @param body the V1beta1LocalSubjectAccessReview value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1LocalSubjectAccessReview object if successful.
     */
    V1beta1LocalSubjectAccessReview createNamespacedLocalSubjectAccessReview1(V1beta1LocalSubjectAccessReview body, String namespace);

    /**
     * create a LocalSubjectAccessReview.
     *
     * @param body the V1beta1LocalSubjectAccessReview value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1LocalSubjectAccessReview> createNamespacedLocalSubjectAccessReview1Async(V1beta1LocalSubjectAccessReview body, String namespace, final ServiceCallback<V1beta1LocalSubjectAccessReview> serviceCallback);

    /**
     * create a LocalSubjectAccessReview.
     *
     * @param body the V1beta1LocalSubjectAccessReview value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1LocalSubjectAccessReview object
     */
    Observable<V1beta1LocalSubjectAccessReview> createNamespacedLocalSubjectAccessReview1Async(V1beta1LocalSubjectAccessReview body, String namespace);

    /**
     * create a LocalSubjectAccessReview.
     *
     * @param body the V1beta1LocalSubjectAccessReview value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1LocalSubjectAccessReview object
     */
    Observable<ServiceResponse<V1beta1LocalSubjectAccessReview>> createNamespacedLocalSubjectAccessReview1WithServiceResponseAsync(V1beta1LocalSubjectAccessReview body, String namespace);
    /**
     * create a LocalSubjectAccessReview.
     *
     * @param body the V1beta1LocalSubjectAccessReview value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1LocalSubjectAccessReview object if successful.
     */
    V1beta1LocalSubjectAccessReview createNamespacedLocalSubjectAccessReview1(V1beta1LocalSubjectAccessReview body, String namespace, String pretty);

    /**
     * create a LocalSubjectAccessReview.
     *
     * @param body the V1beta1LocalSubjectAccessReview value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1LocalSubjectAccessReview> createNamespacedLocalSubjectAccessReview1Async(V1beta1LocalSubjectAccessReview body, String namespace, String pretty, final ServiceCallback<V1beta1LocalSubjectAccessReview> serviceCallback);

    /**
     * create a LocalSubjectAccessReview.
     *
     * @param body the V1beta1LocalSubjectAccessReview value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1LocalSubjectAccessReview object
     */
    Observable<V1beta1LocalSubjectAccessReview> createNamespacedLocalSubjectAccessReview1Async(V1beta1LocalSubjectAccessReview body, String namespace, String pretty);

    /**
     * create a LocalSubjectAccessReview.
     *
     * @param body the V1beta1LocalSubjectAccessReview value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1LocalSubjectAccessReview object
     */
    Observable<ServiceResponse<V1beta1LocalSubjectAccessReview>> createNamespacedLocalSubjectAccessReview1WithServiceResponseAsync(V1beta1LocalSubjectAccessReview body, String namespace, String pretty);

    /**
     * create a SelfSubjectAccessReview.
     *
     * @param body the V1beta1SelfSubjectAccessReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1SelfSubjectAccessReview object if successful.
     */
    V1beta1SelfSubjectAccessReview createSelfSubjectAccessReview1(V1beta1SelfSubjectAccessReview body);

    /**
     * create a SelfSubjectAccessReview.
     *
     * @param body the V1beta1SelfSubjectAccessReview value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1SelfSubjectAccessReview> createSelfSubjectAccessReview1Async(V1beta1SelfSubjectAccessReview body, final ServiceCallback<V1beta1SelfSubjectAccessReview> serviceCallback);

    /**
     * create a SelfSubjectAccessReview.
     *
     * @param body the V1beta1SelfSubjectAccessReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1SelfSubjectAccessReview object
     */
    Observable<V1beta1SelfSubjectAccessReview> createSelfSubjectAccessReview1Async(V1beta1SelfSubjectAccessReview body);

    /**
     * create a SelfSubjectAccessReview.
     *
     * @param body the V1beta1SelfSubjectAccessReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1SelfSubjectAccessReview object
     */
    Observable<ServiceResponse<V1beta1SelfSubjectAccessReview>> createSelfSubjectAccessReview1WithServiceResponseAsync(V1beta1SelfSubjectAccessReview body);
    /**
     * create a SelfSubjectAccessReview.
     *
     * @param body the V1beta1SelfSubjectAccessReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1SelfSubjectAccessReview object if successful.
     */
    V1beta1SelfSubjectAccessReview createSelfSubjectAccessReview1(V1beta1SelfSubjectAccessReview body, String pretty);

    /**
     * create a SelfSubjectAccessReview.
     *
     * @param body the V1beta1SelfSubjectAccessReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1SelfSubjectAccessReview> createSelfSubjectAccessReview1Async(V1beta1SelfSubjectAccessReview body, String pretty, final ServiceCallback<V1beta1SelfSubjectAccessReview> serviceCallback);

    /**
     * create a SelfSubjectAccessReview.
     *
     * @param body the V1beta1SelfSubjectAccessReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1SelfSubjectAccessReview object
     */
    Observable<V1beta1SelfSubjectAccessReview> createSelfSubjectAccessReview1Async(V1beta1SelfSubjectAccessReview body, String pretty);

    /**
     * create a SelfSubjectAccessReview.
     *
     * @param body the V1beta1SelfSubjectAccessReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1SelfSubjectAccessReview object
     */
    Observable<ServiceResponse<V1beta1SelfSubjectAccessReview>> createSelfSubjectAccessReview1WithServiceResponseAsync(V1beta1SelfSubjectAccessReview body, String pretty);

    /**
     * create a SubjectAccessReview.
     *
     * @param body the V1beta1SubjectAccessReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1SubjectAccessReview object if successful.
     */
    V1beta1SubjectAccessReview createSubjectAccessReview1(V1beta1SubjectAccessReview body);

    /**
     * create a SubjectAccessReview.
     *
     * @param body the V1beta1SubjectAccessReview value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1SubjectAccessReview> createSubjectAccessReview1Async(V1beta1SubjectAccessReview body, final ServiceCallback<V1beta1SubjectAccessReview> serviceCallback);

    /**
     * create a SubjectAccessReview.
     *
     * @param body the V1beta1SubjectAccessReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1SubjectAccessReview object
     */
    Observable<V1beta1SubjectAccessReview> createSubjectAccessReview1Async(V1beta1SubjectAccessReview body);

    /**
     * create a SubjectAccessReview.
     *
     * @param body the V1beta1SubjectAccessReview value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1SubjectAccessReview object
     */
    Observable<ServiceResponse<V1beta1SubjectAccessReview>> createSubjectAccessReview1WithServiceResponseAsync(V1beta1SubjectAccessReview body);
    /**
     * create a SubjectAccessReview.
     *
     * @param body the V1beta1SubjectAccessReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1SubjectAccessReview object if successful.
     */
    V1beta1SubjectAccessReview createSubjectAccessReview1(V1beta1SubjectAccessReview body, String pretty);

    /**
     * create a SubjectAccessReview.
     *
     * @param body the V1beta1SubjectAccessReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1SubjectAccessReview> createSubjectAccessReview1Async(V1beta1SubjectAccessReview body, String pretty, final ServiceCallback<V1beta1SubjectAccessReview> serviceCallback);

    /**
     * create a SubjectAccessReview.
     *
     * @param body the V1beta1SubjectAccessReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1SubjectAccessReview object
     */
    Observable<V1beta1SubjectAccessReview> createSubjectAccessReview1Async(V1beta1SubjectAccessReview body, String pretty);

    /**
     * create a SubjectAccessReview.
     *
     * @param body the V1beta1SubjectAccessReview value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1SubjectAccessReview object
     */
    Observable<ServiceResponse<V1beta1SubjectAccessReview>> createSubjectAccessReview1WithServiceResponseAsync(V1beta1SubjectAccessReview body, String pretty);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIGroup object if successful.
     */
    V1APIGroup getAPIGroup3();

    /**
     * get information of a group.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIGroup> getAPIGroup3Async(final ServiceCallback<V1APIGroup> serviceCallback);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<V1APIGroup> getAPIGroup3Async();

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<ServiceResponse<V1APIGroup>> getAPIGroup3WithServiceResponseAsync();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources6();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources6Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources6Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources6WithServiceResponseAsync();

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscalerList object if successful.
     */
    V1HorizontalPodAutoscalerList listHorizontalPodAutoscalerForAllNamespaces();

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscalerList> listHorizontalPodAutoscalerForAllNamespacesAsync(final ServiceCallback<V1HorizontalPodAutoscalerList> serviceCallback);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscalerList object
     */
    Observable<V1HorizontalPodAutoscalerList> listHorizontalPodAutoscalerForAllNamespacesAsync();

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscalerList object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscalerList>> listHorizontalPodAutoscalerForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscalerList object if successful.
     */
    V1HorizontalPodAutoscalerList listHorizontalPodAutoscalerForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscalerList> listHorizontalPodAutoscalerForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1HorizontalPodAutoscalerList> serviceCallback);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscalerList object
     */
    Observable<V1HorizontalPodAutoscalerList> listHorizontalPodAutoscalerForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscalerList object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscalerList>> listHorizontalPodAutoscalerForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscalerList object if successful.
     */
    V1HorizontalPodAutoscalerList listNamespacedHorizontalPodAutoscaler(String namespace);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscalerList> listNamespacedHorizontalPodAutoscalerAsync(String namespace, final ServiceCallback<V1HorizontalPodAutoscalerList> serviceCallback);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscalerList object
     */
    Observable<V1HorizontalPodAutoscalerList> listNamespacedHorizontalPodAutoscalerAsync(String namespace);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscalerList object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscalerList>> listNamespacedHorizontalPodAutoscalerWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscalerList object if successful.
     */
    V1HorizontalPodAutoscalerList listNamespacedHorizontalPodAutoscaler(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscalerList> listNamespacedHorizontalPodAutoscalerAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1HorizontalPodAutoscalerList> serviceCallback);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscalerList object
     */
    Observable<V1HorizontalPodAutoscalerList> listNamespacedHorizontalPodAutoscalerAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscalerList object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscalerList>> listNamespacedHorizontalPodAutoscalerWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscaler object if successful.
     */
    V1HorizontalPodAutoscaler createNamespacedHorizontalPodAutoscaler(V1HorizontalPodAutoscaler body, String namespace);

    /**
     * create a HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscaler> createNamespacedHorizontalPodAutoscalerAsync(V1HorizontalPodAutoscaler body, String namespace, final ServiceCallback<V1HorizontalPodAutoscaler> serviceCallback);

    /**
     * create a HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<V1HorizontalPodAutoscaler> createNamespacedHorizontalPodAutoscalerAsync(V1HorizontalPodAutoscaler body, String namespace);

    /**
     * create a HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscaler>> createNamespacedHorizontalPodAutoscalerWithServiceResponseAsync(V1HorizontalPodAutoscaler body, String namespace);
    /**
     * create a HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscaler object if successful.
     */
    V1HorizontalPodAutoscaler createNamespacedHorizontalPodAutoscaler(V1HorizontalPodAutoscaler body, String namespace, String pretty);

    /**
     * create a HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscaler> createNamespacedHorizontalPodAutoscalerAsync(V1HorizontalPodAutoscaler body, String namespace, String pretty, final ServiceCallback<V1HorizontalPodAutoscaler> serviceCallback);

    /**
     * create a HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<V1HorizontalPodAutoscaler> createNamespacedHorizontalPodAutoscalerAsync(V1HorizontalPodAutoscaler body, String namespace, String pretty);

    /**
     * create a HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscaler>> createNamespacedHorizontalPodAutoscalerWithServiceResponseAsync(V1HorizontalPodAutoscaler body, String namespace, String pretty);

    /**
     * delete collection of HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedHorizontalPodAutoscaler(String namespace);

    /**
     * delete collection of HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedHorizontalPodAutoscalerAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedHorizontalPodAutoscalerAsync(String namespace);

    /**
     * delete collection of HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedHorizontalPodAutoscalerWithServiceResponseAsync(String namespace);
    /**
     * delete collection of HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedHorizontalPodAutoscaler(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedHorizontalPodAutoscalerAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedHorizontalPodAutoscalerAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedHorizontalPodAutoscalerWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscaler object if successful.
     */
    V1HorizontalPodAutoscaler readNamespacedHorizontalPodAutoscaler(String name, String namespace);

    /**
     * read the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscaler> readNamespacedHorizontalPodAutoscalerAsync(String name, String namespace, final ServiceCallback<V1HorizontalPodAutoscaler> serviceCallback);

    /**
     * read the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<V1HorizontalPodAutoscaler> readNamespacedHorizontalPodAutoscalerAsync(String name, String namespace);

    /**
     * read the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscaler>> readNamespacedHorizontalPodAutoscalerWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscaler object if successful.
     */
    V1HorizontalPodAutoscaler readNamespacedHorizontalPodAutoscaler(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscaler> readNamespacedHorizontalPodAutoscalerAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1HorizontalPodAutoscaler> serviceCallback);

    /**
     * read the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<V1HorizontalPodAutoscaler> readNamespacedHorizontalPodAutoscalerAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscaler>> readNamespacedHorizontalPodAutoscalerWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscaler object if successful.
     */
    V1HorizontalPodAutoscaler replaceNamespacedHorizontalPodAutoscaler(V1HorizontalPodAutoscaler body, String name, String namespace);

    /**
     * replace the specified HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscaler> replaceNamespacedHorizontalPodAutoscalerAsync(V1HorizontalPodAutoscaler body, String name, String namespace, final ServiceCallback<V1HorizontalPodAutoscaler> serviceCallback);

    /**
     * replace the specified HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<V1HorizontalPodAutoscaler> replaceNamespacedHorizontalPodAutoscalerAsync(V1HorizontalPodAutoscaler body, String name, String namespace);

    /**
     * replace the specified HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscaler>> replaceNamespacedHorizontalPodAutoscalerWithServiceResponseAsync(V1HorizontalPodAutoscaler body, String name, String namespace);
    /**
     * replace the specified HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscaler object if successful.
     */
    V1HorizontalPodAutoscaler replaceNamespacedHorizontalPodAutoscaler(V1HorizontalPodAutoscaler body, String name, String namespace, String pretty);

    /**
     * replace the specified HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscaler> replaceNamespacedHorizontalPodAutoscalerAsync(V1HorizontalPodAutoscaler body, String name, String namespace, String pretty, final ServiceCallback<V1HorizontalPodAutoscaler> serviceCallback);

    /**
     * replace the specified HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<V1HorizontalPodAutoscaler> replaceNamespacedHorizontalPodAutoscalerAsync(V1HorizontalPodAutoscaler body, String name, String namespace, String pretty);

    /**
     * replace the specified HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscaler>> replaceNamespacedHorizontalPodAutoscalerWithServiceResponseAsync(V1HorizontalPodAutoscaler body, String name, String namespace, String pretty);

    /**
     * delete a HorizontalPodAutoscaler.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedHorizontalPodAutoscaler(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a HorizontalPodAutoscaler.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedHorizontalPodAutoscalerAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a HorizontalPodAutoscaler.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedHorizontalPodAutoscalerAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a HorizontalPodAutoscaler.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedHorizontalPodAutoscalerWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a HorizontalPodAutoscaler.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedHorizontalPodAutoscaler(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a HorizontalPodAutoscaler.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedHorizontalPodAutoscalerAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a HorizontalPodAutoscaler.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedHorizontalPodAutoscalerAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a HorizontalPodAutoscaler.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedHorizontalPodAutoscalerWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscaler object if successful.
     */
    V1HorizontalPodAutoscaler patchNamespacedHorizontalPodAutoscaler(Object body, String name, String namespace);

    /**
     * partially update the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscaler> patchNamespacedHorizontalPodAutoscalerAsync(Object body, String name, String namespace, final ServiceCallback<V1HorizontalPodAutoscaler> serviceCallback);

    /**
     * partially update the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<V1HorizontalPodAutoscaler> patchNamespacedHorizontalPodAutoscalerAsync(Object body, String name, String namespace);

    /**
     * partially update the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscaler>> patchNamespacedHorizontalPodAutoscalerWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscaler object if successful.
     */
    V1HorizontalPodAutoscaler patchNamespacedHorizontalPodAutoscaler(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscaler> patchNamespacedHorizontalPodAutoscalerAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1HorizontalPodAutoscaler> serviceCallback);

    /**
     * partially update the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<V1HorizontalPodAutoscaler> patchNamespacedHorizontalPodAutoscalerAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscaler>> patchNamespacedHorizontalPodAutoscalerWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read status of the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscaler object if successful.
     */
    V1HorizontalPodAutoscaler readNamespacedHorizontalPodAutoscalerStatus(String name, String namespace);

    /**
     * read status of the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscaler> readNamespacedHorizontalPodAutoscalerStatusAsync(String name, String namespace, final ServiceCallback<V1HorizontalPodAutoscaler> serviceCallback);

    /**
     * read status of the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<V1HorizontalPodAutoscaler> readNamespacedHorizontalPodAutoscalerStatusAsync(String name, String namespace);

    /**
     * read status of the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscaler>> readNamespacedHorizontalPodAutoscalerStatusWithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscaler object if successful.
     */
    V1HorizontalPodAutoscaler readNamespacedHorizontalPodAutoscalerStatus(String name, String namespace, String pretty);

    /**
     * read status of the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscaler> readNamespacedHorizontalPodAutoscalerStatusAsync(String name, String namespace, String pretty, final ServiceCallback<V1HorizontalPodAutoscaler> serviceCallback);

    /**
     * read status of the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<V1HorizontalPodAutoscaler> readNamespacedHorizontalPodAutoscalerStatusAsync(String name, String namespace, String pretty);

    /**
     * read status of the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscaler>> readNamespacedHorizontalPodAutoscalerStatusWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscaler object if successful.
     */
    V1HorizontalPodAutoscaler replaceNamespacedHorizontalPodAutoscalerStatus(V1HorizontalPodAutoscaler body, String name, String namespace);

    /**
     * replace status of the specified HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscaler> replaceNamespacedHorizontalPodAutoscalerStatusAsync(V1HorizontalPodAutoscaler body, String name, String namespace, final ServiceCallback<V1HorizontalPodAutoscaler> serviceCallback);

    /**
     * replace status of the specified HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<V1HorizontalPodAutoscaler> replaceNamespacedHorizontalPodAutoscalerStatusAsync(V1HorizontalPodAutoscaler body, String name, String namespace);

    /**
     * replace status of the specified HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscaler>> replaceNamespacedHorizontalPodAutoscalerStatusWithServiceResponseAsync(V1HorizontalPodAutoscaler body, String name, String namespace);
    /**
     * replace status of the specified HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscaler object if successful.
     */
    V1HorizontalPodAutoscaler replaceNamespacedHorizontalPodAutoscalerStatus(V1HorizontalPodAutoscaler body, String name, String namespace, String pretty);

    /**
     * replace status of the specified HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscaler> replaceNamespacedHorizontalPodAutoscalerStatusAsync(V1HorizontalPodAutoscaler body, String name, String namespace, String pretty, final ServiceCallback<V1HorizontalPodAutoscaler> serviceCallback);

    /**
     * replace status of the specified HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<V1HorizontalPodAutoscaler> replaceNamespacedHorizontalPodAutoscalerStatusAsync(V1HorizontalPodAutoscaler body, String name, String namespace, String pretty);

    /**
     * replace status of the specified HorizontalPodAutoscaler.
     *
     * @param body the V1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscaler>> replaceNamespacedHorizontalPodAutoscalerStatusWithServiceResponseAsync(V1HorizontalPodAutoscaler body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscaler object if successful.
     */
    V1HorizontalPodAutoscaler patchNamespacedHorizontalPodAutoscalerStatus(Object body, String name, String namespace);

    /**
     * partially update status of the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscaler> patchNamespacedHorizontalPodAutoscalerStatusAsync(Object body, String name, String namespace, final ServiceCallback<V1HorizontalPodAutoscaler> serviceCallback);

    /**
     * partially update status of the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<V1HorizontalPodAutoscaler> patchNamespacedHorizontalPodAutoscalerStatusAsync(Object body, String name, String namespace);

    /**
     * partially update status of the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscaler>> patchNamespacedHorizontalPodAutoscalerStatusWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1HorizontalPodAutoscaler object if successful.
     */
    V1HorizontalPodAutoscaler patchNamespacedHorizontalPodAutoscalerStatus(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1HorizontalPodAutoscaler> patchNamespacedHorizontalPodAutoscalerStatusAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1HorizontalPodAutoscaler> serviceCallback);

    /**
     * partially update status of the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<V1HorizontalPodAutoscaler> patchNamespacedHorizontalPodAutoscalerStatusAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V1HorizontalPodAutoscaler>> patchNamespacedHorizontalPodAutoscalerStatusWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources7();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources7Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources7Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources7WithServiceResponseAsync();

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscalerList object if successful.
     */
    V2alpha1HorizontalPodAutoscalerList listHorizontalPodAutoscalerForAllNamespaces1();

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscalerList> listHorizontalPodAutoscalerForAllNamespaces1Async(final ServiceCallback<V2alpha1HorizontalPodAutoscalerList> serviceCallback);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscalerList object
     */
    Observable<V2alpha1HorizontalPodAutoscalerList> listHorizontalPodAutoscalerForAllNamespaces1Async();

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscalerList object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscalerList>> listHorizontalPodAutoscalerForAllNamespaces1WithServiceResponseAsync();
    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscalerList object if successful.
     */
    V2alpha1HorizontalPodAutoscalerList listHorizontalPodAutoscalerForAllNamespaces1(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscalerList> listHorizontalPodAutoscalerForAllNamespaces1Async(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V2alpha1HorizontalPodAutoscalerList> serviceCallback);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscalerList object
     */
    Observable<V2alpha1HorizontalPodAutoscalerList> listHorizontalPodAutoscalerForAllNamespaces1Async(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscalerList object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscalerList>> listHorizontalPodAutoscalerForAllNamespaces1WithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscalerList object if successful.
     */
    V2alpha1HorizontalPodAutoscalerList listNamespacedHorizontalPodAutoscaler1(String namespace);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscalerList> listNamespacedHorizontalPodAutoscaler1Async(String namespace, final ServiceCallback<V2alpha1HorizontalPodAutoscalerList> serviceCallback);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscalerList object
     */
    Observable<V2alpha1HorizontalPodAutoscalerList> listNamespacedHorizontalPodAutoscaler1Async(String namespace);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscalerList object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscalerList>> listNamespacedHorizontalPodAutoscaler1WithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscalerList object if successful.
     */
    V2alpha1HorizontalPodAutoscalerList listNamespacedHorizontalPodAutoscaler1(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscalerList> listNamespacedHorizontalPodAutoscaler1Async(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V2alpha1HorizontalPodAutoscalerList> serviceCallback);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscalerList object
     */
    Observable<V2alpha1HorizontalPodAutoscalerList> listNamespacedHorizontalPodAutoscaler1Async(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscalerList object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscalerList>> listNamespacedHorizontalPodAutoscaler1WithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscaler object if successful.
     */
    V2alpha1HorizontalPodAutoscaler createNamespacedHorizontalPodAutoscaler1(V2alpha1HorizontalPodAutoscaler body, String namespace);

    /**
     * create a HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscaler> createNamespacedHorizontalPodAutoscaler1Async(V2alpha1HorizontalPodAutoscaler body, String namespace, final ServiceCallback<V2alpha1HorizontalPodAutoscaler> serviceCallback);

    /**
     * create a HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<V2alpha1HorizontalPodAutoscaler> createNamespacedHorizontalPodAutoscaler1Async(V2alpha1HorizontalPodAutoscaler body, String namespace);

    /**
     * create a HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscaler>> createNamespacedHorizontalPodAutoscaler1WithServiceResponseAsync(V2alpha1HorizontalPodAutoscaler body, String namespace);
    /**
     * create a HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscaler object if successful.
     */
    V2alpha1HorizontalPodAutoscaler createNamespacedHorizontalPodAutoscaler1(V2alpha1HorizontalPodAutoscaler body, String namespace, String pretty);

    /**
     * create a HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscaler> createNamespacedHorizontalPodAutoscaler1Async(V2alpha1HorizontalPodAutoscaler body, String namespace, String pretty, final ServiceCallback<V2alpha1HorizontalPodAutoscaler> serviceCallback);

    /**
     * create a HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<V2alpha1HorizontalPodAutoscaler> createNamespacedHorizontalPodAutoscaler1Async(V2alpha1HorizontalPodAutoscaler body, String namespace, String pretty);

    /**
     * create a HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscaler>> createNamespacedHorizontalPodAutoscaler1WithServiceResponseAsync(V2alpha1HorizontalPodAutoscaler body, String namespace, String pretty);

    /**
     * delete collection of HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedHorizontalPodAutoscaler1(String namespace);

    /**
     * delete collection of HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedHorizontalPodAutoscaler1Async(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedHorizontalPodAutoscaler1Async(String namespace);

    /**
     * delete collection of HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedHorizontalPodAutoscaler1WithServiceResponseAsync(String namespace);
    /**
     * delete collection of HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedHorizontalPodAutoscaler1(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedHorizontalPodAutoscaler1Async(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedHorizontalPodAutoscaler1Async(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of HorizontalPodAutoscaler.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedHorizontalPodAutoscaler1WithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscaler object if successful.
     */
    V2alpha1HorizontalPodAutoscaler readNamespacedHorizontalPodAutoscaler1(String name, String namespace);

    /**
     * read the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscaler> readNamespacedHorizontalPodAutoscaler1Async(String name, String namespace, final ServiceCallback<V2alpha1HorizontalPodAutoscaler> serviceCallback);

    /**
     * read the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<V2alpha1HorizontalPodAutoscaler> readNamespacedHorizontalPodAutoscaler1Async(String name, String namespace);

    /**
     * read the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscaler>> readNamespacedHorizontalPodAutoscaler1WithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscaler object if successful.
     */
    V2alpha1HorizontalPodAutoscaler readNamespacedHorizontalPodAutoscaler1(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscaler> readNamespacedHorizontalPodAutoscaler1Async(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V2alpha1HorizontalPodAutoscaler> serviceCallback);

    /**
     * read the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<V2alpha1HorizontalPodAutoscaler> readNamespacedHorizontalPodAutoscaler1Async(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscaler>> readNamespacedHorizontalPodAutoscaler1WithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscaler object if successful.
     */
    V2alpha1HorizontalPodAutoscaler replaceNamespacedHorizontalPodAutoscaler1(V2alpha1HorizontalPodAutoscaler body, String name, String namespace);

    /**
     * replace the specified HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscaler> replaceNamespacedHorizontalPodAutoscaler1Async(V2alpha1HorizontalPodAutoscaler body, String name, String namespace, final ServiceCallback<V2alpha1HorizontalPodAutoscaler> serviceCallback);

    /**
     * replace the specified HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<V2alpha1HorizontalPodAutoscaler> replaceNamespacedHorizontalPodAutoscaler1Async(V2alpha1HorizontalPodAutoscaler body, String name, String namespace);

    /**
     * replace the specified HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscaler>> replaceNamespacedHorizontalPodAutoscaler1WithServiceResponseAsync(V2alpha1HorizontalPodAutoscaler body, String name, String namespace);
    /**
     * replace the specified HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscaler object if successful.
     */
    V2alpha1HorizontalPodAutoscaler replaceNamespacedHorizontalPodAutoscaler1(V2alpha1HorizontalPodAutoscaler body, String name, String namespace, String pretty);

    /**
     * replace the specified HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscaler> replaceNamespacedHorizontalPodAutoscaler1Async(V2alpha1HorizontalPodAutoscaler body, String name, String namespace, String pretty, final ServiceCallback<V2alpha1HorizontalPodAutoscaler> serviceCallback);

    /**
     * replace the specified HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<V2alpha1HorizontalPodAutoscaler> replaceNamespacedHorizontalPodAutoscaler1Async(V2alpha1HorizontalPodAutoscaler body, String name, String namespace, String pretty);

    /**
     * replace the specified HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscaler>> replaceNamespacedHorizontalPodAutoscaler1WithServiceResponseAsync(V2alpha1HorizontalPodAutoscaler body, String name, String namespace, String pretty);

    /**
     * delete a HorizontalPodAutoscaler.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedHorizontalPodAutoscaler1(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a HorizontalPodAutoscaler.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedHorizontalPodAutoscaler1Async(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a HorizontalPodAutoscaler.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedHorizontalPodAutoscaler1Async(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a HorizontalPodAutoscaler.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedHorizontalPodAutoscaler1WithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a HorizontalPodAutoscaler.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedHorizontalPodAutoscaler1(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a HorizontalPodAutoscaler.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedHorizontalPodAutoscaler1Async(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a HorizontalPodAutoscaler.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedHorizontalPodAutoscaler1Async(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a HorizontalPodAutoscaler.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedHorizontalPodAutoscaler1WithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscaler object if successful.
     */
    V2alpha1HorizontalPodAutoscaler patchNamespacedHorizontalPodAutoscaler1(Object body, String name, String namespace);

    /**
     * partially update the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscaler> patchNamespacedHorizontalPodAutoscaler1Async(Object body, String name, String namespace, final ServiceCallback<V2alpha1HorizontalPodAutoscaler> serviceCallback);

    /**
     * partially update the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<V2alpha1HorizontalPodAutoscaler> patchNamespacedHorizontalPodAutoscaler1Async(Object body, String name, String namespace);

    /**
     * partially update the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscaler>> patchNamespacedHorizontalPodAutoscaler1WithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscaler object if successful.
     */
    V2alpha1HorizontalPodAutoscaler patchNamespacedHorizontalPodAutoscaler1(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscaler> patchNamespacedHorizontalPodAutoscaler1Async(Object body, String name, String namespace, String pretty, final ServiceCallback<V2alpha1HorizontalPodAutoscaler> serviceCallback);

    /**
     * partially update the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<V2alpha1HorizontalPodAutoscaler> patchNamespacedHorizontalPodAutoscaler1Async(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscaler>> patchNamespacedHorizontalPodAutoscaler1WithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read status of the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscaler object if successful.
     */
    V2alpha1HorizontalPodAutoscaler readNamespacedHorizontalPodAutoscalerStatus1(String name, String namespace);

    /**
     * read status of the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscaler> readNamespacedHorizontalPodAutoscalerStatus1Async(String name, String namespace, final ServiceCallback<V2alpha1HorizontalPodAutoscaler> serviceCallback);

    /**
     * read status of the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<V2alpha1HorizontalPodAutoscaler> readNamespacedHorizontalPodAutoscalerStatus1Async(String name, String namespace);

    /**
     * read status of the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscaler>> readNamespacedHorizontalPodAutoscalerStatus1WithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscaler object if successful.
     */
    V2alpha1HorizontalPodAutoscaler readNamespacedHorizontalPodAutoscalerStatus1(String name, String namespace, String pretty);

    /**
     * read status of the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscaler> readNamespacedHorizontalPodAutoscalerStatus1Async(String name, String namespace, String pretty, final ServiceCallback<V2alpha1HorizontalPodAutoscaler> serviceCallback);

    /**
     * read status of the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<V2alpha1HorizontalPodAutoscaler> readNamespacedHorizontalPodAutoscalerStatus1Async(String name, String namespace, String pretty);

    /**
     * read status of the specified HorizontalPodAutoscaler.
     *
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscaler>> readNamespacedHorizontalPodAutoscalerStatus1WithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscaler object if successful.
     */
    V2alpha1HorizontalPodAutoscaler replaceNamespacedHorizontalPodAutoscalerStatus1(V2alpha1HorizontalPodAutoscaler body, String name, String namespace);

    /**
     * replace status of the specified HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscaler> replaceNamespacedHorizontalPodAutoscalerStatus1Async(V2alpha1HorizontalPodAutoscaler body, String name, String namespace, final ServiceCallback<V2alpha1HorizontalPodAutoscaler> serviceCallback);

    /**
     * replace status of the specified HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<V2alpha1HorizontalPodAutoscaler> replaceNamespacedHorizontalPodAutoscalerStatus1Async(V2alpha1HorizontalPodAutoscaler body, String name, String namespace);

    /**
     * replace status of the specified HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscaler>> replaceNamespacedHorizontalPodAutoscalerStatus1WithServiceResponseAsync(V2alpha1HorizontalPodAutoscaler body, String name, String namespace);
    /**
     * replace status of the specified HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscaler object if successful.
     */
    V2alpha1HorizontalPodAutoscaler replaceNamespacedHorizontalPodAutoscalerStatus1(V2alpha1HorizontalPodAutoscaler body, String name, String namespace, String pretty);

    /**
     * replace status of the specified HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscaler> replaceNamespacedHorizontalPodAutoscalerStatus1Async(V2alpha1HorizontalPodAutoscaler body, String name, String namespace, String pretty, final ServiceCallback<V2alpha1HorizontalPodAutoscaler> serviceCallback);

    /**
     * replace status of the specified HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<V2alpha1HorizontalPodAutoscaler> replaceNamespacedHorizontalPodAutoscalerStatus1Async(V2alpha1HorizontalPodAutoscaler body, String name, String namespace, String pretty);

    /**
     * replace status of the specified HorizontalPodAutoscaler.
     *
     * @param body the V2alpha1HorizontalPodAutoscaler value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscaler>> replaceNamespacedHorizontalPodAutoscalerStatus1WithServiceResponseAsync(V2alpha1HorizontalPodAutoscaler body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscaler object if successful.
     */
    V2alpha1HorizontalPodAutoscaler patchNamespacedHorizontalPodAutoscalerStatus1(Object body, String name, String namespace);

    /**
     * partially update status of the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscaler> patchNamespacedHorizontalPodAutoscalerStatus1Async(Object body, String name, String namespace, final ServiceCallback<V2alpha1HorizontalPodAutoscaler> serviceCallback);

    /**
     * partially update status of the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<V2alpha1HorizontalPodAutoscaler> patchNamespacedHorizontalPodAutoscalerStatus1Async(Object body, String name, String namespace);

    /**
     * partially update status of the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscaler>> patchNamespacedHorizontalPodAutoscalerStatus1WithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1HorizontalPodAutoscaler object if successful.
     */
    V2alpha1HorizontalPodAutoscaler patchNamespacedHorizontalPodAutoscalerStatus1(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1HorizontalPodAutoscaler> patchNamespacedHorizontalPodAutoscalerStatus1Async(Object body, String name, String namespace, String pretty, final ServiceCallback<V2alpha1HorizontalPodAutoscaler> serviceCallback);

    /**
     * partially update status of the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<V2alpha1HorizontalPodAutoscaler> patchNamespacedHorizontalPodAutoscalerStatus1Async(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified HorizontalPodAutoscaler.
     *
     * @param body the Object value
     * @param name name of the HorizontalPodAutoscaler
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1HorizontalPodAutoscaler object
     */
    Observable<ServiceResponse<V2alpha1HorizontalPodAutoscaler>> patchNamespacedHorizontalPodAutoscalerStatus1WithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIGroup object if successful.
     */
    V1APIGroup getAPIGroup4();

    /**
     * get information of a group.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIGroup> getAPIGroup4Async(final ServiceCallback<V1APIGroup> serviceCallback);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<V1APIGroup> getAPIGroup4Async();

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<ServiceResponse<V1APIGroup>> getAPIGroup4WithServiceResponseAsync();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources8();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources8Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources8Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources8WithServiceResponseAsync();

    /**
     * list or watch objects of kind Job.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1JobList object if successful.
     */
    V1JobList listJobForAllNamespaces();

    /**
     * list or watch objects of kind Job.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1JobList> listJobForAllNamespacesAsync(final ServiceCallback<V1JobList> serviceCallback);

    /**
     * list or watch objects of kind Job.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1JobList object
     */
    Observable<V1JobList> listJobForAllNamespacesAsync();

    /**
     * list or watch objects of kind Job.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1JobList object
     */
    Observable<ServiceResponse<V1JobList>> listJobForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind Job.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1JobList object if successful.
     */
    V1JobList listJobForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Job.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1JobList> listJobForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1JobList> serviceCallback);

    /**
     * list or watch objects of kind Job.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1JobList object
     */
    Observable<V1JobList> listJobForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Job.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1JobList object
     */
    Observable<ServiceResponse<V1JobList>> listJobForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Job.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1JobList object if successful.
     */
    V1JobList listNamespacedJob(String namespace);

    /**
     * list or watch objects of kind Job.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1JobList> listNamespacedJobAsync(String namespace, final ServiceCallback<V1JobList> serviceCallback);

    /**
     * list or watch objects of kind Job.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1JobList object
     */
    Observable<V1JobList> listNamespacedJobAsync(String namespace);

    /**
     * list or watch objects of kind Job.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1JobList object
     */
    Observable<ServiceResponse<V1JobList>> listNamespacedJobWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind Job.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1JobList object if successful.
     */
    V1JobList listNamespacedJob(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Job.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1JobList> listNamespacedJobAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1JobList> serviceCallback);

    /**
     * list or watch objects of kind Job.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1JobList object
     */
    Observable<V1JobList> listNamespacedJobAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Job.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1JobList object
     */
    Observable<ServiceResponse<V1JobList>> listNamespacedJobWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a Job.
     *
     * @param body the V1Job value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Job object if successful.
     */
    V1Job createNamespacedJob(V1Job body, String namespace);

    /**
     * create a Job.
     *
     * @param body the V1Job value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Job> createNamespacedJobAsync(V1Job body, String namespace, final ServiceCallback<V1Job> serviceCallback);

    /**
     * create a Job.
     *
     * @param body the V1Job value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<V1Job> createNamespacedJobAsync(V1Job body, String namespace);

    /**
     * create a Job.
     *
     * @param body the V1Job value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<ServiceResponse<V1Job>> createNamespacedJobWithServiceResponseAsync(V1Job body, String namespace);
    /**
     * create a Job.
     *
     * @param body the V1Job value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Job object if successful.
     */
    V1Job createNamespacedJob(V1Job body, String namespace, String pretty);

    /**
     * create a Job.
     *
     * @param body the V1Job value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Job> createNamespacedJobAsync(V1Job body, String namespace, String pretty, final ServiceCallback<V1Job> serviceCallback);

    /**
     * create a Job.
     *
     * @param body the V1Job value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<V1Job> createNamespacedJobAsync(V1Job body, String namespace, String pretty);

    /**
     * create a Job.
     *
     * @param body the V1Job value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<ServiceResponse<V1Job>> createNamespacedJobWithServiceResponseAsync(V1Job body, String namespace, String pretty);

    /**
     * delete collection of Job.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedJob(String namespace);

    /**
     * delete collection of Job.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedJobAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Job.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedJobAsync(String namespace);

    /**
     * delete collection of Job.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedJobWithServiceResponseAsync(String namespace);
    /**
     * delete collection of Job.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedJob(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Job.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedJobAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Job.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedJobAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Job.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedJobWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified Job.
     *
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Job object if successful.
     */
    V1Job readNamespacedJob(String name, String namespace);

    /**
     * read the specified Job.
     *
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Job> readNamespacedJobAsync(String name, String namespace, final ServiceCallback<V1Job> serviceCallback);

    /**
     * read the specified Job.
     *
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<V1Job> readNamespacedJobAsync(String name, String namespace);

    /**
     * read the specified Job.
     *
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<ServiceResponse<V1Job>> readNamespacedJobWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified Job.
     *
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Job object if successful.
     */
    V1Job readNamespacedJob(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Job.
     *
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Job> readNamespacedJobAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1Job> serviceCallback);

    /**
     * read the specified Job.
     *
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<V1Job> readNamespacedJobAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Job.
     *
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<ServiceResponse<V1Job>> readNamespacedJobWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified Job.
     *
     * @param body the V1Job value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Job object if successful.
     */
    V1Job replaceNamespacedJob(V1Job body, String name, String namespace);

    /**
     * replace the specified Job.
     *
     * @param body the V1Job value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Job> replaceNamespacedJobAsync(V1Job body, String name, String namespace, final ServiceCallback<V1Job> serviceCallback);

    /**
     * replace the specified Job.
     *
     * @param body the V1Job value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<V1Job> replaceNamespacedJobAsync(V1Job body, String name, String namespace);

    /**
     * replace the specified Job.
     *
     * @param body the V1Job value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<ServiceResponse<V1Job>> replaceNamespacedJobWithServiceResponseAsync(V1Job body, String name, String namespace);
    /**
     * replace the specified Job.
     *
     * @param body the V1Job value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Job object if successful.
     */
    V1Job replaceNamespacedJob(V1Job body, String name, String namespace, String pretty);

    /**
     * replace the specified Job.
     *
     * @param body the V1Job value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Job> replaceNamespacedJobAsync(V1Job body, String name, String namespace, String pretty, final ServiceCallback<V1Job> serviceCallback);

    /**
     * replace the specified Job.
     *
     * @param body the V1Job value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<V1Job> replaceNamespacedJobAsync(V1Job body, String name, String namespace, String pretty);

    /**
     * replace the specified Job.
     *
     * @param body the V1Job value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<ServiceResponse<V1Job>> replaceNamespacedJobWithServiceResponseAsync(V1Job body, String name, String namespace, String pretty);

    /**
     * delete a Job.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedJob(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a Job.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedJobAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Job.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedJobAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a Job.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedJobWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a Job.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedJob(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Job.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedJobAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Job.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedJobAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Job.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedJobWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified Job.
     *
     * @param body the Object value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Job object if successful.
     */
    V1Job patchNamespacedJob(Object body, String name, String namespace);

    /**
     * partially update the specified Job.
     *
     * @param body the Object value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Job> patchNamespacedJobAsync(Object body, String name, String namespace, final ServiceCallback<V1Job> serviceCallback);

    /**
     * partially update the specified Job.
     *
     * @param body the Object value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<V1Job> patchNamespacedJobAsync(Object body, String name, String namespace);

    /**
     * partially update the specified Job.
     *
     * @param body the Object value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<ServiceResponse<V1Job>> patchNamespacedJobWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified Job.
     *
     * @param body the Object value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Job object if successful.
     */
    V1Job patchNamespacedJob(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Job.
     *
     * @param body the Object value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Job> patchNamespacedJobAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1Job> serviceCallback);

    /**
     * partially update the specified Job.
     *
     * @param body the Object value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<V1Job> patchNamespacedJobAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Job.
     *
     * @param body the Object value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<ServiceResponse<V1Job>> patchNamespacedJobWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read status of the specified Job.
     *
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Job object if successful.
     */
    V1Job readNamespacedJobStatus(String name, String namespace);

    /**
     * read status of the specified Job.
     *
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Job> readNamespacedJobStatusAsync(String name, String namespace, final ServiceCallback<V1Job> serviceCallback);

    /**
     * read status of the specified Job.
     *
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<V1Job> readNamespacedJobStatusAsync(String name, String namespace);

    /**
     * read status of the specified Job.
     *
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<ServiceResponse<V1Job>> readNamespacedJobStatusWithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified Job.
     *
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Job object if successful.
     */
    V1Job readNamespacedJobStatus(String name, String namespace, String pretty);

    /**
     * read status of the specified Job.
     *
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Job> readNamespacedJobStatusAsync(String name, String namespace, String pretty, final ServiceCallback<V1Job> serviceCallback);

    /**
     * read status of the specified Job.
     *
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<V1Job> readNamespacedJobStatusAsync(String name, String namespace, String pretty);

    /**
     * read status of the specified Job.
     *
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<ServiceResponse<V1Job>> readNamespacedJobStatusWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified Job.
     *
     * @param body the V1Job value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Job object if successful.
     */
    V1Job replaceNamespacedJobStatus(V1Job body, String name, String namespace);

    /**
     * replace status of the specified Job.
     *
     * @param body the V1Job value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Job> replaceNamespacedJobStatusAsync(V1Job body, String name, String namespace, final ServiceCallback<V1Job> serviceCallback);

    /**
     * replace status of the specified Job.
     *
     * @param body the V1Job value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<V1Job> replaceNamespacedJobStatusAsync(V1Job body, String name, String namespace);

    /**
     * replace status of the specified Job.
     *
     * @param body the V1Job value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<ServiceResponse<V1Job>> replaceNamespacedJobStatusWithServiceResponseAsync(V1Job body, String name, String namespace);
    /**
     * replace status of the specified Job.
     *
     * @param body the V1Job value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Job object if successful.
     */
    V1Job replaceNamespacedJobStatus(V1Job body, String name, String namespace, String pretty);

    /**
     * replace status of the specified Job.
     *
     * @param body the V1Job value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Job> replaceNamespacedJobStatusAsync(V1Job body, String name, String namespace, String pretty, final ServiceCallback<V1Job> serviceCallback);

    /**
     * replace status of the specified Job.
     *
     * @param body the V1Job value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<V1Job> replaceNamespacedJobStatusAsync(V1Job body, String name, String namespace, String pretty);

    /**
     * replace status of the specified Job.
     *
     * @param body the V1Job value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<ServiceResponse<V1Job>> replaceNamespacedJobStatusWithServiceResponseAsync(V1Job body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Job.
     *
     * @param body the Object value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Job object if successful.
     */
    V1Job patchNamespacedJobStatus(Object body, String name, String namespace);

    /**
     * partially update status of the specified Job.
     *
     * @param body the Object value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Job> patchNamespacedJobStatusAsync(Object body, String name, String namespace, final ServiceCallback<V1Job> serviceCallback);

    /**
     * partially update status of the specified Job.
     *
     * @param body the Object value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<V1Job> patchNamespacedJobStatusAsync(Object body, String name, String namespace);

    /**
     * partially update status of the specified Job.
     *
     * @param body the Object value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<ServiceResponse<V1Job>> patchNamespacedJobStatusWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified Job.
     *
     * @param body the Object value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Job object if successful.
     */
    V1Job patchNamespacedJobStatus(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Job.
     *
     * @param body the Object value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Job> patchNamespacedJobStatusAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1Job> serviceCallback);

    /**
     * partially update status of the specified Job.
     *
     * @param body the Object value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<V1Job> patchNamespacedJobStatusAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Job.
     *
     * @param body the Object value
     * @param name name of the Job
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Job object
     */
    Observable<ServiceResponse<V1Job>> patchNamespacedJobStatusWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources9();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources9Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources9Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources9WithServiceResponseAsync();

    /**
     * list or watch objects of kind CronJob.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJobList object if successful.
     */
    V2alpha1CronJobList listCronJobForAllNamespaces();

    /**
     * list or watch objects of kind CronJob.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJobList> listCronJobForAllNamespacesAsync(final ServiceCallback<V2alpha1CronJobList> serviceCallback);

    /**
     * list or watch objects of kind CronJob.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJobList object
     */
    Observable<V2alpha1CronJobList> listCronJobForAllNamespacesAsync();

    /**
     * list or watch objects of kind CronJob.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJobList object
     */
    Observable<ServiceResponse<V2alpha1CronJobList>> listCronJobForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind CronJob.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJobList object if successful.
     */
    V2alpha1CronJobList listCronJobForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind CronJob.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJobList> listCronJobForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V2alpha1CronJobList> serviceCallback);

    /**
     * list or watch objects of kind CronJob.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJobList object
     */
    Observable<V2alpha1CronJobList> listCronJobForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind CronJob.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJobList object
     */
    Observable<ServiceResponse<V2alpha1CronJobList>> listCronJobForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind CronJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJobList object if successful.
     */
    V2alpha1CronJobList listNamespacedCronJob(String namespace);

    /**
     * list or watch objects of kind CronJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJobList> listNamespacedCronJobAsync(String namespace, final ServiceCallback<V2alpha1CronJobList> serviceCallback);

    /**
     * list or watch objects of kind CronJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJobList object
     */
    Observable<V2alpha1CronJobList> listNamespacedCronJobAsync(String namespace);

    /**
     * list or watch objects of kind CronJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJobList object
     */
    Observable<ServiceResponse<V2alpha1CronJobList>> listNamespacedCronJobWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind CronJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJobList object if successful.
     */
    V2alpha1CronJobList listNamespacedCronJob(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind CronJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJobList> listNamespacedCronJobAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V2alpha1CronJobList> serviceCallback);

    /**
     * list or watch objects of kind CronJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJobList object
     */
    Observable<V2alpha1CronJobList> listNamespacedCronJobAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind CronJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJobList object
     */
    Observable<ServiceResponse<V2alpha1CronJobList>> listNamespacedCronJobWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob createNamespacedCronJob(V2alpha1CronJob body, String namespace);

    /**
     * create a CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> createNamespacedCronJobAsync(V2alpha1CronJob body, String namespace, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * create a CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> createNamespacedCronJobAsync(V2alpha1CronJob body, String namespace);

    /**
     * create a CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> createNamespacedCronJobWithServiceResponseAsync(V2alpha1CronJob body, String namespace);
    /**
     * create a CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob createNamespacedCronJob(V2alpha1CronJob body, String namespace, String pretty);

    /**
     * create a CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> createNamespacedCronJobAsync(V2alpha1CronJob body, String namespace, String pretty, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * create a CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> createNamespacedCronJobAsync(V2alpha1CronJob body, String namespace, String pretty);

    /**
     * create a CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> createNamespacedCronJobWithServiceResponseAsync(V2alpha1CronJob body, String namespace, String pretty);

    /**
     * delete collection of CronJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedCronJob(String namespace);

    /**
     * delete collection of CronJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedCronJobAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of CronJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedCronJobAsync(String namespace);

    /**
     * delete collection of CronJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedCronJobWithServiceResponseAsync(String namespace);
    /**
     * delete collection of CronJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedCronJob(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of CronJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedCronJobAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of CronJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedCronJobAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of CronJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedCronJobWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified CronJob.
     *
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob readNamespacedCronJob(String name, String namespace);

    /**
     * read the specified CronJob.
     *
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> readNamespacedCronJobAsync(String name, String namespace, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * read the specified CronJob.
     *
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> readNamespacedCronJobAsync(String name, String namespace);

    /**
     * read the specified CronJob.
     *
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> readNamespacedCronJobWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified CronJob.
     *
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob readNamespacedCronJob(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified CronJob.
     *
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> readNamespacedCronJobAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * read the specified CronJob.
     *
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> readNamespacedCronJobAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified CronJob.
     *
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> readNamespacedCronJobWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob replaceNamespacedCronJob(V2alpha1CronJob body, String name, String namespace);

    /**
     * replace the specified CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> replaceNamespacedCronJobAsync(V2alpha1CronJob body, String name, String namespace, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * replace the specified CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> replaceNamespacedCronJobAsync(V2alpha1CronJob body, String name, String namespace);

    /**
     * replace the specified CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> replaceNamespacedCronJobWithServiceResponseAsync(V2alpha1CronJob body, String name, String namespace);
    /**
     * replace the specified CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob replaceNamespacedCronJob(V2alpha1CronJob body, String name, String namespace, String pretty);

    /**
     * replace the specified CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> replaceNamespacedCronJobAsync(V2alpha1CronJob body, String name, String namespace, String pretty, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * replace the specified CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> replaceNamespacedCronJobAsync(V2alpha1CronJob body, String name, String namespace, String pretty);

    /**
     * replace the specified CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> replaceNamespacedCronJobWithServiceResponseAsync(V2alpha1CronJob body, String name, String namespace, String pretty);

    /**
     * delete a CronJob.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedCronJob(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a CronJob.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedCronJobAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a CronJob.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedCronJobAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a CronJob.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedCronJobWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a CronJob.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedCronJob(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a CronJob.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedCronJobAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a CronJob.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedCronJobAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a CronJob.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedCronJobWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified CronJob.
     *
     * @param body the Object value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob patchNamespacedCronJob(Object body, String name, String namespace);

    /**
     * partially update the specified CronJob.
     *
     * @param body the Object value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> patchNamespacedCronJobAsync(Object body, String name, String namespace, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * partially update the specified CronJob.
     *
     * @param body the Object value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> patchNamespacedCronJobAsync(Object body, String name, String namespace);

    /**
     * partially update the specified CronJob.
     *
     * @param body the Object value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> patchNamespacedCronJobWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified CronJob.
     *
     * @param body the Object value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob patchNamespacedCronJob(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified CronJob.
     *
     * @param body the Object value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> patchNamespacedCronJobAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * partially update the specified CronJob.
     *
     * @param body the Object value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> patchNamespacedCronJobAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified CronJob.
     *
     * @param body the Object value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> patchNamespacedCronJobWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read status of the specified CronJob.
     *
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob readNamespacedCronJobStatus(String name, String namespace);

    /**
     * read status of the specified CronJob.
     *
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> readNamespacedCronJobStatusAsync(String name, String namespace, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * read status of the specified CronJob.
     *
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> readNamespacedCronJobStatusAsync(String name, String namespace);

    /**
     * read status of the specified CronJob.
     *
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> readNamespacedCronJobStatusWithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified CronJob.
     *
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob readNamespacedCronJobStatus(String name, String namespace, String pretty);

    /**
     * read status of the specified CronJob.
     *
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> readNamespacedCronJobStatusAsync(String name, String namespace, String pretty, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * read status of the specified CronJob.
     *
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> readNamespacedCronJobStatusAsync(String name, String namespace, String pretty);

    /**
     * read status of the specified CronJob.
     *
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> readNamespacedCronJobStatusWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob replaceNamespacedCronJobStatus(V2alpha1CronJob body, String name, String namespace);

    /**
     * replace status of the specified CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> replaceNamespacedCronJobStatusAsync(V2alpha1CronJob body, String name, String namespace, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * replace status of the specified CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> replaceNamespacedCronJobStatusAsync(V2alpha1CronJob body, String name, String namespace);

    /**
     * replace status of the specified CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> replaceNamespacedCronJobStatusWithServiceResponseAsync(V2alpha1CronJob body, String name, String namespace);
    /**
     * replace status of the specified CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob replaceNamespacedCronJobStatus(V2alpha1CronJob body, String name, String namespace, String pretty);

    /**
     * replace status of the specified CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> replaceNamespacedCronJobStatusAsync(V2alpha1CronJob body, String name, String namespace, String pretty, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * replace status of the specified CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> replaceNamespacedCronJobStatusAsync(V2alpha1CronJob body, String name, String namespace, String pretty);

    /**
     * replace status of the specified CronJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> replaceNamespacedCronJobStatusWithServiceResponseAsync(V2alpha1CronJob body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified CronJob.
     *
     * @param body the Object value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob patchNamespacedCronJobStatus(Object body, String name, String namespace);

    /**
     * partially update status of the specified CronJob.
     *
     * @param body the Object value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> patchNamespacedCronJobStatusAsync(Object body, String name, String namespace, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * partially update status of the specified CronJob.
     *
     * @param body the Object value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> patchNamespacedCronJobStatusAsync(Object body, String name, String namespace);

    /**
     * partially update status of the specified CronJob.
     *
     * @param body the Object value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> patchNamespacedCronJobStatusWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified CronJob.
     *
     * @param body the Object value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob patchNamespacedCronJobStatus(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified CronJob.
     *
     * @param body the Object value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> patchNamespacedCronJobStatusAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * partially update status of the specified CronJob.
     *
     * @param body the Object value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> patchNamespacedCronJobStatusAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified CronJob.
     *
     * @param body the Object value
     * @param name name of the CronJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> patchNamespacedCronJobStatusWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind ScheduledJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJobList object if successful.
     */
    V2alpha1CronJobList listNamespacedScheduledJob(String namespace);

    /**
     * list or watch objects of kind ScheduledJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJobList> listNamespacedScheduledJobAsync(String namespace, final ServiceCallback<V2alpha1CronJobList> serviceCallback);

    /**
     * list or watch objects of kind ScheduledJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJobList object
     */
    Observable<V2alpha1CronJobList> listNamespacedScheduledJobAsync(String namespace);

    /**
     * list or watch objects of kind ScheduledJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJobList object
     */
    Observable<ServiceResponse<V2alpha1CronJobList>> listNamespacedScheduledJobWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind ScheduledJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJobList object if successful.
     */
    V2alpha1CronJobList listNamespacedScheduledJob(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ScheduledJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJobList> listNamespacedScheduledJobAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V2alpha1CronJobList> serviceCallback);

    /**
     * list or watch objects of kind ScheduledJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJobList object
     */
    Observable<V2alpha1CronJobList> listNamespacedScheduledJobAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ScheduledJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJobList object
     */
    Observable<ServiceResponse<V2alpha1CronJobList>> listNamespacedScheduledJobWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob createNamespacedScheduledJob(V2alpha1CronJob body, String namespace);

    /**
     * create a ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> createNamespacedScheduledJobAsync(V2alpha1CronJob body, String namespace, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * create a ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> createNamespacedScheduledJobAsync(V2alpha1CronJob body, String namespace);

    /**
     * create a ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> createNamespacedScheduledJobWithServiceResponseAsync(V2alpha1CronJob body, String namespace);
    /**
     * create a ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob createNamespacedScheduledJob(V2alpha1CronJob body, String namespace, String pretty);

    /**
     * create a ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> createNamespacedScheduledJobAsync(V2alpha1CronJob body, String namespace, String pretty, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * create a ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> createNamespacedScheduledJobAsync(V2alpha1CronJob body, String namespace, String pretty);

    /**
     * create a ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> createNamespacedScheduledJobWithServiceResponseAsync(V2alpha1CronJob body, String namespace, String pretty);

    /**
     * delete collection of ScheduledJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedScheduledJob(String namespace);

    /**
     * delete collection of ScheduledJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedScheduledJobAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ScheduledJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedScheduledJobAsync(String namespace);

    /**
     * delete collection of ScheduledJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedScheduledJobWithServiceResponseAsync(String namespace);
    /**
     * delete collection of ScheduledJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedScheduledJob(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ScheduledJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedScheduledJobAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ScheduledJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedScheduledJobAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ScheduledJob.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedScheduledJobWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified ScheduledJob.
     *
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob readNamespacedScheduledJob(String name, String namespace);

    /**
     * read the specified ScheduledJob.
     *
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> readNamespacedScheduledJobAsync(String name, String namespace, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * read the specified ScheduledJob.
     *
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> readNamespacedScheduledJobAsync(String name, String namespace);

    /**
     * read the specified ScheduledJob.
     *
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> readNamespacedScheduledJobWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified ScheduledJob.
     *
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob readNamespacedScheduledJob(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified ScheduledJob.
     *
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> readNamespacedScheduledJobAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * read the specified ScheduledJob.
     *
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> readNamespacedScheduledJobAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified ScheduledJob.
     *
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> readNamespacedScheduledJobWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob replaceNamespacedScheduledJob(V2alpha1CronJob body, String name, String namespace);

    /**
     * replace the specified ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> replaceNamespacedScheduledJobAsync(V2alpha1CronJob body, String name, String namespace, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * replace the specified ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> replaceNamespacedScheduledJobAsync(V2alpha1CronJob body, String name, String namespace);

    /**
     * replace the specified ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> replaceNamespacedScheduledJobWithServiceResponseAsync(V2alpha1CronJob body, String name, String namespace);
    /**
     * replace the specified ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob replaceNamespacedScheduledJob(V2alpha1CronJob body, String name, String namespace, String pretty);

    /**
     * replace the specified ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> replaceNamespacedScheduledJobAsync(V2alpha1CronJob body, String name, String namespace, String pretty, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * replace the specified ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> replaceNamespacedScheduledJobAsync(V2alpha1CronJob body, String name, String namespace, String pretty);

    /**
     * replace the specified ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> replaceNamespacedScheduledJobWithServiceResponseAsync(V2alpha1CronJob body, String name, String namespace, String pretty);

    /**
     * delete a ScheduledJob.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedScheduledJob(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a ScheduledJob.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedScheduledJobAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ScheduledJob.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedScheduledJobAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a ScheduledJob.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedScheduledJobWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a ScheduledJob.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedScheduledJob(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ScheduledJob.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedScheduledJobAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ScheduledJob.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedScheduledJobAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ScheduledJob.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedScheduledJobWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified ScheduledJob.
     *
     * @param body the Object value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob patchNamespacedScheduledJob(Object body, String name, String namespace);

    /**
     * partially update the specified ScheduledJob.
     *
     * @param body the Object value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> patchNamespacedScheduledJobAsync(Object body, String name, String namespace, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * partially update the specified ScheduledJob.
     *
     * @param body the Object value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> patchNamespacedScheduledJobAsync(Object body, String name, String namespace);

    /**
     * partially update the specified ScheduledJob.
     *
     * @param body the Object value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> patchNamespacedScheduledJobWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified ScheduledJob.
     *
     * @param body the Object value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob patchNamespacedScheduledJob(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified ScheduledJob.
     *
     * @param body the Object value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> patchNamespacedScheduledJobAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * partially update the specified ScheduledJob.
     *
     * @param body the Object value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> patchNamespacedScheduledJobAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified ScheduledJob.
     *
     * @param body the Object value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> patchNamespacedScheduledJobWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read status of the specified ScheduledJob.
     *
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob readNamespacedScheduledJobStatus(String name, String namespace);

    /**
     * read status of the specified ScheduledJob.
     *
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> readNamespacedScheduledJobStatusAsync(String name, String namespace, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * read status of the specified ScheduledJob.
     *
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> readNamespacedScheduledJobStatusAsync(String name, String namespace);

    /**
     * read status of the specified ScheduledJob.
     *
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> readNamespacedScheduledJobStatusWithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified ScheduledJob.
     *
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob readNamespacedScheduledJobStatus(String name, String namespace, String pretty);

    /**
     * read status of the specified ScheduledJob.
     *
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> readNamespacedScheduledJobStatusAsync(String name, String namespace, String pretty, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * read status of the specified ScheduledJob.
     *
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> readNamespacedScheduledJobStatusAsync(String name, String namespace, String pretty);

    /**
     * read status of the specified ScheduledJob.
     *
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> readNamespacedScheduledJobStatusWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob replaceNamespacedScheduledJobStatus(V2alpha1CronJob body, String name, String namespace);

    /**
     * replace status of the specified ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> replaceNamespacedScheduledJobStatusAsync(V2alpha1CronJob body, String name, String namespace, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * replace status of the specified ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> replaceNamespacedScheduledJobStatusAsync(V2alpha1CronJob body, String name, String namespace);

    /**
     * replace status of the specified ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> replaceNamespacedScheduledJobStatusWithServiceResponseAsync(V2alpha1CronJob body, String name, String namespace);
    /**
     * replace status of the specified ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob replaceNamespacedScheduledJobStatus(V2alpha1CronJob body, String name, String namespace, String pretty);

    /**
     * replace status of the specified ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> replaceNamespacedScheduledJobStatusAsync(V2alpha1CronJob body, String name, String namespace, String pretty, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * replace status of the specified ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> replaceNamespacedScheduledJobStatusAsync(V2alpha1CronJob body, String name, String namespace, String pretty);

    /**
     * replace status of the specified ScheduledJob.
     *
     * @param body the V2alpha1CronJob value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> replaceNamespacedScheduledJobStatusWithServiceResponseAsync(V2alpha1CronJob body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified ScheduledJob.
     *
     * @param body the Object value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob patchNamespacedScheduledJobStatus(Object body, String name, String namespace);

    /**
     * partially update status of the specified ScheduledJob.
     *
     * @param body the Object value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> patchNamespacedScheduledJobStatusAsync(Object body, String name, String namespace, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * partially update status of the specified ScheduledJob.
     *
     * @param body the Object value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> patchNamespacedScheduledJobStatusAsync(Object body, String name, String namespace);

    /**
     * partially update status of the specified ScheduledJob.
     *
     * @param body the Object value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> patchNamespacedScheduledJobStatusWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified ScheduledJob.
     *
     * @param body the Object value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJob object if successful.
     */
    V2alpha1CronJob patchNamespacedScheduledJobStatus(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified ScheduledJob.
     *
     * @param body the Object value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJob> patchNamespacedScheduledJobStatusAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V2alpha1CronJob> serviceCallback);

    /**
     * partially update status of the specified ScheduledJob.
     *
     * @param body the Object value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<V2alpha1CronJob> patchNamespacedScheduledJobStatusAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified ScheduledJob.
     *
     * @param body the Object value
     * @param name name of the ScheduledJob
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJob object
     */
    Observable<ServiceResponse<V2alpha1CronJob>> patchNamespacedScheduledJobStatusWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind ScheduledJob.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJobList object if successful.
     */
    V2alpha1CronJobList listScheduledJobForAllNamespaces();

    /**
     * list or watch objects of kind ScheduledJob.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJobList> listScheduledJobForAllNamespacesAsync(final ServiceCallback<V2alpha1CronJobList> serviceCallback);

    /**
     * list or watch objects of kind ScheduledJob.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJobList object
     */
    Observable<V2alpha1CronJobList> listScheduledJobForAllNamespacesAsync();

    /**
     * list or watch objects of kind ScheduledJob.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJobList object
     */
    Observable<ServiceResponse<V2alpha1CronJobList>> listScheduledJobForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind ScheduledJob.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V2alpha1CronJobList object if successful.
     */
    V2alpha1CronJobList listScheduledJobForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind ScheduledJob.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V2alpha1CronJobList> listScheduledJobForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V2alpha1CronJobList> serviceCallback);

    /**
     * list or watch objects of kind ScheduledJob.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJobList object
     */
    Observable<V2alpha1CronJobList> listScheduledJobForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind ScheduledJob.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V2alpha1CronJobList object
     */
    Observable<ServiceResponse<V2alpha1CronJobList>> listScheduledJobForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIGroup object if successful.
     */
    V1APIGroup getAPIGroup5();

    /**
     * get information of a group.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIGroup> getAPIGroup5Async(final ServiceCallback<V1APIGroup> serviceCallback);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<V1APIGroup> getAPIGroup5Async();

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<ServiceResponse<V1APIGroup>> getAPIGroup5WithServiceResponseAsync();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources10();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources10Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources10Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources10WithServiceResponseAsync();

    /**
     * list or watch objects of kind CertificateSigningRequest.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1CertificateSigningRequestList object if successful.
     */
    V1beta1CertificateSigningRequestList listCertificateSigningRequest();

    /**
     * list or watch objects of kind CertificateSigningRequest.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1CertificateSigningRequestList> listCertificateSigningRequestAsync(final ServiceCallback<V1beta1CertificateSigningRequestList> serviceCallback);

    /**
     * list or watch objects of kind CertificateSigningRequest.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequestList object
     */
    Observable<V1beta1CertificateSigningRequestList> listCertificateSigningRequestAsync();

    /**
     * list or watch objects of kind CertificateSigningRequest.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequestList object
     */
    Observable<ServiceResponse<V1beta1CertificateSigningRequestList>> listCertificateSigningRequestWithServiceResponseAsync();
    /**
     * list or watch objects of kind CertificateSigningRequest.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1CertificateSigningRequestList object if successful.
     */
    V1beta1CertificateSigningRequestList listCertificateSigningRequest(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind CertificateSigningRequest.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1CertificateSigningRequestList> listCertificateSigningRequestAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1beta1CertificateSigningRequestList> serviceCallback);

    /**
     * list or watch objects of kind CertificateSigningRequest.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequestList object
     */
    Observable<V1beta1CertificateSigningRequestList> listCertificateSigningRequestAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind CertificateSigningRequest.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequestList object
     */
    Observable<ServiceResponse<V1beta1CertificateSigningRequestList>> listCertificateSigningRequestWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1CertificateSigningRequest object if successful.
     */
    V1beta1CertificateSigningRequest createCertificateSigningRequest(V1beta1CertificateSigningRequest body);

    /**
     * create a CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1CertificateSigningRequest> createCertificateSigningRequestAsync(V1beta1CertificateSigningRequest body, final ServiceCallback<V1beta1CertificateSigningRequest> serviceCallback);

    /**
     * create a CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<V1beta1CertificateSigningRequest> createCertificateSigningRequestAsync(V1beta1CertificateSigningRequest body);

    /**
     * create a CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<ServiceResponse<V1beta1CertificateSigningRequest>> createCertificateSigningRequestWithServiceResponseAsync(V1beta1CertificateSigningRequest body);
    /**
     * create a CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1CertificateSigningRequest object if successful.
     */
    V1beta1CertificateSigningRequest createCertificateSigningRequest(V1beta1CertificateSigningRequest body, String pretty);

    /**
     * create a CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1CertificateSigningRequest> createCertificateSigningRequestAsync(V1beta1CertificateSigningRequest body, String pretty, final ServiceCallback<V1beta1CertificateSigningRequest> serviceCallback);

    /**
     * create a CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<V1beta1CertificateSigningRequest> createCertificateSigningRequestAsync(V1beta1CertificateSigningRequest body, String pretty);

    /**
     * create a CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<ServiceResponse<V1beta1CertificateSigningRequest>> createCertificateSigningRequestWithServiceResponseAsync(V1beta1CertificateSigningRequest body, String pretty);

    /**
     * delete collection of CertificateSigningRequest.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionCertificateSigningRequest();

    /**
     * delete collection of CertificateSigningRequest.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionCertificateSigningRequestAsync(final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of CertificateSigningRequest.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionCertificateSigningRequestAsync();

    /**
     * delete collection of CertificateSigningRequest.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionCertificateSigningRequestWithServiceResponseAsync();
    /**
     * delete collection of CertificateSigningRequest.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionCertificateSigningRequest(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of CertificateSigningRequest.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionCertificateSigningRequestAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of CertificateSigningRequest.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionCertificateSigningRequestAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of CertificateSigningRequest.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionCertificateSigningRequestWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified CertificateSigningRequest.
     *
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1CertificateSigningRequest object if successful.
     */
    V1beta1CertificateSigningRequest readCertificateSigningRequest(String name);

    /**
     * read the specified CertificateSigningRequest.
     *
     * @param name name of the CertificateSigningRequest
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1CertificateSigningRequest> readCertificateSigningRequestAsync(String name, final ServiceCallback<V1beta1CertificateSigningRequest> serviceCallback);

    /**
     * read the specified CertificateSigningRequest.
     *
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<V1beta1CertificateSigningRequest> readCertificateSigningRequestAsync(String name);

    /**
     * read the specified CertificateSigningRequest.
     *
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<ServiceResponse<V1beta1CertificateSigningRequest>> readCertificateSigningRequestWithServiceResponseAsync(String name);
    /**
     * read the specified CertificateSigningRequest.
     *
     * @param name name of the CertificateSigningRequest
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1CertificateSigningRequest object if successful.
     */
    V1beta1CertificateSigningRequest readCertificateSigningRequest(String name, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified CertificateSigningRequest.
     *
     * @param name name of the CertificateSigningRequest
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1CertificateSigningRequest> readCertificateSigningRequestAsync(String name, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1beta1CertificateSigningRequest> serviceCallback);

    /**
     * read the specified CertificateSigningRequest.
     *
     * @param name name of the CertificateSigningRequest
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<V1beta1CertificateSigningRequest> readCertificateSigningRequestAsync(String name, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified CertificateSigningRequest.
     *
     * @param name name of the CertificateSigningRequest
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<ServiceResponse<V1beta1CertificateSigningRequest>> readCertificateSigningRequestWithServiceResponseAsync(String name, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1CertificateSigningRequest object if successful.
     */
    V1beta1CertificateSigningRequest replaceCertificateSigningRequest(V1beta1CertificateSigningRequest body, String name);

    /**
     * replace the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1CertificateSigningRequest> replaceCertificateSigningRequestAsync(V1beta1CertificateSigningRequest body, String name, final ServiceCallback<V1beta1CertificateSigningRequest> serviceCallback);

    /**
     * replace the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<V1beta1CertificateSigningRequest> replaceCertificateSigningRequestAsync(V1beta1CertificateSigningRequest body, String name);

    /**
     * replace the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<ServiceResponse<V1beta1CertificateSigningRequest>> replaceCertificateSigningRequestWithServiceResponseAsync(V1beta1CertificateSigningRequest body, String name);
    /**
     * replace the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1CertificateSigningRequest object if successful.
     */
    V1beta1CertificateSigningRequest replaceCertificateSigningRequest(V1beta1CertificateSigningRequest body, String name, String pretty);

    /**
     * replace the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1CertificateSigningRequest> replaceCertificateSigningRequestAsync(V1beta1CertificateSigningRequest body, String name, String pretty, final ServiceCallback<V1beta1CertificateSigningRequest> serviceCallback);

    /**
     * replace the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<V1beta1CertificateSigningRequest> replaceCertificateSigningRequestAsync(V1beta1CertificateSigningRequest body, String name, String pretty);

    /**
     * replace the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<ServiceResponse<V1beta1CertificateSigningRequest>> replaceCertificateSigningRequestWithServiceResponseAsync(V1beta1CertificateSigningRequest body, String name, String pretty);

    /**
     * delete a CertificateSigningRequest.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCertificateSigningRequest(V1DeleteOptions body, String name);

    /**
     * delete a CertificateSigningRequest.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the CertificateSigningRequest
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCertificateSigningRequestAsync(V1DeleteOptions body, String name, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a CertificateSigningRequest.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCertificateSigningRequestAsync(V1DeleteOptions body, String name);

    /**
     * delete a CertificateSigningRequest.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCertificateSigningRequestWithServiceResponseAsync(V1DeleteOptions body, String name);
    /**
     * delete a CertificateSigningRequest.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the CertificateSigningRequest
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCertificateSigningRequest(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a CertificateSigningRequest.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the CertificateSigningRequest
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCertificateSigningRequestAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a CertificateSigningRequest.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the CertificateSigningRequest
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCertificateSigningRequestAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a CertificateSigningRequest.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the CertificateSigningRequest
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCertificateSigningRequestWithServiceResponseAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified CertificateSigningRequest.
     *
     * @param body the Object value
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1CertificateSigningRequest object if successful.
     */
    V1beta1CertificateSigningRequest patchCertificateSigningRequest(Object body, String name);

    /**
     * partially update the specified CertificateSigningRequest.
     *
     * @param body the Object value
     * @param name name of the CertificateSigningRequest
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1CertificateSigningRequest> patchCertificateSigningRequestAsync(Object body, String name, final ServiceCallback<V1beta1CertificateSigningRequest> serviceCallback);

    /**
     * partially update the specified CertificateSigningRequest.
     *
     * @param body the Object value
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<V1beta1CertificateSigningRequest> patchCertificateSigningRequestAsync(Object body, String name);

    /**
     * partially update the specified CertificateSigningRequest.
     *
     * @param body the Object value
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<ServiceResponse<V1beta1CertificateSigningRequest>> patchCertificateSigningRequestWithServiceResponseAsync(Object body, String name);
    /**
     * partially update the specified CertificateSigningRequest.
     *
     * @param body the Object value
     * @param name name of the CertificateSigningRequest
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1CertificateSigningRequest object if successful.
     */
    V1beta1CertificateSigningRequest patchCertificateSigningRequest(Object body, String name, String pretty);

    /**
     * partially update the specified CertificateSigningRequest.
     *
     * @param body the Object value
     * @param name name of the CertificateSigningRequest
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1CertificateSigningRequest> patchCertificateSigningRequestAsync(Object body, String name, String pretty, final ServiceCallback<V1beta1CertificateSigningRequest> serviceCallback);

    /**
     * partially update the specified CertificateSigningRequest.
     *
     * @param body the Object value
     * @param name name of the CertificateSigningRequest
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<V1beta1CertificateSigningRequest> patchCertificateSigningRequestAsync(Object body, String name, String pretty);

    /**
     * partially update the specified CertificateSigningRequest.
     *
     * @param body the Object value
     * @param name name of the CertificateSigningRequest
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<ServiceResponse<V1beta1CertificateSigningRequest>> patchCertificateSigningRequestWithServiceResponseAsync(Object body, String name, String pretty);

    /**
     * replace approval of the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1CertificateSigningRequest object if successful.
     */
    V1beta1CertificateSigningRequest replaceCertificateSigningRequestApproval(V1beta1CertificateSigningRequest body, String name);

    /**
     * replace approval of the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1CertificateSigningRequest> replaceCertificateSigningRequestApprovalAsync(V1beta1CertificateSigningRequest body, String name, final ServiceCallback<V1beta1CertificateSigningRequest> serviceCallback);

    /**
     * replace approval of the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<V1beta1CertificateSigningRequest> replaceCertificateSigningRequestApprovalAsync(V1beta1CertificateSigningRequest body, String name);

    /**
     * replace approval of the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<ServiceResponse<V1beta1CertificateSigningRequest>> replaceCertificateSigningRequestApprovalWithServiceResponseAsync(V1beta1CertificateSigningRequest body, String name);
    /**
     * replace approval of the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1CertificateSigningRequest object if successful.
     */
    V1beta1CertificateSigningRequest replaceCertificateSigningRequestApproval(V1beta1CertificateSigningRequest body, String name, String pretty);

    /**
     * replace approval of the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1CertificateSigningRequest> replaceCertificateSigningRequestApprovalAsync(V1beta1CertificateSigningRequest body, String name, String pretty, final ServiceCallback<V1beta1CertificateSigningRequest> serviceCallback);

    /**
     * replace approval of the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<V1beta1CertificateSigningRequest> replaceCertificateSigningRequestApprovalAsync(V1beta1CertificateSigningRequest body, String name, String pretty);

    /**
     * replace approval of the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<ServiceResponse<V1beta1CertificateSigningRequest>> replaceCertificateSigningRequestApprovalWithServiceResponseAsync(V1beta1CertificateSigningRequest body, String name, String pretty);

    /**
     * replace status of the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1CertificateSigningRequest object if successful.
     */
    V1beta1CertificateSigningRequest replaceCertificateSigningRequestStatus(V1beta1CertificateSigningRequest body, String name);

    /**
     * replace status of the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1CertificateSigningRequest> replaceCertificateSigningRequestStatusAsync(V1beta1CertificateSigningRequest body, String name, final ServiceCallback<V1beta1CertificateSigningRequest> serviceCallback);

    /**
     * replace status of the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<V1beta1CertificateSigningRequest> replaceCertificateSigningRequestStatusAsync(V1beta1CertificateSigningRequest body, String name);

    /**
     * replace status of the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<ServiceResponse<V1beta1CertificateSigningRequest>> replaceCertificateSigningRequestStatusWithServiceResponseAsync(V1beta1CertificateSigningRequest body, String name);
    /**
     * replace status of the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1CertificateSigningRequest object if successful.
     */
    V1beta1CertificateSigningRequest replaceCertificateSigningRequestStatus(V1beta1CertificateSigningRequest body, String name, String pretty);

    /**
     * replace status of the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1CertificateSigningRequest> replaceCertificateSigningRequestStatusAsync(V1beta1CertificateSigningRequest body, String name, String pretty, final ServiceCallback<V1beta1CertificateSigningRequest> serviceCallback);

    /**
     * replace status of the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<V1beta1CertificateSigningRequest> replaceCertificateSigningRequestStatusAsync(V1beta1CertificateSigningRequest body, String name, String pretty);

    /**
     * replace status of the specified CertificateSigningRequest.
     *
     * @param body the V1beta1CertificateSigningRequest value
     * @param name name of the CertificateSigningRequest
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1CertificateSigningRequest object
     */
    Observable<ServiceResponse<V1beta1CertificateSigningRequest>> replaceCertificateSigningRequestStatusWithServiceResponseAsync(V1beta1CertificateSigningRequest body, String name, String pretty);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIGroup object if successful.
     */
    V1APIGroup getAPIGroup6();

    /**
     * get information of a group.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIGroup> getAPIGroup6Async(final ServiceCallback<V1APIGroup> serviceCallback);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<V1APIGroup> getAPIGroup6Async();

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<ServiceResponse<V1APIGroup>> getAPIGroup6WithServiceResponseAsync();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources11();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources11Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources11Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources11WithServiceResponseAsync();

    /**
     * list or watch objects of kind DaemonSet.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSetList object if successful.
     */
    V1beta1DaemonSetList listDaemonSetForAllNamespaces();

    /**
     * list or watch objects of kind DaemonSet.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSetList> listDaemonSetForAllNamespacesAsync(final ServiceCallback<V1beta1DaemonSetList> serviceCallback);

    /**
     * list or watch objects of kind DaemonSet.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSetList object
     */
    Observable<V1beta1DaemonSetList> listDaemonSetForAllNamespacesAsync();

    /**
     * list or watch objects of kind DaemonSet.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSetList object
     */
    Observable<ServiceResponse<V1beta1DaemonSetList>> listDaemonSetForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind DaemonSet.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSetList object if successful.
     */
    V1beta1DaemonSetList listDaemonSetForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind DaemonSet.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSetList> listDaemonSetForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1beta1DaemonSetList> serviceCallback);

    /**
     * list or watch objects of kind DaemonSet.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSetList object
     */
    Observable<V1beta1DaemonSetList> listDaemonSetForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind DaemonSet.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSetList object
     */
    Observable<ServiceResponse<V1beta1DaemonSetList>> listDaemonSetForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Deployment.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1DeploymentList object if successful.
     */
    Extensionsv1beta1DeploymentList listDeploymentForAllNamespaces1();

    /**
     * list or watch objects of kind Deployment.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1DeploymentList> listDeploymentForAllNamespaces1Async(final ServiceCallback<Extensionsv1beta1DeploymentList> serviceCallback);

    /**
     * list or watch objects of kind Deployment.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1DeploymentList object
     */
    Observable<Extensionsv1beta1DeploymentList> listDeploymentForAllNamespaces1Async();

    /**
     * list or watch objects of kind Deployment.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1DeploymentList object
     */
    Observable<ServiceResponse<Extensionsv1beta1DeploymentList>> listDeploymentForAllNamespaces1WithServiceResponseAsync();
    /**
     * list or watch objects of kind Deployment.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1DeploymentList object if successful.
     */
    Extensionsv1beta1DeploymentList listDeploymentForAllNamespaces1(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1DeploymentList> listDeploymentForAllNamespaces1Async(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<Extensionsv1beta1DeploymentList> serviceCallback);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1DeploymentList object
     */
    Observable<Extensionsv1beta1DeploymentList> listDeploymentForAllNamespaces1Async(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1DeploymentList object
     */
    Observable<ServiceResponse<Extensionsv1beta1DeploymentList>> listDeploymentForAllNamespaces1WithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Ingress.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1IngressList object if successful.
     */
    V1beta1IngressList listIngressForAllNamespaces();

    /**
     * list or watch objects of kind Ingress.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1IngressList> listIngressForAllNamespacesAsync(final ServiceCallback<V1beta1IngressList> serviceCallback);

    /**
     * list or watch objects of kind Ingress.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1IngressList object
     */
    Observable<V1beta1IngressList> listIngressForAllNamespacesAsync();

    /**
     * list or watch objects of kind Ingress.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1IngressList object
     */
    Observable<ServiceResponse<V1beta1IngressList>> listIngressForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind Ingress.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1IngressList object if successful.
     */
    V1beta1IngressList listIngressForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Ingress.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1IngressList> listIngressForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1beta1IngressList> serviceCallback);

    /**
     * list or watch objects of kind Ingress.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1IngressList object
     */
    Observable<V1beta1IngressList> listIngressForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Ingress.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1IngressList object
     */
    Observable<ServiceResponse<V1beta1IngressList>> listIngressForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind DaemonSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSetList object if successful.
     */
    V1beta1DaemonSetList listNamespacedDaemonSet(String namespace);

    /**
     * list or watch objects of kind DaemonSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSetList> listNamespacedDaemonSetAsync(String namespace, final ServiceCallback<V1beta1DaemonSetList> serviceCallback);

    /**
     * list or watch objects of kind DaemonSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSetList object
     */
    Observable<V1beta1DaemonSetList> listNamespacedDaemonSetAsync(String namespace);

    /**
     * list or watch objects of kind DaemonSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSetList object
     */
    Observable<ServiceResponse<V1beta1DaemonSetList>> listNamespacedDaemonSetWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind DaemonSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSetList object if successful.
     */
    V1beta1DaemonSetList listNamespacedDaemonSet(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind DaemonSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSetList> listNamespacedDaemonSetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1beta1DaemonSetList> serviceCallback);

    /**
     * list or watch objects of kind DaemonSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSetList object
     */
    Observable<V1beta1DaemonSetList> listNamespacedDaemonSetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind DaemonSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSetList object
     */
    Observable<ServiceResponse<V1beta1DaemonSetList>> listNamespacedDaemonSetWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSet object if successful.
     */
    V1beta1DaemonSet createNamespacedDaemonSet(V1beta1DaemonSet body, String namespace);

    /**
     * create a DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSet> createNamespacedDaemonSetAsync(V1beta1DaemonSet body, String namespace, final ServiceCallback<V1beta1DaemonSet> serviceCallback);

    /**
     * create a DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<V1beta1DaemonSet> createNamespacedDaemonSetAsync(V1beta1DaemonSet body, String namespace);

    /**
     * create a DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<ServiceResponse<V1beta1DaemonSet>> createNamespacedDaemonSetWithServiceResponseAsync(V1beta1DaemonSet body, String namespace);
    /**
     * create a DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSet object if successful.
     */
    V1beta1DaemonSet createNamespacedDaemonSet(V1beta1DaemonSet body, String namespace, String pretty);

    /**
     * create a DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSet> createNamespacedDaemonSetAsync(V1beta1DaemonSet body, String namespace, String pretty, final ServiceCallback<V1beta1DaemonSet> serviceCallback);

    /**
     * create a DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<V1beta1DaemonSet> createNamespacedDaemonSetAsync(V1beta1DaemonSet body, String namespace, String pretty);

    /**
     * create a DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<ServiceResponse<V1beta1DaemonSet>> createNamespacedDaemonSetWithServiceResponseAsync(V1beta1DaemonSet body, String namespace, String pretty);

    /**
     * delete collection of DaemonSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedDaemonSet(String namespace);

    /**
     * delete collection of DaemonSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedDaemonSetAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of DaemonSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedDaemonSetAsync(String namespace);

    /**
     * delete collection of DaemonSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedDaemonSetWithServiceResponseAsync(String namespace);
    /**
     * delete collection of DaemonSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedDaemonSet(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of DaemonSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedDaemonSetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of DaemonSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedDaemonSetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of DaemonSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedDaemonSetWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified DaemonSet.
     *
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSet object if successful.
     */
    V1beta1DaemonSet readNamespacedDaemonSet(String name, String namespace);

    /**
     * read the specified DaemonSet.
     *
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSet> readNamespacedDaemonSetAsync(String name, String namespace, final ServiceCallback<V1beta1DaemonSet> serviceCallback);

    /**
     * read the specified DaemonSet.
     *
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<V1beta1DaemonSet> readNamespacedDaemonSetAsync(String name, String namespace);

    /**
     * read the specified DaemonSet.
     *
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<ServiceResponse<V1beta1DaemonSet>> readNamespacedDaemonSetWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified DaemonSet.
     *
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSet object if successful.
     */
    V1beta1DaemonSet readNamespacedDaemonSet(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified DaemonSet.
     *
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSet> readNamespacedDaemonSetAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1beta1DaemonSet> serviceCallback);

    /**
     * read the specified DaemonSet.
     *
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<V1beta1DaemonSet> readNamespacedDaemonSetAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified DaemonSet.
     *
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<ServiceResponse<V1beta1DaemonSet>> readNamespacedDaemonSetWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSet object if successful.
     */
    V1beta1DaemonSet replaceNamespacedDaemonSet(V1beta1DaemonSet body, String name, String namespace);

    /**
     * replace the specified DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSet> replaceNamespacedDaemonSetAsync(V1beta1DaemonSet body, String name, String namespace, final ServiceCallback<V1beta1DaemonSet> serviceCallback);

    /**
     * replace the specified DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<V1beta1DaemonSet> replaceNamespacedDaemonSetAsync(V1beta1DaemonSet body, String name, String namespace);

    /**
     * replace the specified DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<ServiceResponse<V1beta1DaemonSet>> replaceNamespacedDaemonSetWithServiceResponseAsync(V1beta1DaemonSet body, String name, String namespace);
    /**
     * replace the specified DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSet object if successful.
     */
    V1beta1DaemonSet replaceNamespacedDaemonSet(V1beta1DaemonSet body, String name, String namespace, String pretty);

    /**
     * replace the specified DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSet> replaceNamespacedDaemonSetAsync(V1beta1DaemonSet body, String name, String namespace, String pretty, final ServiceCallback<V1beta1DaemonSet> serviceCallback);

    /**
     * replace the specified DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<V1beta1DaemonSet> replaceNamespacedDaemonSetAsync(V1beta1DaemonSet body, String name, String namespace, String pretty);

    /**
     * replace the specified DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<ServiceResponse<V1beta1DaemonSet>> replaceNamespacedDaemonSetWithServiceResponseAsync(V1beta1DaemonSet body, String name, String namespace, String pretty);

    /**
     * delete a DaemonSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedDaemonSet(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a DaemonSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedDaemonSetAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a DaemonSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedDaemonSetAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a DaemonSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedDaemonSetWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a DaemonSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedDaemonSet(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a DaemonSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedDaemonSetAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a DaemonSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedDaemonSetAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a DaemonSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedDaemonSetWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified DaemonSet.
     *
     * @param body the Object value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSet object if successful.
     */
    V1beta1DaemonSet patchNamespacedDaemonSet(Object body, String name, String namespace);

    /**
     * partially update the specified DaemonSet.
     *
     * @param body the Object value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSet> patchNamespacedDaemonSetAsync(Object body, String name, String namespace, final ServiceCallback<V1beta1DaemonSet> serviceCallback);

    /**
     * partially update the specified DaemonSet.
     *
     * @param body the Object value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<V1beta1DaemonSet> patchNamespacedDaemonSetAsync(Object body, String name, String namespace);

    /**
     * partially update the specified DaemonSet.
     *
     * @param body the Object value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<ServiceResponse<V1beta1DaemonSet>> patchNamespacedDaemonSetWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified DaemonSet.
     *
     * @param body the Object value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSet object if successful.
     */
    V1beta1DaemonSet patchNamespacedDaemonSet(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified DaemonSet.
     *
     * @param body the Object value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSet> patchNamespacedDaemonSetAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1beta1DaemonSet> serviceCallback);

    /**
     * partially update the specified DaemonSet.
     *
     * @param body the Object value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<V1beta1DaemonSet> patchNamespacedDaemonSetAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified DaemonSet.
     *
     * @param body the Object value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<ServiceResponse<V1beta1DaemonSet>> patchNamespacedDaemonSetWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read status of the specified DaemonSet.
     *
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSet object if successful.
     */
    V1beta1DaemonSet readNamespacedDaemonSetStatus(String name, String namespace);

    /**
     * read status of the specified DaemonSet.
     *
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSet> readNamespacedDaemonSetStatusAsync(String name, String namespace, final ServiceCallback<V1beta1DaemonSet> serviceCallback);

    /**
     * read status of the specified DaemonSet.
     *
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<V1beta1DaemonSet> readNamespacedDaemonSetStatusAsync(String name, String namespace);

    /**
     * read status of the specified DaemonSet.
     *
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<ServiceResponse<V1beta1DaemonSet>> readNamespacedDaemonSetStatusWithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified DaemonSet.
     *
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSet object if successful.
     */
    V1beta1DaemonSet readNamespacedDaemonSetStatus(String name, String namespace, String pretty);

    /**
     * read status of the specified DaemonSet.
     *
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSet> readNamespacedDaemonSetStatusAsync(String name, String namespace, String pretty, final ServiceCallback<V1beta1DaemonSet> serviceCallback);

    /**
     * read status of the specified DaemonSet.
     *
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<V1beta1DaemonSet> readNamespacedDaemonSetStatusAsync(String name, String namespace, String pretty);

    /**
     * read status of the specified DaemonSet.
     *
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<ServiceResponse<V1beta1DaemonSet>> readNamespacedDaemonSetStatusWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSet object if successful.
     */
    V1beta1DaemonSet replaceNamespacedDaemonSetStatus(V1beta1DaemonSet body, String name, String namespace);

    /**
     * replace status of the specified DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSet> replaceNamespacedDaemonSetStatusAsync(V1beta1DaemonSet body, String name, String namespace, final ServiceCallback<V1beta1DaemonSet> serviceCallback);

    /**
     * replace status of the specified DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<V1beta1DaemonSet> replaceNamespacedDaemonSetStatusAsync(V1beta1DaemonSet body, String name, String namespace);

    /**
     * replace status of the specified DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<ServiceResponse<V1beta1DaemonSet>> replaceNamespacedDaemonSetStatusWithServiceResponseAsync(V1beta1DaemonSet body, String name, String namespace);
    /**
     * replace status of the specified DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSet object if successful.
     */
    V1beta1DaemonSet replaceNamespacedDaemonSetStatus(V1beta1DaemonSet body, String name, String namespace, String pretty);

    /**
     * replace status of the specified DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSet> replaceNamespacedDaemonSetStatusAsync(V1beta1DaemonSet body, String name, String namespace, String pretty, final ServiceCallback<V1beta1DaemonSet> serviceCallback);

    /**
     * replace status of the specified DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<V1beta1DaemonSet> replaceNamespacedDaemonSetStatusAsync(V1beta1DaemonSet body, String name, String namespace, String pretty);

    /**
     * replace status of the specified DaemonSet.
     *
     * @param body the V1beta1DaemonSet value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<ServiceResponse<V1beta1DaemonSet>> replaceNamespacedDaemonSetStatusWithServiceResponseAsync(V1beta1DaemonSet body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified DaemonSet.
     *
     * @param body the Object value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSet object if successful.
     */
    V1beta1DaemonSet patchNamespacedDaemonSetStatus(Object body, String name, String namespace);

    /**
     * partially update status of the specified DaemonSet.
     *
     * @param body the Object value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSet> patchNamespacedDaemonSetStatusAsync(Object body, String name, String namespace, final ServiceCallback<V1beta1DaemonSet> serviceCallback);

    /**
     * partially update status of the specified DaemonSet.
     *
     * @param body the Object value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<V1beta1DaemonSet> patchNamespacedDaemonSetStatusAsync(Object body, String name, String namespace);

    /**
     * partially update status of the specified DaemonSet.
     *
     * @param body the Object value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<ServiceResponse<V1beta1DaemonSet>> patchNamespacedDaemonSetStatusWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified DaemonSet.
     *
     * @param body the Object value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1DaemonSet object if successful.
     */
    V1beta1DaemonSet patchNamespacedDaemonSetStatus(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified DaemonSet.
     *
     * @param body the Object value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1DaemonSet> patchNamespacedDaemonSetStatusAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1beta1DaemonSet> serviceCallback);

    /**
     * partially update status of the specified DaemonSet.
     *
     * @param body the Object value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<V1beta1DaemonSet> patchNamespacedDaemonSetStatusAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified DaemonSet.
     *
     * @param body the Object value
     * @param name name of the DaemonSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1DaemonSet object
     */
    Observable<ServiceResponse<V1beta1DaemonSet>> patchNamespacedDaemonSetStatusWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1DeploymentList object if successful.
     */
    Extensionsv1beta1DeploymentList listNamespacedDeployment1(String namespace);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1DeploymentList> listNamespacedDeployment1Async(String namespace, final ServiceCallback<Extensionsv1beta1DeploymentList> serviceCallback);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1DeploymentList object
     */
    Observable<Extensionsv1beta1DeploymentList> listNamespacedDeployment1Async(String namespace);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1DeploymentList object
     */
    Observable<ServiceResponse<Extensionsv1beta1DeploymentList>> listNamespacedDeployment1WithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1DeploymentList object if successful.
     */
    Extensionsv1beta1DeploymentList listNamespacedDeployment1(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1DeploymentList> listNamespacedDeployment1Async(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<Extensionsv1beta1DeploymentList> serviceCallback);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1DeploymentList object
     */
    Observable<Extensionsv1beta1DeploymentList> listNamespacedDeployment1Async(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1DeploymentList object
     */
    Observable<ServiceResponse<Extensionsv1beta1DeploymentList>> listNamespacedDeployment1WithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Deployment object if successful.
     */
    Extensionsv1beta1Deployment createNamespacedDeployment1(Extensionsv1beta1Deployment body, String namespace);

    /**
     * create a Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Deployment> createNamespacedDeployment1Async(Extensionsv1beta1Deployment body, String namespace, final ServiceCallback<Extensionsv1beta1Deployment> serviceCallback);

    /**
     * create a Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<Extensionsv1beta1Deployment> createNamespacedDeployment1Async(Extensionsv1beta1Deployment body, String namespace);

    /**
     * create a Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<ServiceResponse<Extensionsv1beta1Deployment>> createNamespacedDeployment1WithServiceResponseAsync(Extensionsv1beta1Deployment body, String namespace);
    /**
     * create a Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Deployment object if successful.
     */
    Extensionsv1beta1Deployment createNamespacedDeployment1(Extensionsv1beta1Deployment body, String namespace, String pretty);

    /**
     * create a Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Deployment> createNamespacedDeployment1Async(Extensionsv1beta1Deployment body, String namespace, String pretty, final ServiceCallback<Extensionsv1beta1Deployment> serviceCallback);

    /**
     * create a Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<Extensionsv1beta1Deployment> createNamespacedDeployment1Async(Extensionsv1beta1Deployment body, String namespace, String pretty);

    /**
     * create a Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<ServiceResponse<Extensionsv1beta1Deployment>> createNamespacedDeployment1WithServiceResponseAsync(Extensionsv1beta1Deployment body, String namespace, String pretty);

    /**
     * delete collection of Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedDeployment1(String namespace);

    /**
     * delete collection of Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedDeployment1Async(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedDeployment1Async(String namespace);

    /**
     * delete collection of Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedDeployment1WithServiceResponseAsync(String namespace);
    /**
     * delete collection of Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedDeployment1(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedDeployment1Async(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedDeployment1Async(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Deployment.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedDeployment1WithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Deployment object if successful.
     */
    Extensionsv1beta1Deployment readNamespacedDeployment1(String name, String namespace);

    /**
     * read the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Deployment> readNamespacedDeployment1Async(String name, String namespace, final ServiceCallback<Extensionsv1beta1Deployment> serviceCallback);

    /**
     * read the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<Extensionsv1beta1Deployment> readNamespacedDeployment1Async(String name, String namespace);

    /**
     * read the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<ServiceResponse<Extensionsv1beta1Deployment>> readNamespacedDeployment1WithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Deployment object if successful.
     */
    Extensionsv1beta1Deployment readNamespacedDeployment1(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Deployment> readNamespacedDeployment1Async(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<Extensionsv1beta1Deployment> serviceCallback);

    /**
     * read the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<Extensionsv1beta1Deployment> readNamespacedDeployment1Async(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<ServiceResponse<Extensionsv1beta1Deployment>> readNamespacedDeployment1WithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Deployment object if successful.
     */
    Extensionsv1beta1Deployment replaceNamespacedDeployment1(Extensionsv1beta1Deployment body, String name, String namespace);

    /**
     * replace the specified Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Deployment> replaceNamespacedDeployment1Async(Extensionsv1beta1Deployment body, String name, String namespace, final ServiceCallback<Extensionsv1beta1Deployment> serviceCallback);

    /**
     * replace the specified Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<Extensionsv1beta1Deployment> replaceNamespacedDeployment1Async(Extensionsv1beta1Deployment body, String name, String namespace);

    /**
     * replace the specified Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<ServiceResponse<Extensionsv1beta1Deployment>> replaceNamespacedDeployment1WithServiceResponseAsync(Extensionsv1beta1Deployment body, String name, String namespace);
    /**
     * replace the specified Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Deployment object if successful.
     */
    Extensionsv1beta1Deployment replaceNamespacedDeployment1(Extensionsv1beta1Deployment body, String name, String namespace, String pretty);

    /**
     * replace the specified Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Deployment> replaceNamespacedDeployment1Async(Extensionsv1beta1Deployment body, String name, String namespace, String pretty, final ServiceCallback<Extensionsv1beta1Deployment> serviceCallback);

    /**
     * replace the specified Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<Extensionsv1beta1Deployment> replaceNamespacedDeployment1Async(Extensionsv1beta1Deployment body, String name, String namespace, String pretty);

    /**
     * replace the specified Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<ServiceResponse<Extensionsv1beta1Deployment>> replaceNamespacedDeployment1WithServiceResponseAsync(Extensionsv1beta1Deployment body, String name, String namespace, String pretty);

    /**
     * delete a Deployment.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedDeployment1(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a Deployment.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedDeployment1Async(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Deployment.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedDeployment1Async(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a Deployment.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedDeployment1WithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a Deployment.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedDeployment1(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Deployment.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedDeployment1Async(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Deployment.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedDeployment1Async(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Deployment.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedDeployment1WithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Deployment object if successful.
     */
    Extensionsv1beta1Deployment patchNamespacedDeployment1(Object body, String name, String namespace);

    /**
     * partially update the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Deployment> patchNamespacedDeployment1Async(Object body, String name, String namespace, final ServiceCallback<Extensionsv1beta1Deployment> serviceCallback);

    /**
     * partially update the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<Extensionsv1beta1Deployment> patchNamespacedDeployment1Async(Object body, String name, String namespace);

    /**
     * partially update the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<ServiceResponse<Extensionsv1beta1Deployment>> patchNamespacedDeployment1WithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Deployment object if successful.
     */
    Extensionsv1beta1Deployment patchNamespacedDeployment1(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Deployment> patchNamespacedDeployment1Async(Object body, String name, String namespace, String pretty, final ServiceCallback<Extensionsv1beta1Deployment> serviceCallback);

    /**
     * partially update the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<Extensionsv1beta1Deployment> patchNamespacedDeployment1Async(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<ServiceResponse<Extensionsv1beta1Deployment>> patchNamespacedDeployment1WithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * create rollback of a DeploymentRollback.
     *
     * @param body the Extensionsv1beta1DeploymentRollback value
     * @param name name of the DeploymentRollback
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1DeploymentRollback object if successful.
     */
    Extensionsv1beta1DeploymentRollback createNamespacedDeploymentRollbackRollback1(Extensionsv1beta1DeploymentRollback body, String name, String namespace);

    /**
     * create rollback of a DeploymentRollback.
     *
     * @param body the Extensionsv1beta1DeploymentRollback value
     * @param name name of the DeploymentRollback
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1DeploymentRollback> createNamespacedDeploymentRollbackRollback1Async(Extensionsv1beta1DeploymentRollback body, String name, String namespace, final ServiceCallback<Extensionsv1beta1DeploymentRollback> serviceCallback);

    /**
     * create rollback of a DeploymentRollback.
     *
     * @param body the Extensionsv1beta1DeploymentRollback value
     * @param name name of the DeploymentRollback
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1DeploymentRollback object
     */
    Observable<Extensionsv1beta1DeploymentRollback> createNamespacedDeploymentRollbackRollback1Async(Extensionsv1beta1DeploymentRollback body, String name, String namespace);

    /**
     * create rollback of a DeploymentRollback.
     *
     * @param body the Extensionsv1beta1DeploymentRollback value
     * @param name name of the DeploymentRollback
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1DeploymentRollback object
     */
    Observable<ServiceResponse<Extensionsv1beta1DeploymentRollback>> createNamespacedDeploymentRollbackRollback1WithServiceResponseAsync(Extensionsv1beta1DeploymentRollback body, String name, String namespace);
    /**
     * create rollback of a DeploymentRollback.
     *
     * @param body the Extensionsv1beta1DeploymentRollback value
     * @param name name of the DeploymentRollback
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1DeploymentRollback object if successful.
     */
    Extensionsv1beta1DeploymentRollback createNamespacedDeploymentRollbackRollback1(Extensionsv1beta1DeploymentRollback body, String name, String namespace, String pretty);

    /**
     * create rollback of a DeploymentRollback.
     *
     * @param body the Extensionsv1beta1DeploymentRollback value
     * @param name name of the DeploymentRollback
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1DeploymentRollback> createNamespacedDeploymentRollbackRollback1Async(Extensionsv1beta1DeploymentRollback body, String name, String namespace, String pretty, final ServiceCallback<Extensionsv1beta1DeploymentRollback> serviceCallback);

    /**
     * create rollback of a DeploymentRollback.
     *
     * @param body the Extensionsv1beta1DeploymentRollback value
     * @param name name of the DeploymentRollback
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1DeploymentRollback object
     */
    Observable<Extensionsv1beta1DeploymentRollback> createNamespacedDeploymentRollbackRollback1Async(Extensionsv1beta1DeploymentRollback body, String name, String namespace, String pretty);

    /**
     * create rollback of a DeploymentRollback.
     *
     * @param body the Extensionsv1beta1DeploymentRollback value
     * @param name name of the DeploymentRollback
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1DeploymentRollback object
     */
    Observable<ServiceResponse<Extensionsv1beta1DeploymentRollback>> createNamespacedDeploymentRollbackRollback1WithServiceResponseAsync(Extensionsv1beta1DeploymentRollback body, String name, String namespace, String pretty);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale readNamespacedDeploymentsScale(String name, String namespace);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> readNamespacedDeploymentsScaleAsync(String name, String namespace, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> readNamespacedDeploymentsScaleAsync(String name, String namespace);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> readNamespacedDeploymentsScaleWithServiceResponseAsync(String name, String namespace);
    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale readNamespacedDeploymentsScale(String name, String namespace, String pretty);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> readNamespacedDeploymentsScaleAsync(String name, String namespace, String pretty, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> readNamespacedDeploymentsScaleAsync(String name, String namespace, String pretty);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> readNamespacedDeploymentsScaleWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale replaceNamespacedDeploymentsScale(Extensionsv1beta1Scale body, String name, String namespace);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> replaceNamespacedDeploymentsScaleAsync(Extensionsv1beta1Scale body, String name, String namespace, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> replaceNamespacedDeploymentsScaleAsync(Extensionsv1beta1Scale body, String name, String namespace);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> replaceNamespacedDeploymentsScaleWithServiceResponseAsync(Extensionsv1beta1Scale body, String name, String namespace);
    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale replaceNamespacedDeploymentsScale(Extensionsv1beta1Scale body, String name, String namespace, String pretty);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> replaceNamespacedDeploymentsScaleAsync(Extensionsv1beta1Scale body, String name, String namespace, String pretty, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> replaceNamespacedDeploymentsScaleAsync(Extensionsv1beta1Scale body, String name, String namespace, String pretty);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> replaceNamespacedDeploymentsScaleWithServiceResponseAsync(Extensionsv1beta1Scale body, String name, String namespace, String pretty);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale patchNamespacedDeploymentsScale(Object body, String name, String namespace);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> patchNamespacedDeploymentsScaleAsync(Object body, String name, String namespace, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> patchNamespacedDeploymentsScaleAsync(Object body, String name, String namespace);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> patchNamespacedDeploymentsScaleWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale patchNamespacedDeploymentsScale(Object body, String name, String namespace, String pretty);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> patchNamespacedDeploymentsScaleAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> patchNamespacedDeploymentsScaleAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> patchNamespacedDeploymentsScaleWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read status of the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Deployment object if successful.
     */
    Extensionsv1beta1Deployment readNamespacedDeploymentStatus1(String name, String namespace);

    /**
     * read status of the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Deployment> readNamespacedDeploymentStatus1Async(String name, String namespace, final ServiceCallback<Extensionsv1beta1Deployment> serviceCallback);

    /**
     * read status of the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<Extensionsv1beta1Deployment> readNamespacedDeploymentStatus1Async(String name, String namespace);

    /**
     * read status of the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<ServiceResponse<Extensionsv1beta1Deployment>> readNamespacedDeploymentStatus1WithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Deployment object if successful.
     */
    Extensionsv1beta1Deployment readNamespacedDeploymentStatus1(String name, String namespace, String pretty);

    /**
     * read status of the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Deployment> readNamespacedDeploymentStatus1Async(String name, String namespace, String pretty, final ServiceCallback<Extensionsv1beta1Deployment> serviceCallback);

    /**
     * read status of the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<Extensionsv1beta1Deployment> readNamespacedDeploymentStatus1Async(String name, String namespace, String pretty);

    /**
     * read status of the specified Deployment.
     *
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<ServiceResponse<Extensionsv1beta1Deployment>> readNamespacedDeploymentStatus1WithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Deployment object if successful.
     */
    Extensionsv1beta1Deployment replaceNamespacedDeploymentStatus1(Extensionsv1beta1Deployment body, String name, String namespace);

    /**
     * replace status of the specified Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Deployment> replaceNamespacedDeploymentStatus1Async(Extensionsv1beta1Deployment body, String name, String namespace, final ServiceCallback<Extensionsv1beta1Deployment> serviceCallback);

    /**
     * replace status of the specified Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<Extensionsv1beta1Deployment> replaceNamespacedDeploymentStatus1Async(Extensionsv1beta1Deployment body, String name, String namespace);

    /**
     * replace status of the specified Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<ServiceResponse<Extensionsv1beta1Deployment>> replaceNamespacedDeploymentStatus1WithServiceResponseAsync(Extensionsv1beta1Deployment body, String name, String namespace);
    /**
     * replace status of the specified Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Deployment object if successful.
     */
    Extensionsv1beta1Deployment replaceNamespacedDeploymentStatus1(Extensionsv1beta1Deployment body, String name, String namespace, String pretty);

    /**
     * replace status of the specified Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Deployment> replaceNamespacedDeploymentStatus1Async(Extensionsv1beta1Deployment body, String name, String namespace, String pretty, final ServiceCallback<Extensionsv1beta1Deployment> serviceCallback);

    /**
     * replace status of the specified Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<Extensionsv1beta1Deployment> replaceNamespacedDeploymentStatus1Async(Extensionsv1beta1Deployment body, String name, String namespace, String pretty);

    /**
     * replace status of the specified Deployment.
     *
     * @param body the Extensionsv1beta1Deployment value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<ServiceResponse<Extensionsv1beta1Deployment>> replaceNamespacedDeploymentStatus1WithServiceResponseAsync(Extensionsv1beta1Deployment body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Deployment object if successful.
     */
    Extensionsv1beta1Deployment patchNamespacedDeploymentStatus1(Object body, String name, String namespace);

    /**
     * partially update status of the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Deployment> patchNamespacedDeploymentStatus1Async(Object body, String name, String namespace, final ServiceCallback<Extensionsv1beta1Deployment> serviceCallback);

    /**
     * partially update status of the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<Extensionsv1beta1Deployment> patchNamespacedDeploymentStatus1Async(Object body, String name, String namespace);

    /**
     * partially update status of the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<ServiceResponse<Extensionsv1beta1Deployment>> patchNamespacedDeploymentStatus1WithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Deployment object if successful.
     */
    Extensionsv1beta1Deployment patchNamespacedDeploymentStatus1(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Deployment> patchNamespacedDeploymentStatus1Async(Object body, String name, String namespace, String pretty, final ServiceCallback<Extensionsv1beta1Deployment> serviceCallback);

    /**
     * partially update status of the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<Extensionsv1beta1Deployment> patchNamespacedDeploymentStatus1Async(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Deployment.
     *
     * @param body the Object value
     * @param name name of the Deployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Deployment object
     */
    Observable<ServiceResponse<Extensionsv1beta1Deployment>> patchNamespacedDeploymentStatus1WithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind Ingress.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1IngressList object if successful.
     */
    V1beta1IngressList listNamespacedIngress(String namespace);

    /**
     * list or watch objects of kind Ingress.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1IngressList> listNamespacedIngressAsync(String namespace, final ServiceCallback<V1beta1IngressList> serviceCallback);

    /**
     * list or watch objects of kind Ingress.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1IngressList object
     */
    Observable<V1beta1IngressList> listNamespacedIngressAsync(String namespace);

    /**
     * list or watch objects of kind Ingress.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1IngressList object
     */
    Observable<ServiceResponse<V1beta1IngressList>> listNamespacedIngressWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind Ingress.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1IngressList object if successful.
     */
    V1beta1IngressList listNamespacedIngress(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Ingress.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1IngressList> listNamespacedIngressAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1beta1IngressList> serviceCallback);

    /**
     * list or watch objects of kind Ingress.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1IngressList object
     */
    Observable<V1beta1IngressList> listNamespacedIngressAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Ingress.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1IngressList object
     */
    Observable<ServiceResponse<V1beta1IngressList>> listNamespacedIngressWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create an Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Ingress object if successful.
     */
    V1beta1Ingress createNamespacedIngress(V1beta1Ingress body, String namespace);

    /**
     * create an Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Ingress> createNamespacedIngressAsync(V1beta1Ingress body, String namespace, final ServiceCallback<V1beta1Ingress> serviceCallback);

    /**
     * create an Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<V1beta1Ingress> createNamespacedIngressAsync(V1beta1Ingress body, String namespace);

    /**
     * create an Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<ServiceResponse<V1beta1Ingress>> createNamespacedIngressWithServiceResponseAsync(V1beta1Ingress body, String namespace);
    /**
     * create an Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Ingress object if successful.
     */
    V1beta1Ingress createNamespacedIngress(V1beta1Ingress body, String namespace, String pretty);

    /**
     * create an Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Ingress> createNamespacedIngressAsync(V1beta1Ingress body, String namespace, String pretty, final ServiceCallback<V1beta1Ingress> serviceCallback);

    /**
     * create an Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<V1beta1Ingress> createNamespacedIngressAsync(V1beta1Ingress body, String namespace, String pretty);

    /**
     * create an Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<ServiceResponse<V1beta1Ingress>> createNamespacedIngressWithServiceResponseAsync(V1beta1Ingress body, String namespace, String pretty);

    /**
     * delete collection of Ingress.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedIngress(String namespace);

    /**
     * delete collection of Ingress.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedIngressAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Ingress.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedIngressAsync(String namespace);

    /**
     * delete collection of Ingress.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedIngressWithServiceResponseAsync(String namespace);
    /**
     * delete collection of Ingress.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedIngress(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Ingress.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedIngressAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Ingress.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedIngressAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Ingress.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedIngressWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified Ingress.
     *
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Ingress object if successful.
     */
    V1beta1Ingress readNamespacedIngress(String name, String namespace);

    /**
     * read the specified Ingress.
     *
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Ingress> readNamespacedIngressAsync(String name, String namespace, final ServiceCallback<V1beta1Ingress> serviceCallback);

    /**
     * read the specified Ingress.
     *
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<V1beta1Ingress> readNamespacedIngressAsync(String name, String namespace);

    /**
     * read the specified Ingress.
     *
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<ServiceResponse<V1beta1Ingress>> readNamespacedIngressWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified Ingress.
     *
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Ingress object if successful.
     */
    V1beta1Ingress readNamespacedIngress(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Ingress.
     *
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Ingress> readNamespacedIngressAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1beta1Ingress> serviceCallback);

    /**
     * read the specified Ingress.
     *
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<V1beta1Ingress> readNamespacedIngressAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified Ingress.
     *
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<ServiceResponse<V1beta1Ingress>> readNamespacedIngressWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Ingress object if successful.
     */
    V1beta1Ingress replaceNamespacedIngress(V1beta1Ingress body, String name, String namespace);

    /**
     * replace the specified Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Ingress> replaceNamespacedIngressAsync(V1beta1Ingress body, String name, String namespace, final ServiceCallback<V1beta1Ingress> serviceCallback);

    /**
     * replace the specified Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<V1beta1Ingress> replaceNamespacedIngressAsync(V1beta1Ingress body, String name, String namespace);

    /**
     * replace the specified Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<ServiceResponse<V1beta1Ingress>> replaceNamespacedIngressWithServiceResponseAsync(V1beta1Ingress body, String name, String namespace);
    /**
     * replace the specified Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Ingress object if successful.
     */
    V1beta1Ingress replaceNamespacedIngress(V1beta1Ingress body, String name, String namespace, String pretty);

    /**
     * replace the specified Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Ingress> replaceNamespacedIngressAsync(V1beta1Ingress body, String name, String namespace, String pretty, final ServiceCallback<V1beta1Ingress> serviceCallback);

    /**
     * replace the specified Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<V1beta1Ingress> replaceNamespacedIngressAsync(V1beta1Ingress body, String name, String namespace, String pretty);

    /**
     * replace the specified Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<ServiceResponse<V1beta1Ingress>> replaceNamespacedIngressWithServiceResponseAsync(V1beta1Ingress body, String name, String namespace, String pretty);

    /**
     * delete an Ingress.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedIngress(V1DeleteOptions body, String name, String namespace);

    /**
     * delete an Ingress.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedIngressAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete an Ingress.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedIngressAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete an Ingress.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedIngressWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete an Ingress.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedIngress(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete an Ingress.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedIngressAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete an Ingress.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedIngressAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete an Ingress.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedIngressWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified Ingress.
     *
     * @param body the Object value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Ingress object if successful.
     */
    V1beta1Ingress patchNamespacedIngress(Object body, String name, String namespace);

    /**
     * partially update the specified Ingress.
     *
     * @param body the Object value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Ingress> patchNamespacedIngressAsync(Object body, String name, String namespace, final ServiceCallback<V1beta1Ingress> serviceCallback);

    /**
     * partially update the specified Ingress.
     *
     * @param body the Object value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<V1beta1Ingress> patchNamespacedIngressAsync(Object body, String name, String namespace);

    /**
     * partially update the specified Ingress.
     *
     * @param body the Object value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<ServiceResponse<V1beta1Ingress>> patchNamespacedIngressWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified Ingress.
     *
     * @param body the Object value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Ingress object if successful.
     */
    V1beta1Ingress patchNamespacedIngress(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Ingress.
     *
     * @param body the Object value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Ingress> patchNamespacedIngressAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1beta1Ingress> serviceCallback);

    /**
     * partially update the specified Ingress.
     *
     * @param body the Object value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<V1beta1Ingress> patchNamespacedIngressAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Ingress.
     *
     * @param body the Object value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<ServiceResponse<V1beta1Ingress>> patchNamespacedIngressWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read status of the specified Ingress.
     *
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Ingress object if successful.
     */
    V1beta1Ingress readNamespacedIngressStatus(String name, String namespace);

    /**
     * read status of the specified Ingress.
     *
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Ingress> readNamespacedIngressStatusAsync(String name, String namespace, final ServiceCallback<V1beta1Ingress> serviceCallback);

    /**
     * read status of the specified Ingress.
     *
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<V1beta1Ingress> readNamespacedIngressStatusAsync(String name, String namespace);

    /**
     * read status of the specified Ingress.
     *
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<ServiceResponse<V1beta1Ingress>> readNamespacedIngressStatusWithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified Ingress.
     *
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Ingress object if successful.
     */
    V1beta1Ingress readNamespacedIngressStatus(String name, String namespace, String pretty);

    /**
     * read status of the specified Ingress.
     *
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Ingress> readNamespacedIngressStatusAsync(String name, String namespace, String pretty, final ServiceCallback<V1beta1Ingress> serviceCallback);

    /**
     * read status of the specified Ingress.
     *
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<V1beta1Ingress> readNamespacedIngressStatusAsync(String name, String namespace, String pretty);

    /**
     * read status of the specified Ingress.
     *
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<ServiceResponse<V1beta1Ingress>> readNamespacedIngressStatusWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Ingress object if successful.
     */
    V1beta1Ingress replaceNamespacedIngressStatus(V1beta1Ingress body, String name, String namespace);

    /**
     * replace status of the specified Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Ingress> replaceNamespacedIngressStatusAsync(V1beta1Ingress body, String name, String namespace, final ServiceCallback<V1beta1Ingress> serviceCallback);

    /**
     * replace status of the specified Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<V1beta1Ingress> replaceNamespacedIngressStatusAsync(V1beta1Ingress body, String name, String namespace);

    /**
     * replace status of the specified Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<ServiceResponse<V1beta1Ingress>> replaceNamespacedIngressStatusWithServiceResponseAsync(V1beta1Ingress body, String name, String namespace);
    /**
     * replace status of the specified Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Ingress object if successful.
     */
    V1beta1Ingress replaceNamespacedIngressStatus(V1beta1Ingress body, String name, String namespace, String pretty);

    /**
     * replace status of the specified Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Ingress> replaceNamespacedIngressStatusAsync(V1beta1Ingress body, String name, String namespace, String pretty, final ServiceCallback<V1beta1Ingress> serviceCallback);

    /**
     * replace status of the specified Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<V1beta1Ingress> replaceNamespacedIngressStatusAsync(V1beta1Ingress body, String name, String namespace, String pretty);

    /**
     * replace status of the specified Ingress.
     *
     * @param body the V1beta1Ingress value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<ServiceResponse<V1beta1Ingress>> replaceNamespacedIngressStatusWithServiceResponseAsync(V1beta1Ingress body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Ingress.
     *
     * @param body the Object value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Ingress object if successful.
     */
    V1beta1Ingress patchNamespacedIngressStatus(Object body, String name, String namespace);

    /**
     * partially update status of the specified Ingress.
     *
     * @param body the Object value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Ingress> patchNamespacedIngressStatusAsync(Object body, String name, String namespace, final ServiceCallback<V1beta1Ingress> serviceCallback);

    /**
     * partially update status of the specified Ingress.
     *
     * @param body the Object value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<V1beta1Ingress> patchNamespacedIngressStatusAsync(Object body, String name, String namespace);

    /**
     * partially update status of the specified Ingress.
     *
     * @param body the Object value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<ServiceResponse<V1beta1Ingress>> patchNamespacedIngressStatusWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified Ingress.
     *
     * @param body the Object value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Ingress object if successful.
     */
    V1beta1Ingress patchNamespacedIngressStatus(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Ingress.
     *
     * @param body the Object value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Ingress> patchNamespacedIngressStatusAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1beta1Ingress> serviceCallback);

    /**
     * partially update status of the specified Ingress.
     *
     * @param body the Object value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<V1beta1Ingress> patchNamespacedIngressStatusAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified Ingress.
     *
     * @param body the Object value
     * @param name name of the Ingress
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Ingress object
     */
    Observable<ServiceResponse<V1beta1Ingress>> patchNamespacedIngressStatusWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind NetworkPolicy.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1NetworkPolicyList object if successful.
     */
    V1beta1NetworkPolicyList listNamespacedNetworkPolicy(String namespace);

    /**
     * list or watch objects of kind NetworkPolicy.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1NetworkPolicyList> listNamespacedNetworkPolicyAsync(String namespace, final ServiceCallback<V1beta1NetworkPolicyList> serviceCallback);

    /**
     * list or watch objects of kind NetworkPolicy.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicyList object
     */
    Observable<V1beta1NetworkPolicyList> listNamespacedNetworkPolicyAsync(String namespace);

    /**
     * list or watch objects of kind NetworkPolicy.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicyList object
     */
    Observable<ServiceResponse<V1beta1NetworkPolicyList>> listNamespacedNetworkPolicyWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind NetworkPolicy.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1NetworkPolicyList object if successful.
     */
    V1beta1NetworkPolicyList listNamespacedNetworkPolicy(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind NetworkPolicy.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1NetworkPolicyList> listNamespacedNetworkPolicyAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1beta1NetworkPolicyList> serviceCallback);

    /**
     * list or watch objects of kind NetworkPolicy.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicyList object
     */
    Observable<V1beta1NetworkPolicyList> listNamespacedNetworkPolicyAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind NetworkPolicy.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicyList object
     */
    Observable<ServiceResponse<V1beta1NetworkPolicyList>> listNamespacedNetworkPolicyWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a NetworkPolicy.
     *
     * @param body the V1beta1NetworkPolicy value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1NetworkPolicy object if successful.
     */
    V1beta1NetworkPolicy createNamespacedNetworkPolicy(V1beta1NetworkPolicy body, String namespace);

    /**
     * create a NetworkPolicy.
     *
     * @param body the V1beta1NetworkPolicy value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1NetworkPolicy> createNamespacedNetworkPolicyAsync(V1beta1NetworkPolicy body, String namespace, final ServiceCallback<V1beta1NetworkPolicy> serviceCallback);

    /**
     * create a NetworkPolicy.
     *
     * @param body the V1beta1NetworkPolicy value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicy object
     */
    Observable<V1beta1NetworkPolicy> createNamespacedNetworkPolicyAsync(V1beta1NetworkPolicy body, String namespace);

    /**
     * create a NetworkPolicy.
     *
     * @param body the V1beta1NetworkPolicy value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicy object
     */
    Observable<ServiceResponse<V1beta1NetworkPolicy>> createNamespacedNetworkPolicyWithServiceResponseAsync(V1beta1NetworkPolicy body, String namespace);
    /**
     * create a NetworkPolicy.
     *
     * @param body the V1beta1NetworkPolicy value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1NetworkPolicy object if successful.
     */
    V1beta1NetworkPolicy createNamespacedNetworkPolicy(V1beta1NetworkPolicy body, String namespace, String pretty);

    /**
     * create a NetworkPolicy.
     *
     * @param body the V1beta1NetworkPolicy value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1NetworkPolicy> createNamespacedNetworkPolicyAsync(V1beta1NetworkPolicy body, String namespace, String pretty, final ServiceCallback<V1beta1NetworkPolicy> serviceCallback);

    /**
     * create a NetworkPolicy.
     *
     * @param body the V1beta1NetworkPolicy value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicy object
     */
    Observable<V1beta1NetworkPolicy> createNamespacedNetworkPolicyAsync(V1beta1NetworkPolicy body, String namespace, String pretty);

    /**
     * create a NetworkPolicy.
     *
     * @param body the V1beta1NetworkPolicy value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicy object
     */
    Observable<ServiceResponse<V1beta1NetworkPolicy>> createNamespacedNetworkPolicyWithServiceResponseAsync(V1beta1NetworkPolicy body, String namespace, String pretty);

    /**
     * delete collection of NetworkPolicy.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedNetworkPolicy(String namespace);

    /**
     * delete collection of NetworkPolicy.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedNetworkPolicyAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of NetworkPolicy.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedNetworkPolicyAsync(String namespace);

    /**
     * delete collection of NetworkPolicy.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedNetworkPolicyWithServiceResponseAsync(String namespace);
    /**
     * delete collection of NetworkPolicy.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedNetworkPolicy(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of NetworkPolicy.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedNetworkPolicyAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of NetworkPolicy.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedNetworkPolicyAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of NetworkPolicy.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedNetworkPolicyWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified NetworkPolicy.
     *
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1NetworkPolicy object if successful.
     */
    V1beta1NetworkPolicy readNamespacedNetworkPolicy(String name, String namespace);

    /**
     * read the specified NetworkPolicy.
     *
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1NetworkPolicy> readNamespacedNetworkPolicyAsync(String name, String namespace, final ServiceCallback<V1beta1NetworkPolicy> serviceCallback);

    /**
     * read the specified NetworkPolicy.
     *
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicy object
     */
    Observable<V1beta1NetworkPolicy> readNamespacedNetworkPolicyAsync(String name, String namespace);

    /**
     * read the specified NetworkPolicy.
     *
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicy object
     */
    Observable<ServiceResponse<V1beta1NetworkPolicy>> readNamespacedNetworkPolicyWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified NetworkPolicy.
     *
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1NetworkPolicy object if successful.
     */
    V1beta1NetworkPolicy readNamespacedNetworkPolicy(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified NetworkPolicy.
     *
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1NetworkPolicy> readNamespacedNetworkPolicyAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1beta1NetworkPolicy> serviceCallback);

    /**
     * read the specified NetworkPolicy.
     *
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicy object
     */
    Observable<V1beta1NetworkPolicy> readNamespacedNetworkPolicyAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified NetworkPolicy.
     *
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicy object
     */
    Observable<ServiceResponse<V1beta1NetworkPolicy>> readNamespacedNetworkPolicyWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified NetworkPolicy.
     *
     * @param body the V1beta1NetworkPolicy value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1NetworkPolicy object if successful.
     */
    V1beta1NetworkPolicy replaceNamespacedNetworkPolicy(V1beta1NetworkPolicy body, String name, String namespace);

    /**
     * replace the specified NetworkPolicy.
     *
     * @param body the V1beta1NetworkPolicy value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1NetworkPolicy> replaceNamespacedNetworkPolicyAsync(V1beta1NetworkPolicy body, String name, String namespace, final ServiceCallback<V1beta1NetworkPolicy> serviceCallback);

    /**
     * replace the specified NetworkPolicy.
     *
     * @param body the V1beta1NetworkPolicy value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicy object
     */
    Observable<V1beta1NetworkPolicy> replaceNamespacedNetworkPolicyAsync(V1beta1NetworkPolicy body, String name, String namespace);

    /**
     * replace the specified NetworkPolicy.
     *
     * @param body the V1beta1NetworkPolicy value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicy object
     */
    Observable<ServiceResponse<V1beta1NetworkPolicy>> replaceNamespacedNetworkPolicyWithServiceResponseAsync(V1beta1NetworkPolicy body, String name, String namespace);
    /**
     * replace the specified NetworkPolicy.
     *
     * @param body the V1beta1NetworkPolicy value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1NetworkPolicy object if successful.
     */
    V1beta1NetworkPolicy replaceNamespacedNetworkPolicy(V1beta1NetworkPolicy body, String name, String namespace, String pretty);

    /**
     * replace the specified NetworkPolicy.
     *
     * @param body the V1beta1NetworkPolicy value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1NetworkPolicy> replaceNamespacedNetworkPolicyAsync(V1beta1NetworkPolicy body, String name, String namespace, String pretty, final ServiceCallback<V1beta1NetworkPolicy> serviceCallback);

    /**
     * replace the specified NetworkPolicy.
     *
     * @param body the V1beta1NetworkPolicy value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicy object
     */
    Observable<V1beta1NetworkPolicy> replaceNamespacedNetworkPolicyAsync(V1beta1NetworkPolicy body, String name, String namespace, String pretty);

    /**
     * replace the specified NetworkPolicy.
     *
     * @param body the V1beta1NetworkPolicy value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicy object
     */
    Observable<ServiceResponse<V1beta1NetworkPolicy>> replaceNamespacedNetworkPolicyWithServiceResponseAsync(V1beta1NetworkPolicy body, String name, String namespace, String pretty);

    /**
     * delete a NetworkPolicy.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedNetworkPolicy(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a NetworkPolicy.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedNetworkPolicyAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a NetworkPolicy.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedNetworkPolicyAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a NetworkPolicy.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedNetworkPolicyWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a NetworkPolicy.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedNetworkPolicy(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a NetworkPolicy.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedNetworkPolicyAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a NetworkPolicy.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedNetworkPolicyAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a NetworkPolicy.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedNetworkPolicyWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified NetworkPolicy.
     *
     * @param body the Object value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1NetworkPolicy object if successful.
     */
    V1beta1NetworkPolicy patchNamespacedNetworkPolicy(Object body, String name, String namespace);

    /**
     * partially update the specified NetworkPolicy.
     *
     * @param body the Object value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1NetworkPolicy> patchNamespacedNetworkPolicyAsync(Object body, String name, String namespace, final ServiceCallback<V1beta1NetworkPolicy> serviceCallback);

    /**
     * partially update the specified NetworkPolicy.
     *
     * @param body the Object value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicy object
     */
    Observable<V1beta1NetworkPolicy> patchNamespacedNetworkPolicyAsync(Object body, String name, String namespace);

    /**
     * partially update the specified NetworkPolicy.
     *
     * @param body the Object value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicy object
     */
    Observable<ServiceResponse<V1beta1NetworkPolicy>> patchNamespacedNetworkPolicyWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified NetworkPolicy.
     *
     * @param body the Object value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1NetworkPolicy object if successful.
     */
    V1beta1NetworkPolicy patchNamespacedNetworkPolicy(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified NetworkPolicy.
     *
     * @param body the Object value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1NetworkPolicy> patchNamespacedNetworkPolicyAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1beta1NetworkPolicy> serviceCallback);

    /**
     * partially update the specified NetworkPolicy.
     *
     * @param body the Object value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicy object
     */
    Observable<V1beta1NetworkPolicy> patchNamespacedNetworkPolicyAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified NetworkPolicy.
     *
     * @param body the Object value
     * @param name name of the NetworkPolicy
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicy object
     */
    Observable<ServiceResponse<V1beta1NetworkPolicy>> patchNamespacedNetworkPolicyWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind ReplicaSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSetList object if successful.
     */
    V1beta1ReplicaSetList listNamespacedReplicaSet(String namespace);

    /**
     * list or watch objects of kind ReplicaSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSetList> listNamespacedReplicaSetAsync(String namespace, final ServiceCallback<V1beta1ReplicaSetList> serviceCallback);

    /**
     * list or watch objects of kind ReplicaSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSetList object
     */
    Observable<V1beta1ReplicaSetList> listNamespacedReplicaSetAsync(String namespace);

    /**
     * list or watch objects of kind ReplicaSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSetList object
     */
    Observable<ServiceResponse<V1beta1ReplicaSetList>> listNamespacedReplicaSetWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind ReplicaSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSetList object if successful.
     */
    V1beta1ReplicaSetList listNamespacedReplicaSet(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ReplicaSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSetList> listNamespacedReplicaSetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1beta1ReplicaSetList> serviceCallback);

    /**
     * list or watch objects of kind ReplicaSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSetList object
     */
    Observable<V1beta1ReplicaSetList> listNamespacedReplicaSetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ReplicaSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSetList object
     */
    Observable<ServiceResponse<V1beta1ReplicaSetList>> listNamespacedReplicaSetWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSet object if successful.
     */
    V1beta1ReplicaSet createNamespacedReplicaSet(V1beta1ReplicaSet body, String namespace);

    /**
     * create a ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSet> createNamespacedReplicaSetAsync(V1beta1ReplicaSet body, String namespace, final ServiceCallback<V1beta1ReplicaSet> serviceCallback);

    /**
     * create a ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<V1beta1ReplicaSet> createNamespacedReplicaSetAsync(V1beta1ReplicaSet body, String namespace);

    /**
     * create a ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<ServiceResponse<V1beta1ReplicaSet>> createNamespacedReplicaSetWithServiceResponseAsync(V1beta1ReplicaSet body, String namespace);
    /**
     * create a ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSet object if successful.
     */
    V1beta1ReplicaSet createNamespacedReplicaSet(V1beta1ReplicaSet body, String namespace, String pretty);

    /**
     * create a ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSet> createNamespacedReplicaSetAsync(V1beta1ReplicaSet body, String namespace, String pretty, final ServiceCallback<V1beta1ReplicaSet> serviceCallback);

    /**
     * create a ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<V1beta1ReplicaSet> createNamespacedReplicaSetAsync(V1beta1ReplicaSet body, String namespace, String pretty);

    /**
     * create a ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<ServiceResponse<V1beta1ReplicaSet>> createNamespacedReplicaSetWithServiceResponseAsync(V1beta1ReplicaSet body, String namespace, String pretty);

    /**
     * delete collection of ReplicaSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedReplicaSet(String namespace);

    /**
     * delete collection of ReplicaSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedReplicaSetAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ReplicaSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedReplicaSetAsync(String namespace);

    /**
     * delete collection of ReplicaSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedReplicaSetWithServiceResponseAsync(String namespace);
    /**
     * delete collection of ReplicaSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedReplicaSet(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ReplicaSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedReplicaSetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ReplicaSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedReplicaSetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ReplicaSet.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedReplicaSetWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified ReplicaSet.
     *
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSet object if successful.
     */
    V1beta1ReplicaSet readNamespacedReplicaSet(String name, String namespace);

    /**
     * read the specified ReplicaSet.
     *
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSet> readNamespacedReplicaSetAsync(String name, String namespace, final ServiceCallback<V1beta1ReplicaSet> serviceCallback);

    /**
     * read the specified ReplicaSet.
     *
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<V1beta1ReplicaSet> readNamespacedReplicaSetAsync(String name, String namespace);

    /**
     * read the specified ReplicaSet.
     *
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<ServiceResponse<V1beta1ReplicaSet>> readNamespacedReplicaSetWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified ReplicaSet.
     *
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSet object if successful.
     */
    V1beta1ReplicaSet readNamespacedReplicaSet(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified ReplicaSet.
     *
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSet> readNamespacedReplicaSetAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1beta1ReplicaSet> serviceCallback);

    /**
     * read the specified ReplicaSet.
     *
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<V1beta1ReplicaSet> readNamespacedReplicaSetAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified ReplicaSet.
     *
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<ServiceResponse<V1beta1ReplicaSet>> readNamespacedReplicaSetWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSet object if successful.
     */
    V1beta1ReplicaSet replaceNamespacedReplicaSet(V1beta1ReplicaSet body, String name, String namespace);

    /**
     * replace the specified ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSet> replaceNamespacedReplicaSetAsync(V1beta1ReplicaSet body, String name, String namespace, final ServiceCallback<V1beta1ReplicaSet> serviceCallback);

    /**
     * replace the specified ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<V1beta1ReplicaSet> replaceNamespacedReplicaSetAsync(V1beta1ReplicaSet body, String name, String namespace);

    /**
     * replace the specified ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<ServiceResponse<V1beta1ReplicaSet>> replaceNamespacedReplicaSetWithServiceResponseAsync(V1beta1ReplicaSet body, String name, String namespace);
    /**
     * replace the specified ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSet object if successful.
     */
    V1beta1ReplicaSet replaceNamespacedReplicaSet(V1beta1ReplicaSet body, String name, String namespace, String pretty);

    /**
     * replace the specified ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSet> replaceNamespacedReplicaSetAsync(V1beta1ReplicaSet body, String name, String namespace, String pretty, final ServiceCallback<V1beta1ReplicaSet> serviceCallback);

    /**
     * replace the specified ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<V1beta1ReplicaSet> replaceNamespacedReplicaSetAsync(V1beta1ReplicaSet body, String name, String namespace, String pretty);

    /**
     * replace the specified ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<ServiceResponse<V1beta1ReplicaSet>> replaceNamespacedReplicaSetWithServiceResponseAsync(V1beta1ReplicaSet body, String name, String namespace, String pretty);

    /**
     * delete a ReplicaSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedReplicaSet(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a ReplicaSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedReplicaSetAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ReplicaSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedReplicaSetAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a ReplicaSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedReplicaSetWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a ReplicaSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedReplicaSet(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ReplicaSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedReplicaSetAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ReplicaSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedReplicaSetAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ReplicaSet.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedReplicaSetWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified ReplicaSet.
     *
     * @param body the Object value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSet object if successful.
     */
    V1beta1ReplicaSet patchNamespacedReplicaSet(Object body, String name, String namespace);

    /**
     * partially update the specified ReplicaSet.
     *
     * @param body the Object value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSet> patchNamespacedReplicaSetAsync(Object body, String name, String namespace, final ServiceCallback<V1beta1ReplicaSet> serviceCallback);

    /**
     * partially update the specified ReplicaSet.
     *
     * @param body the Object value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<V1beta1ReplicaSet> patchNamespacedReplicaSetAsync(Object body, String name, String namespace);

    /**
     * partially update the specified ReplicaSet.
     *
     * @param body the Object value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<ServiceResponse<V1beta1ReplicaSet>> patchNamespacedReplicaSetWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified ReplicaSet.
     *
     * @param body the Object value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSet object if successful.
     */
    V1beta1ReplicaSet patchNamespacedReplicaSet(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified ReplicaSet.
     *
     * @param body the Object value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSet> patchNamespacedReplicaSetAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1beta1ReplicaSet> serviceCallback);

    /**
     * partially update the specified ReplicaSet.
     *
     * @param body the Object value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<V1beta1ReplicaSet> patchNamespacedReplicaSetAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified ReplicaSet.
     *
     * @param body the Object value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<ServiceResponse<V1beta1ReplicaSet>> patchNamespacedReplicaSetWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale readNamespacedReplicasetsScale(String name, String namespace);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> readNamespacedReplicasetsScaleAsync(String name, String namespace, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> readNamespacedReplicasetsScaleAsync(String name, String namespace);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> readNamespacedReplicasetsScaleWithServiceResponseAsync(String name, String namespace);
    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale readNamespacedReplicasetsScale(String name, String namespace, String pretty);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> readNamespacedReplicasetsScaleAsync(String name, String namespace, String pretty, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> readNamespacedReplicasetsScaleAsync(String name, String namespace, String pretty);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> readNamespacedReplicasetsScaleWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale replaceNamespacedReplicasetsScale(Extensionsv1beta1Scale body, String name, String namespace);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> replaceNamespacedReplicasetsScaleAsync(Extensionsv1beta1Scale body, String name, String namespace, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> replaceNamespacedReplicasetsScaleAsync(Extensionsv1beta1Scale body, String name, String namespace);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> replaceNamespacedReplicasetsScaleWithServiceResponseAsync(Extensionsv1beta1Scale body, String name, String namespace);
    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale replaceNamespacedReplicasetsScale(Extensionsv1beta1Scale body, String name, String namespace, String pretty);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> replaceNamespacedReplicasetsScaleAsync(Extensionsv1beta1Scale body, String name, String namespace, String pretty, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> replaceNamespacedReplicasetsScaleAsync(Extensionsv1beta1Scale body, String name, String namespace, String pretty);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> replaceNamespacedReplicasetsScaleWithServiceResponseAsync(Extensionsv1beta1Scale body, String name, String namespace, String pretty);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale patchNamespacedReplicasetsScale(Object body, String name, String namespace);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> patchNamespacedReplicasetsScaleAsync(Object body, String name, String namespace, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> patchNamespacedReplicasetsScaleAsync(Object body, String name, String namespace);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> patchNamespacedReplicasetsScaleWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale patchNamespacedReplicasetsScale(Object body, String name, String namespace, String pretty);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> patchNamespacedReplicasetsScaleAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> patchNamespacedReplicasetsScaleAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> patchNamespacedReplicasetsScaleWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read status of the specified ReplicaSet.
     *
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSet object if successful.
     */
    V1beta1ReplicaSet readNamespacedReplicaSetStatus(String name, String namespace);

    /**
     * read status of the specified ReplicaSet.
     *
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSet> readNamespacedReplicaSetStatusAsync(String name, String namespace, final ServiceCallback<V1beta1ReplicaSet> serviceCallback);

    /**
     * read status of the specified ReplicaSet.
     *
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<V1beta1ReplicaSet> readNamespacedReplicaSetStatusAsync(String name, String namespace);

    /**
     * read status of the specified ReplicaSet.
     *
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<ServiceResponse<V1beta1ReplicaSet>> readNamespacedReplicaSetStatusWithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified ReplicaSet.
     *
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSet object if successful.
     */
    V1beta1ReplicaSet readNamespacedReplicaSetStatus(String name, String namespace, String pretty);

    /**
     * read status of the specified ReplicaSet.
     *
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSet> readNamespacedReplicaSetStatusAsync(String name, String namespace, String pretty, final ServiceCallback<V1beta1ReplicaSet> serviceCallback);

    /**
     * read status of the specified ReplicaSet.
     *
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<V1beta1ReplicaSet> readNamespacedReplicaSetStatusAsync(String name, String namespace, String pretty);

    /**
     * read status of the specified ReplicaSet.
     *
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<ServiceResponse<V1beta1ReplicaSet>> readNamespacedReplicaSetStatusWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSet object if successful.
     */
    V1beta1ReplicaSet replaceNamespacedReplicaSetStatus(V1beta1ReplicaSet body, String name, String namespace);

    /**
     * replace status of the specified ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSet> replaceNamespacedReplicaSetStatusAsync(V1beta1ReplicaSet body, String name, String namespace, final ServiceCallback<V1beta1ReplicaSet> serviceCallback);

    /**
     * replace status of the specified ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<V1beta1ReplicaSet> replaceNamespacedReplicaSetStatusAsync(V1beta1ReplicaSet body, String name, String namespace);

    /**
     * replace status of the specified ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<ServiceResponse<V1beta1ReplicaSet>> replaceNamespacedReplicaSetStatusWithServiceResponseAsync(V1beta1ReplicaSet body, String name, String namespace);
    /**
     * replace status of the specified ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSet object if successful.
     */
    V1beta1ReplicaSet replaceNamespacedReplicaSetStatus(V1beta1ReplicaSet body, String name, String namespace, String pretty);

    /**
     * replace status of the specified ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSet> replaceNamespacedReplicaSetStatusAsync(V1beta1ReplicaSet body, String name, String namespace, String pretty, final ServiceCallback<V1beta1ReplicaSet> serviceCallback);

    /**
     * replace status of the specified ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<V1beta1ReplicaSet> replaceNamespacedReplicaSetStatusAsync(V1beta1ReplicaSet body, String name, String namespace, String pretty);

    /**
     * replace status of the specified ReplicaSet.
     *
     * @param body the V1beta1ReplicaSet value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<ServiceResponse<V1beta1ReplicaSet>> replaceNamespacedReplicaSetStatusWithServiceResponseAsync(V1beta1ReplicaSet body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified ReplicaSet.
     *
     * @param body the Object value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSet object if successful.
     */
    V1beta1ReplicaSet patchNamespacedReplicaSetStatus(Object body, String name, String namespace);

    /**
     * partially update status of the specified ReplicaSet.
     *
     * @param body the Object value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSet> patchNamespacedReplicaSetStatusAsync(Object body, String name, String namespace, final ServiceCallback<V1beta1ReplicaSet> serviceCallback);

    /**
     * partially update status of the specified ReplicaSet.
     *
     * @param body the Object value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<V1beta1ReplicaSet> patchNamespacedReplicaSetStatusAsync(Object body, String name, String namespace);

    /**
     * partially update status of the specified ReplicaSet.
     *
     * @param body the Object value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<ServiceResponse<V1beta1ReplicaSet>> patchNamespacedReplicaSetStatusWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified ReplicaSet.
     *
     * @param body the Object value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSet object if successful.
     */
    V1beta1ReplicaSet patchNamespacedReplicaSetStatus(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified ReplicaSet.
     *
     * @param body the Object value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSet> patchNamespacedReplicaSetStatusAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1beta1ReplicaSet> serviceCallback);

    /**
     * partially update status of the specified ReplicaSet.
     *
     * @param body the Object value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<V1beta1ReplicaSet> patchNamespacedReplicaSetStatusAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified ReplicaSet.
     *
     * @param body the Object value
     * @param name name of the ReplicaSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSet object
     */
    Observable<ServiceResponse<V1beta1ReplicaSet>> patchNamespacedReplicaSetStatusWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale readNamespacedReplicationcontrollersScale(String name, String namespace);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> readNamespacedReplicationcontrollersScaleAsync(String name, String namespace, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> readNamespacedReplicationcontrollersScaleAsync(String name, String namespace);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> readNamespacedReplicationcontrollersScaleWithServiceResponseAsync(String name, String namespace);
    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale readNamespacedReplicationcontrollersScale(String name, String namespace, String pretty);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> readNamespacedReplicationcontrollersScaleAsync(String name, String namespace, String pretty, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> readNamespacedReplicationcontrollersScaleAsync(String name, String namespace, String pretty);

    /**
     * read scale of the specified Scale.
     *
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> readNamespacedReplicationcontrollersScaleWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale replaceNamespacedReplicationcontrollersScale(Extensionsv1beta1Scale body, String name, String namespace);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> replaceNamespacedReplicationcontrollersScaleAsync(Extensionsv1beta1Scale body, String name, String namespace, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> replaceNamespacedReplicationcontrollersScaleAsync(Extensionsv1beta1Scale body, String name, String namespace);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> replaceNamespacedReplicationcontrollersScaleWithServiceResponseAsync(Extensionsv1beta1Scale body, String name, String namespace);
    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale replaceNamespacedReplicationcontrollersScale(Extensionsv1beta1Scale body, String name, String namespace, String pretty);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> replaceNamespacedReplicationcontrollersScaleAsync(Extensionsv1beta1Scale body, String name, String namespace, String pretty, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> replaceNamespacedReplicationcontrollersScaleAsync(Extensionsv1beta1Scale body, String name, String namespace, String pretty);

    /**
     * replace scale of the specified Scale.
     *
     * @param body the Extensionsv1beta1Scale value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> replaceNamespacedReplicationcontrollersScaleWithServiceResponseAsync(Extensionsv1beta1Scale body, String name, String namespace, String pretty);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale patchNamespacedReplicationcontrollersScale(Object body, String name, String namespace);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> patchNamespacedReplicationcontrollersScaleAsync(Object body, String name, String namespace, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> patchNamespacedReplicationcontrollersScaleAsync(Object body, String name, String namespace);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> patchNamespacedReplicationcontrollersScaleWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Extensionsv1beta1Scale object if successful.
     */
    Extensionsv1beta1Scale patchNamespacedReplicationcontrollersScale(Object body, String name, String namespace, String pretty);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Extensionsv1beta1Scale> patchNamespacedReplicationcontrollersScaleAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<Extensionsv1beta1Scale> serviceCallback);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<Extensionsv1beta1Scale> patchNamespacedReplicationcontrollersScaleAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update scale of the specified Scale.
     *
     * @param body the Object value
     * @param name name of the Scale
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Extensionsv1beta1Scale object
     */
    Observable<ServiceResponse<Extensionsv1beta1Scale>> patchNamespacedReplicationcontrollersScaleWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind NetworkPolicy.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1NetworkPolicyList object if successful.
     */
    V1beta1NetworkPolicyList listNetworkPolicyForAllNamespaces();

    /**
     * list or watch objects of kind NetworkPolicy.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1NetworkPolicyList> listNetworkPolicyForAllNamespacesAsync(final ServiceCallback<V1beta1NetworkPolicyList> serviceCallback);

    /**
     * list or watch objects of kind NetworkPolicy.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicyList object
     */
    Observable<V1beta1NetworkPolicyList> listNetworkPolicyForAllNamespacesAsync();

    /**
     * list or watch objects of kind NetworkPolicy.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicyList object
     */
    Observable<ServiceResponse<V1beta1NetworkPolicyList>> listNetworkPolicyForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind NetworkPolicy.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1NetworkPolicyList object if successful.
     */
    V1beta1NetworkPolicyList listNetworkPolicyForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind NetworkPolicy.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1NetworkPolicyList> listNetworkPolicyForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1beta1NetworkPolicyList> serviceCallback);

    /**
     * list or watch objects of kind NetworkPolicy.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicyList object
     */
    Observable<V1beta1NetworkPolicyList> listNetworkPolicyForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind NetworkPolicy.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1NetworkPolicyList object
     */
    Observable<ServiceResponse<V1beta1NetworkPolicyList>> listNetworkPolicyForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind PodSecurityPolicy.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodSecurityPolicyList object if successful.
     */
    V1beta1PodSecurityPolicyList listPodSecurityPolicy();

    /**
     * list or watch objects of kind PodSecurityPolicy.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodSecurityPolicyList> listPodSecurityPolicyAsync(final ServiceCallback<V1beta1PodSecurityPolicyList> serviceCallback);

    /**
     * list or watch objects of kind PodSecurityPolicy.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicyList object
     */
    Observable<V1beta1PodSecurityPolicyList> listPodSecurityPolicyAsync();

    /**
     * list or watch objects of kind PodSecurityPolicy.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicyList object
     */
    Observable<ServiceResponse<V1beta1PodSecurityPolicyList>> listPodSecurityPolicyWithServiceResponseAsync();
    /**
     * list or watch objects of kind PodSecurityPolicy.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodSecurityPolicyList object if successful.
     */
    V1beta1PodSecurityPolicyList listPodSecurityPolicy(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind PodSecurityPolicy.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodSecurityPolicyList> listPodSecurityPolicyAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1beta1PodSecurityPolicyList> serviceCallback);

    /**
     * list or watch objects of kind PodSecurityPolicy.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicyList object
     */
    Observable<V1beta1PodSecurityPolicyList> listPodSecurityPolicyAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind PodSecurityPolicy.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicyList object
     */
    Observable<ServiceResponse<V1beta1PodSecurityPolicyList>> listPodSecurityPolicyWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a PodSecurityPolicy.
     *
     * @param body the V1beta1PodSecurityPolicy value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodSecurityPolicy object if successful.
     */
    V1beta1PodSecurityPolicy createPodSecurityPolicy(V1beta1PodSecurityPolicy body);

    /**
     * create a PodSecurityPolicy.
     *
     * @param body the V1beta1PodSecurityPolicy value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodSecurityPolicy> createPodSecurityPolicyAsync(V1beta1PodSecurityPolicy body, final ServiceCallback<V1beta1PodSecurityPolicy> serviceCallback);

    /**
     * create a PodSecurityPolicy.
     *
     * @param body the V1beta1PodSecurityPolicy value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicy object
     */
    Observable<V1beta1PodSecurityPolicy> createPodSecurityPolicyAsync(V1beta1PodSecurityPolicy body);

    /**
     * create a PodSecurityPolicy.
     *
     * @param body the V1beta1PodSecurityPolicy value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicy object
     */
    Observable<ServiceResponse<V1beta1PodSecurityPolicy>> createPodSecurityPolicyWithServiceResponseAsync(V1beta1PodSecurityPolicy body);
    /**
     * create a PodSecurityPolicy.
     *
     * @param body the V1beta1PodSecurityPolicy value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodSecurityPolicy object if successful.
     */
    V1beta1PodSecurityPolicy createPodSecurityPolicy(V1beta1PodSecurityPolicy body, String pretty);

    /**
     * create a PodSecurityPolicy.
     *
     * @param body the V1beta1PodSecurityPolicy value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodSecurityPolicy> createPodSecurityPolicyAsync(V1beta1PodSecurityPolicy body, String pretty, final ServiceCallback<V1beta1PodSecurityPolicy> serviceCallback);

    /**
     * create a PodSecurityPolicy.
     *
     * @param body the V1beta1PodSecurityPolicy value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicy object
     */
    Observable<V1beta1PodSecurityPolicy> createPodSecurityPolicyAsync(V1beta1PodSecurityPolicy body, String pretty);

    /**
     * create a PodSecurityPolicy.
     *
     * @param body the V1beta1PodSecurityPolicy value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicy object
     */
    Observable<ServiceResponse<V1beta1PodSecurityPolicy>> createPodSecurityPolicyWithServiceResponseAsync(V1beta1PodSecurityPolicy body, String pretty);

    /**
     * delete collection of PodSecurityPolicy.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionPodSecurityPolicy();

    /**
     * delete collection of PodSecurityPolicy.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionPodSecurityPolicyAsync(final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of PodSecurityPolicy.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionPodSecurityPolicyAsync();

    /**
     * delete collection of PodSecurityPolicy.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionPodSecurityPolicyWithServiceResponseAsync();
    /**
     * delete collection of PodSecurityPolicy.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionPodSecurityPolicy(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of PodSecurityPolicy.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionPodSecurityPolicyAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of PodSecurityPolicy.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionPodSecurityPolicyAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of PodSecurityPolicy.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionPodSecurityPolicyWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified PodSecurityPolicy.
     *
     * @param name name of the PodSecurityPolicy
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodSecurityPolicy object if successful.
     */
    V1beta1PodSecurityPolicy readPodSecurityPolicy(String name);

    /**
     * read the specified PodSecurityPolicy.
     *
     * @param name name of the PodSecurityPolicy
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodSecurityPolicy> readPodSecurityPolicyAsync(String name, final ServiceCallback<V1beta1PodSecurityPolicy> serviceCallback);

    /**
     * read the specified PodSecurityPolicy.
     *
     * @param name name of the PodSecurityPolicy
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicy object
     */
    Observable<V1beta1PodSecurityPolicy> readPodSecurityPolicyAsync(String name);

    /**
     * read the specified PodSecurityPolicy.
     *
     * @param name name of the PodSecurityPolicy
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicy object
     */
    Observable<ServiceResponse<V1beta1PodSecurityPolicy>> readPodSecurityPolicyWithServiceResponseAsync(String name);
    /**
     * read the specified PodSecurityPolicy.
     *
     * @param name name of the PodSecurityPolicy
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodSecurityPolicy object if successful.
     */
    V1beta1PodSecurityPolicy readPodSecurityPolicy(String name, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified PodSecurityPolicy.
     *
     * @param name name of the PodSecurityPolicy
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodSecurityPolicy> readPodSecurityPolicyAsync(String name, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1beta1PodSecurityPolicy> serviceCallback);

    /**
     * read the specified PodSecurityPolicy.
     *
     * @param name name of the PodSecurityPolicy
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicy object
     */
    Observable<V1beta1PodSecurityPolicy> readPodSecurityPolicyAsync(String name, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified PodSecurityPolicy.
     *
     * @param name name of the PodSecurityPolicy
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicy object
     */
    Observable<ServiceResponse<V1beta1PodSecurityPolicy>> readPodSecurityPolicyWithServiceResponseAsync(String name, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified PodSecurityPolicy.
     *
     * @param body the V1beta1PodSecurityPolicy value
     * @param name name of the PodSecurityPolicy
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodSecurityPolicy object if successful.
     */
    V1beta1PodSecurityPolicy replacePodSecurityPolicy(V1beta1PodSecurityPolicy body, String name);

    /**
     * replace the specified PodSecurityPolicy.
     *
     * @param body the V1beta1PodSecurityPolicy value
     * @param name name of the PodSecurityPolicy
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodSecurityPolicy> replacePodSecurityPolicyAsync(V1beta1PodSecurityPolicy body, String name, final ServiceCallback<V1beta1PodSecurityPolicy> serviceCallback);

    /**
     * replace the specified PodSecurityPolicy.
     *
     * @param body the V1beta1PodSecurityPolicy value
     * @param name name of the PodSecurityPolicy
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicy object
     */
    Observable<V1beta1PodSecurityPolicy> replacePodSecurityPolicyAsync(V1beta1PodSecurityPolicy body, String name);

    /**
     * replace the specified PodSecurityPolicy.
     *
     * @param body the V1beta1PodSecurityPolicy value
     * @param name name of the PodSecurityPolicy
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicy object
     */
    Observable<ServiceResponse<V1beta1PodSecurityPolicy>> replacePodSecurityPolicyWithServiceResponseAsync(V1beta1PodSecurityPolicy body, String name);
    /**
     * replace the specified PodSecurityPolicy.
     *
     * @param body the V1beta1PodSecurityPolicy value
     * @param name name of the PodSecurityPolicy
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodSecurityPolicy object if successful.
     */
    V1beta1PodSecurityPolicy replacePodSecurityPolicy(V1beta1PodSecurityPolicy body, String name, String pretty);

    /**
     * replace the specified PodSecurityPolicy.
     *
     * @param body the V1beta1PodSecurityPolicy value
     * @param name name of the PodSecurityPolicy
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodSecurityPolicy> replacePodSecurityPolicyAsync(V1beta1PodSecurityPolicy body, String name, String pretty, final ServiceCallback<V1beta1PodSecurityPolicy> serviceCallback);

    /**
     * replace the specified PodSecurityPolicy.
     *
     * @param body the V1beta1PodSecurityPolicy value
     * @param name name of the PodSecurityPolicy
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicy object
     */
    Observable<V1beta1PodSecurityPolicy> replacePodSecurityPolicyAsync(V1beta1PodSecurityPolicy body, String name, String pretty);

    /**
     * replace the specified PodSecurityPolicy.
     *
     * @param body the V1beta1PodSecurityPolicy value
     * @param name name of the PodSecurityPolicy
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicy object
     */
    Observable<ServiceResponse<V1beta1PodSecurityPolicy>> replacePodSecurityPolicyWithServiceResponseAsync(V1beta1PodSecurityPolicy body, String name, String pretty);

    /**
     * delete a PodSecurityPolicy.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodSecurityPolicy
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deletePodSecurityPolicy(V1DeleteOptions body, String name);

    /**
     * delete a PodSecurityPolicy.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodSecurityPolicy
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deletePodSecurityPolicyAsync(V1DeleteOptions body, String name, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a PodSecurityPolicy.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodSecurityPolicy
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deletePodSecurityPolicyAsync(V1DeleteOptions body, String name);

    /**
     * delete a PodSecurityPolicy.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodSecurityPolicy
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deletePodSecurityPolicyWithServiceResponseAsync(V1DeleteOptions body, String name);
    /**
     * delete a PodSecurityPolicy.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodSecurityPolicy
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deletePodSecurityPolicy(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a PodSecurityPolicy.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodSecurityPolicy
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deletePodSecurityPolicyAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a PodSecurityPolicy.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodSecurityPolicy
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deletePodSecurityPolicyAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a PodSecurityPolicy.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodSecurityPolicy
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deletePodSecurityPolicyWithServiceResponseAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified PodSecurityPolicy.
     *
     * @param body the Object value
     * @param name name of the PodSecurityPolicy
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodSecurityPolicy object if successful.
     */
    V1beta1PodSecurityPolicy patchPodSecurityPolicy(Object body, String name);

    /**
     * partially update the specified PodSecurityPolicy.
     *
     * @param body the Object value
     * @param name name of the PodSecurityPolicy
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodSecurityPolicy> patchPodSecurityPolicyAsync(Object body, String name, final ServiceCallback<V1beta1PodSecurityPolicy> serviceCallback);

    /**
     * partially update the specified PodSecurityPolicy.
     *
     * @param body the Object value
     * @param name name of the PodSecurityPolicy
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicy object
     */
    Observable<V1beta1PodSecurityPolicy> patchPodSecurityPolicyAsync(Object body, String name);

    /**
     * partially update the specified PodSecurityPolicy.
     *
     * @param body the Object value
     * @param name name of the PodSecurityPolicy
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicy object
     */
    Observable<ServiceResponse<V1beta1PodSecurityPolicy>> patchPodSecurityPolicyWithServiceResponseAsync(Object body, String name);
    /**
     * partially update the specified PodSecurityPolicy.
     *
     * @param body the Object value
     * @param name name of the PodSecurityPolicy
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodSecurityPolicy object if successful.
     */
    V1beta1PodSecurityPolicy patchPodSecurityPolicy(Object body, String name, String pretty);

    /**
     * partially update the specified PodSecurityPolicy.
     *
     * @param body the Object value
     * @param name name of the PodSecurityPolicy
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodSecurityPolicy> patchPodSecurityPolicyAsync(Object body, String name, String pretty, final ServiceCallback<V1beta1PodSecurityPolicy> serviceCallback);

    /**
     * partially update the specified PodSecurityPolicy.
     *
     * @param body the Object value
     * @param name name of the PodSecurityPolicy
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicy object
     */
    Observable<V1beta1PodSecurityPolicy> patchPodSecurityPolicyAsync(Object body, String name, String pretty);

    /**
     * partially update the specified PodSecurityPolicy.
     *
     * @param body the Object value
     * @param name name of the PodSecurityPolicy
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodSecurityPolicy object
     */
    Observable<ServiceResponse<V1beta1PodSecurityPolicy>> patchPodSecurityPolicyWithServiceResponseAsync(Object body, String name, String pretty);

    /**
     * list or watch objects of kind ReplicaSet.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSetList object if successful.
     */
    V1beta1ReplicaSetList listReplicaSetForAllNamespaces();

    /**
     * list or watch objects of kind ReplicaSet.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSetList> listReplicaSetForAllNamespacesAsync(final ServiceCallback<V1beta1ReplicaSetList> serviceCallback);

    /**
     * list or watch objects of kind ReplicaSet.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSetList object
     */
    Observable<V1beta1ReplicaSetList> listReplicaSetForAllNamespacesAsync();

    /**
     * list or watch objects of kind ReplicaSet.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSetList object
     */
    Observable<ServiceResponse<V1beta1ReplicaSetList>> listReplicaSetForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind ReplicaSet.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ReplicaSetList object if successful.
     */
    V1beta1ReplicaSetList listReplicaSetForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind ReplicaSet.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ReplicaSetList> listReplicaSetForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1beta1ReplicaSetList> serviceCallback);

    /**
     * list or watch objects of kind ReplicaSet.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSetList object
     */
    Observable<V1beta1ReplicaSetList> listReplicaSetForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind ReplicaSet.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ReplicaSetList object
     */
    Observable<ServiceResponse<V1beta1ReplicaSetList>> listReplicaSetForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind ThirdPartyResource.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ThirdPartyResourceList object if successful.
     */
    V1beta1ThirdPartyResourceList listThirdPartyResource();

    /**
     * list or watch objects of kind ThirdPartyResource.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ThirdPartyResourceList> listThirdPartyResourceAsync(final ServiceCallback<V1beta1ThirdPartyResourceList> serviceCallback);

    /**
     * list or watch objects of kind ThirdPartyResource.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResourceList object
     */
    Observable<V1beta1ThirdPartyResourceList> listThirdPartyResourceAsync();

    /**
     * list or watch objects of kind ThirdPartyResource.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResourceList object
     */
    Observable<ServiceResponse<V1beta1ThirdPartyResourceList>> listThirdPartyResourceWithServiceResponseAsync();
    /**
     * list or watch objects of kind ThirdPartyResource.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ThirdPartyResourceList object if successful.
     */
    V1beta1ThirdPartyResourceList listThirdPartyResource(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ThirdPartyResource.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ThirdPartyResourceList> listThirdPartyResourceAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1beta1ThirdPartyResourceList> serviceCallback);

    /**
     * list or watch objects of kind ThirdPartyResource.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResourceList object
     */
    Observable<V1beta1ThirdPartyResourceList> listThirdPartyResourceAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ThirdPartyResource.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResourceList object
     */
    Observable<ServiceResponse<V1beta1ThirdPartyResourceList>> listThirdPartyResourceWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a ThirdPartyResource.
     *
     * @param body the V1beta1ThirdPartyResource value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ThirdPartyResource object if successful.
     */
    V1beta1ThirdPartyResource createThirdPartyResource(V1beta1ThirdPartyResource body);

    /**
     * create a ThirdPartyResource.
     *
     * @param body the V1beta1ThirdPartyResource value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ThirdPartyResource> createThirdPartyResourceAsync(V1beta1ThirdPartyResource body, final ServiceCallback<V1beta1ThirdPartyResource> serviceCallback);

    /**
     * create a ThirdPartyResource.
     *
     * @param body the V1beta1ThirdPartyResource value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResource object
     */
    Observable<V1beta1ThirdPartyResource> createThirdPartyResourceAsync(V1beta1ThirdPartyResource body);

    /**
     * create a ThirdPartyResource.
     *
     * @param body the V1beta1ThirdPartyResource value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResource object
     */
    Observable<ServiceResponse<V1beta1ThirdPartyResource>> createThirdPartyResourceWithServiceResponseAsync(V1beta1ThirdPartyResource body);
    /**
     * create a ThirdPartyResource.
     *
     * @param body the V1beta1ThirdPartyResource value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ThirdPartyResource object if successful.
     */
    V1beta1ThirdPartyResource createThirdPartyResource(V1beta1ThirdPartyResource body, String pretty);

    /**
     * create a ThirdPartyResource.
     *
     * @param body the V1beta1ThirdPartyResource value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ThirdPartyResource> createThirdPartyResourceAsync(V1beta1ThirdPartyResource body, String pretty, final ServiceCallback<V1beta1ThirdPartyResource> serviceCallback);

    /**
     * create a ThirdPartyResource.
     *
     * @param body the V1beta1ThirdPartyResource value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResource object
     */
    Observable<V1beta1ThirdPartyResource> createThirdPartyResourceAsync(V1beta1ThirdPartyResource body, String pretty);

    /**
     * create a ThirdPartyResource.
     *
     * @param body the V1beta1ThirdPartyResource value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResource object
     */
    Observable<ServiceResponse<V1beta1ThirdPartyResource>> createThirdPartyResourceWithServiceResponseAsync(V1beta1ThirdPartyResource body, String pretty);

    /**
     * delete collection of ThirdPartyResource.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionThirdPartyResource();

    /**
     * delete collection of ThirdPartyResource.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionThirdPartyResourceAsync(final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ThirdPartyResource.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionThirdPartyResourceAsync();

    /**
     * delete collection of ThirdPartyResource.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionThirdPartyResourceWithServiceResponseAsync();
    /**
     * delete collection of ThirdPartyResource.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionThirdPartyResource(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ThirdPartyResource.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionThirdPartyResourceAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ThirdPartyResource.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionThirdPartyResourceAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ThirdPartyResource.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionThirdPartyResourceWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified ThirdPartyResource.
     *
     * @param name name of the ThirdPartyResource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ThirdPartyResource object if successful.
     */
    V1beta1ThirdPartyResource readThirdPartyResource(String name);

    /**
     * read the specified ThirdPartyResource.
     *
     * @param name name of the ThirdPartyResource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ThirdPartyResource> readThirdPartyResourceAsync(String name, final ServiceCallback<V1beta1ThirdPartyResource> serviceCallback);

    /**
     * read the specified ThirdPartyResource.
     *
     * @param name name of the ThirdPartyResource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResource object
     */
    Observable<V1beta1ThirdPartyResource> readThirdPartyResourceAsync(String name);

    /**
     * read the specified ThirdPartyResource.
     *
     * @param name name of the ThirdPartyResource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResource object
     */
    Observable<ServiceResponse<V1beta1ThirdPartyResource>> readThirdPartyResourceWithServiceResponseAsync(String name);
    /**
     * read the specified ThirdPartyResource.
     *
     * @param name name of the ThirdPartyResource
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ThirdPartyResource object if successful.
     */
    V1beta1ThirdPartyResource readThirdPartyResource(String name, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified ThirdPartyResource.
     *
     * @param name name of the ThirdPartyResource
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ThirdPartyResource> readThirdPartyResourceAsync(String name, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1beta1ThirdPartyResource> serviceCallback);

    /**
     * read the specified ThirdPartyResource.
     *
     * @param name name of the ThirdPartyResource
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResource object
     */
    Observable<V1beta1ThirdPartyResource> readThirdPartyResourceAsync(String name, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified ThirdPartyResource.
     *
     * @param name name of the ThirdPartyResource
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResource object
     */
    Observable<ServiceResponse<V1beta1ThirdPartyResource>> readThirdPartyResourceWithServiceResponseAsync(String name, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified ThirdPartyResource.
     *
     * @param body the V1beta1ThirdPartyResource value
     * @param name name of the ThirdPartyResource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ThirdPartyResource object if successful.
     */
    V1beta1ThirdPartyResource replaceThirdPartyResource(V1beta1ThirdPartyResource body, String name);

    /**
     * replace the specified ThirdPartyResource.
     *
     * @param body the V1beta1ThirdPartyResource value
     * @param name name of the ThirdPartyResource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ThirdPartyResource> replaceThirdPartyResourceAsync(V1beta1ThirdPartyResource body, String name, final ServiceCallback<V1beta1ThirdPartyResource> serviceCallback);

    /**
     * replace the specified ThirdPartyResource.
     *
     * @param body the V1beta1ThirdPartyResource value
     * @param name name of the ThirdPartyResource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResource object
     */
    Observable<V1beta1ThirdPartyResource> replaceThirdPartyResourceAsync(V1beta1ThirdPartyResource body, String name);

    /**
     * replace the specified ThirdPartyResource.
     *
     * @param body the V1beta1ThirdPartyResource value
     * @param name name of the ThirdPartyResource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResource object
     */
    Observable<ServiceResponse<V1beta1ThirdPartyResource>> replaceThirdPartyResourceWithServiceResponseAsync(V1beta1ThirdPartyResource body, String name);
    /**
     * replace the specified ThirdPartyResource.
     *
     * @param body the V1beta1ThirdPartyResource value
     * @param name name of the ThirdPartyResource
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ThirdPartyResource object if successful.
     */
    V1beta1ThirdPartyResource replaceThirdPartyResource(V1beta1ThirdPartyResource body, String name, String pretty);

    /**
     * replace the specified ThirdPartyResource.
     *
     * @param body the V1beta1ThirdPartyResource value
     * @param name name of the ThirdPartyResource
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ThirdPartyResource> replaceThirdPartyResourceAsync(V1beta1ThirdPartyResource body, String name, String pretty, final ServiceCallback<V1beta1ThirdPartyResource> serviceCallback);

    /**
     * replace the specified ThirdPartyResource.
     *
     * @param body the V1beta1ThirdPartyResource value
     * @param name name of the ThirdPartyResource
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResource object
     */
    Observable<V1beta1ThirdPartyResource> replaceThirdPartyResourceAsync(V1beta1ThirdPartyResource body, String name, String pretty);

    /**
     * replace the specified ThirdPartyResource.
     *
     * @param body the V1beta1ThirdPartyResource value
     * @param name name of the ThirdPartyResource
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResource object
     */
    Observable<ServiceResponse<V1beta1ThirdPartyResource>> replaceThirdPartyResourceWithServiceResponseAsync(V1beta1ThirdPartyResource body, String name, String pretty);

    /**
     * delete a ThirdPartyResource.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ThirdPartyResource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteThirdPartyResource(V1DeleteOptions body, String name);

    /**
     * delete a ThirdPartyResource.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ThirdPartyResource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteThirdPartyResourceAsync(V1DeleteOptions body, String name, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ThirdPartyResource.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ThirdPartyResource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteThirdPartyResourceAsync(V1DeleteOptions body, String name);

    /**
     * delete a ThirdPartyResource.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ThirdPartyResource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteThirdPartyResourceWithServiceResponseAsync(V1DeleteOptions body, String name);
    /**
     * delete a ThirdPartyResource.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ThirdPartyResource
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteThirdPartyResource(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ThirdPartyResource.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ThirdPartyResource
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteThirdPartyResourceAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ThirdPartyResource.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ThirdPartyResource
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteThirdPartyResourceAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ThirdPartyResource.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ThirdPartyResource
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteThirdPartyResourceWithServiceResponseAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified ThirdPartyResource.
     *
     * @param body the Object value
     * @param name name of the ThirdPartyResource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ThirdPartyResource object if successful.
     */
    V1beta1ThirdPartyResource patchThirdPartyResource(Object body, String name);

    /**
     * partially update the specified ThirdPartyResource.
     *
     * @param body the Object value
     * @param name name of the ThirdPartyResource
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ThirdPartyResource> patchThirdPartyResourceAsync(Object body, String name, final ServiceCallback<V1beta1ThirdPartyResource> serviceCallback);

    /**
     * partially update the specified ThirdPartyResource.
     *
     * @param body the Object value
     * @param name name of the ThirdPartyResource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResource object
     */
    Observable<V1beta1ThirdPartyResource> patchThirdPartyResourceAsync(Object body, String name);

    /**
     * partially update the specified ThirdPartyResource.
     *
     * @param body the Object value
     * @param name name of the ThirdPartyResource
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResource object
     */
    Observable<ServiceResponse<V1beta1ThirdPartyResource>> patchThirdPartyResourceWithServiceResponseAsync(Object body, String name);
    /**
     * partially update the specified ThirdPartyResource.
     *
     * @param body the Object value
     * @param name name of the ThirdPartyResource
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ThirdPartyResource object if successful.
     */
    V1beta1ThirdPartyResource patchThirdPartyResource(Object body, String name, String pretty);

    /**
     * partially update the specified ThirdPartyResource.
     *
     * @param body the Object value
     * @param name name of the ThirdPartyResource
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ThirdPartyResource> patchThirdPartyResourceAsync(Object body, String name, String pretty, final ServiceCallback<V1beta1ThirdPartyResource> serviceCallback);

    /**
     * partially update the specified ThirdPartyResource.
     *
     * @param body the Object value
     * @param name name of the ThirdPartyResource
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResource object
     */
    Observable<V1beta1ThirdPartyResource> patchThirdPartyResourceAsync(Object body, String name, String pretty);

    /**
     * partially update the specified ThirdPartyResource.
     *
     * @param body the Object value
     * @param name name of the ThirdPartyResource
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ThirdPartyResource object
     */
    Observable<ServiceResponse<V1beta1ThirdPartyResource>> patchThirdPartyResourceWithServiceResponseAsync(Object body, String name, String pretty);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIGroup object if successful.
     */
    V1APIGroup getAPIGroup7();

    /**
     * get information of a group.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIGroup> getAPIGroup7Async(final ServiceCallback<V1APIGroup> serviceCallback);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<V1APIGroup> getAPIGroup7Async();

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<ServiceResponse<V1APIGroup>> getAPIGroup7WithServiceResponseAsync();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources12();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources12Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources12Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources12WithServiceResponseAsync();

    /**
     * list or watch objects of kind PodDisruptionBudget.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudgetList object if successful.
     */
    V1beta1PodDisruptionBudgetList listNamespacedPodDisruptionBudget(String namespace);

    /**
     * list or watch objects of kind PodDisruptionBudget.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudgetList> listNamespacedPodDisruptionBudgetAsync(String namespace, final ServiceCallback<V1beta1PodDisruptionBudgetList> serviceCallback);

    /**
     * list or watch objects of kind PodDisruptionBudget.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudgetList object
     */
    Observable<V1beta1PodDisruptionBudgetList> listNamespacedPodDisruptionBudgetAsync(String namespace);

    /**
     * list or watch objects of kind PodDisruptionBudget.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudgetList object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudgetList>> listNamespacedPodDisruptionBudgetWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind PodDisruptionBudget.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudgetList object if successful.
     */
    V1beta1PodDisruptionBudgetList listNamespacedPodDisruptionBudget(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind PodDisruptionBudget.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudgetList> listNamespacedPodDisruptionBudgetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1beta1PodDisruptionBudgetList> serviceCallback);

    /**
     * list or watch objects of kind PodDisruptionBudget.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudgetList object
     */
    Observable<V1beta1PodDisruptionBudgetList> listNamespacedPodDisruptionBudgetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind PodDisruptionBudget.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudgetList object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudgetList>> listNamespacedPodDisruptionBudgetWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudget object if successful.
     */
    V1beta1PodDisruptionBudget createNamespacedPodDisruptionBudget(V1beta1PodDisruptionBudget body, String namespace);

    /**
     * create a PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudget> createNamespacedPodDisruptionBudgetAsync(V1beta1PodDisruptionBudget body, String namespace, final ServiceCallback<V1beta1PodDisruptionBudget> serviceCallback);

    /**
     * create a PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<V1beta1PodDisruptionBudget> createNamespacedPodDisruptionBudgetAsync(V1beta1PodDisruptionBudget body, String namespace);

    /**
     * create a PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudget>> createNamespacedPodDisruptionBudgetWithServiceResponseAsync(V1beta1PodDisruptionBudget body, String namespace);
    /**
     * create a PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudget object if successful.
     */
    V1beta1PodDisruptionBudget createNamespacedPodDisruptionBudget(V1beta1PodDisruptionBudget body, String namespace, String pretty);

    /**
     * create a PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudget> createNamespacedPodDisruptionBudgetAsync(V1beta1PodDisruptionBudget body, String namespace, String pretty, final ServiceCallback<V1beta1PodDisruptionBudget> serviceCallback);

    /**
     * create a PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<V1beta1PodDisruptionBudget> createNamespacedPodDisruptionBudgetAsync(V1beta1PodDisruptionBudget body, String namespace, String pretty);

    /**
     * create a PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudget>> createNamespacedPodDisruptionBudgetWithServiceResponseAsync(V1beta1PodDisruptionBudget body, String namespace, String pretty);

    /**
     * delete collection of PodDisruptionBudget.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedPodDisruptionBudget(String namespace);

    /**
     * delete collection of PodDisruptionBudget.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedPodDisruptionBudgetAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of PodDisruptionBudget.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedPodDisruptionBudgetAsync(String namespace);

    /**
     * delete collection of PodDisruptionBudget.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedPodDisruptionBudgetWithServiceResponseAsync(String namespace);
    /**
     * delete collection of PodDisruptionBudget.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedPodDisruptionBudget(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of PodDisruptionBudget.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedPodDisruptionBudgetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of PodDisruptionBudget.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedPodDisruptionBudgetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of PodDisruptionBudget.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedPodDisruptionBudgetWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified PodDisruptionBudget.
     *
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudget object if successful.
     */
    V1beta1PodDisruptionBudget readNamespacedPodDisruptionBudget(String name, String namespace);

    /**
     * read the specified PodDisruptionBudget.
     *
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudget> readNamespacedPodDisruptionBudgetAsync(String name, String namespace, final ServiceCallback<V1beta1PodDisruptionBudget> serviceCallback);

    /**
     * read the specified PodDisruptionBudget.
     *
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<V1beta1PodDisruptionBudget> readNamespacedPodDisruptionBudgetAsync(String name, String namespace);

    /**
     * read the specified PodDisruptionBudget.
     *
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudget>> readNamespacedPodDisruptionBudgetWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified PodDisruptionBudget.
     *
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudget object if successful.
     */
    V1beta1PodDisruptionBudget readNamespacedPodDisruptionBudget(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified PodDisruptionBudget.
     *
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudget> readNamespacedPodDisruptionBudgetAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1beta1PodDisruptionBudget> serviceCallback);

    /**
     * read the specified PodDisruptionBudget.
     *
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<V1beta1PodDisruptionBudget> readNamespacedPodDisruptionBudgetAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified PodDisruptionBudget.
     *
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudget>> readNamespacedPodDisruptionBudgetWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudget object if successful.
     */
    V1beta1PodDisruptionBudget replaceNamespacedPodDisruptionBudget(V1beta1PodDisruptionBudget body, String name, String namespace);

    /**
     * replace the specified PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudget> replaceNamespacedPodDisruptionBudgetAsync(V1beta1PodDisruptionBudget body, String name, String namespace, final ServiceCallback<V1beta1PodDisruptionBudget> serviceCallback);

    /**
     * replace the specified PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<V1beta1PodDisruptionBudget> replaceNamespacedPodDisruptionBudgetAsync(V1beta1PodDisruptionBudget body, String name, String namespace);

    /**
     * replace the specified PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudget>> replaceNamespacedPodDisruptionBudgetWithServiceResponseAsync(V1beta1PodDisruptionBudget body, String name, String namespace);
    /**
     * replace the specified PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudget object if successful.
     */
    V1beta1PodDisruptionBudget replaceNamespacedPodDisruptionBudget(V1beta1PodDisruptionBudget body, String name, String namespace, String pretty);

    /**
     * replace the specified PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudget> replaceNamespacedPodDisruptionBudgetAsync(V1beta1PodDisruptionBudget body, String name, String namespace, String pretty, final ServiceCallback<V1beta1PodDisruptionBudget> serviceCallback);

    /**
     * replace the specified PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<V1beta1PodDisruptionBudget> replaceNamespacedPodDisruptionBudgetAsync(V1beta1PodDisruptionBudget body, String name, String namespace, String pretty);

    /**
     * replace the specified PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudget>> replaceNamespacedPodDisruptionBudgetWithServiceResponseAsync(V1beta1PodDisruptionBudget body, String name, String namespace, String pretty);

    /**
     * delete a PodDisruptionBudget.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedPodDisruptionBudget(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a PodDisruptionBudget.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedPodDisruptionBudgetAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a PodDisruptionBudget.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedPodDisruptionBudgetAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a PodDisruptionBudget.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedPodDisruptionBudgetWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a PodDisruptionBudget.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedPodDisruptionBudget(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a PodDisruptionBudget.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedPodDisruptionBudgetAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a PodDisruptionBudget.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedPodDisruptionBudgetAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a PodDisruptionBudget.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedPodDisruptionBudgetWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified PodDisruptionBudget.
     *
     * @param body the Object value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudget object if successful.
     */
    V1beta1PodDisruptionBudget patchNamespacedPodDisruptionBudget(Object body, String name, String namespace);

    /**
     * partially update the specified PodDisruptionBudget.
     *
     * @param body the Object value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudget> patchNamespacedPodDisruptionBudgetAsync(Object body, String name, String namespace, final ServiceCallback<V1beta1PodDisruptionBudget> serviceCallback);

    /**
     * partially update the specified PodDisruptionBudget.
     *
     * @param body the Object value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<V1beta1PodDisruptionBudget> patchNamespacedPodDisruptionBudgetAsync(Object body, String name, String namespace);

    /**
     * partially update the specified PodDisruptionBudget.
     *
     * @param body the Object value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudget>> patchNamespacedPodDisruptionBudgetWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified PodDisruptionBudget.
     *
     * @param body the Object value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudget object if successful.
     */
    V1beta1PodDisruptionBudget patchNamespacedPodDisruptionBudget(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified PodDisruptionBudget.
     *
     * @param body the Object value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudget> patchNamespacedPodDisruptionBudgetAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1beta1PodDisruptionBudget> serviceCallback);

    /**
     * partially update the specified PodDisruptionBudget.
     *
     * @param body the Object value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<V1beta1PodDisruptionBudget> patchNamespacedPodDisruptionBudgetAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified PodDisruptionBudget.
     *
     * @param body the Object value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudget>> patchNamespacedPodDisruptionBudgetWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * read status of the specified PodDisruptionBudget.
     *
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudget object if successful.
     */
    V1beta1PodDisruptionBudget readNamespacedPodDisruptionBudgetStatus(String name, String namespace);

    /**
     * read status of the specified PodDisruptionBudget.
     *
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudget> readNamespacedPodDisruptionBudgetStatusAsync(String name, String namespace, final ServiceCallback<V1beta1PodDisruptionBudget> serviceCallback);

    /**
     * read status of the specified PodDisruptionBudget.
     *
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<V1beta1PodDisruptionBudget> readNamespacedPodDisruptionBudgetStatusAsync(String name, String namespace);

    /**
     * read status of the specified PodDisruptionBudget.
     *
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudget>> readNamespacedPodDisruptionBudgetStatusWithServiceResponseAsync(String name, String namespace);
    /**
     * read status of the specified PodDisruptionBudget.
     *
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudget object if successful.
     */
    V1beta1PodDisruptionBudget readNamespacedPodDisruptionBudgetStatus(String name, String namespace, String pretty);

    /**
     * read status of the specified PodDisruptionBudget.
     *
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudget> readNamespacedPodDisruptionBudgetStatusAsync(String name, String namespace, String pretty, final ServiceCallback<V1beta1PodDisruptionBudget> serviceCallback);

    /**
     * read status of the specified PodDisruptionBudget.
     *
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<V1beta1PodDisruptionBudget> readNamespacedPodDisruptionBudgetStatusAsync(String name, String namespace, String pretty);

    /**
     * read status of the specified PodDisruptionBudget.
     *
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudget>> readNamespacedPodDisruptionBudgetStatusWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace status of the specified PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudget object if successful.
     */
    V1beta1PodDisruptionBudget replaceNamespacedPodDisruptionBudgetStatus(V1beta1PodDisruptionBudget body, String name, String namespace);

    /**
     * replace status of the specified PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudget> replaceNamespacedPodDisruptionBudgetStatusAsync(V1beta1PodDisruptionBudget body, String name, String namespace, final ServiceCallback<V1beta1PodDisruptionBudget> serviceCallback);

    /**
     * replace status of the specified PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<V1beta1PodDisruptionBudget> replaceNamespacedPodDisruptionBudgetStatusAsync(V1beta1PodDisruptionBudget body, String name, String namespace);

    /**
     * replace status of the specified PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudget>> replaceNamespacedPodDisruptionBudgetStatusWithServiceResponseAsync(V1beta1PodDisruptionBudget body, String name, String namespace);
    /**
     * replace status of the specified PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudget object if successful.
     */
    V1beta1PodDisruptionBudget replaceNamespacedPodDisruptionBudgetStatus(V1beta1PodDisruptionBudget body, String name, String namespace, String pretty);

    /**
     * replace status of the specified PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudget> replaceNamespacedPodDisruptionBudgetStatusAsync(V1beta1PodDisruptionBudget body, String name, String namespace, String pretty, final ServiceCallback<V1beta1PodDisruptionBudget> serviceCallback);

    /**
     * replace status of the specified PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<V1beta1PodDisruptionBudget> replaceNamespacedPodDisruptionBudgetStatusAsync(V1beta1PodDisruptionBudget body, String name, String namespace, String pretty);

    /**
     * replace status of the specified PodDisruptionBudget.
     *
     * @param body the V1beta1PodDisruptionBudget value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudget>> replaceNamespacedPodDisruptionBudgetStatusWithServiceResponseAsync(V1beta1PodDisruptionBudget body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified PodDisruptionBudget.
     *
     * @param body the Object value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudget object if successful.
     */
    V1beta1PodDisruptionBudget patchNamespacedPodDisruptionBudgetStatus(Object body, String name, String namespace);

    /**
     * partially update status of the specified PodDisruptionBudget.
     *
     * @param body the Object value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudget> patchNamespacedPodDisruptionBudgetStatusAsync(Object body, String name, String namespace, final ServiceCallback<V1beta1PodDisruptionBudget> serviceCallback);

    /**
     * partially update status of the specified PodDisruptionBudget.
     *
     * @param body the Object value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<V1beta1PodDisruptionBudget> patchNamespacedPodDisruptionBudgetStatusAsync(Object body, String name, String namespace);

    /**
     * partially update status of the specified PodDisruptionBudget.
     *
     * @param body the Object value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudget>> patchNamespacedPodDisruptionBudgetStatusWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update status of the specified PodDisruptionBudget.
     *
     * @param body the Object value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudget object if successful.
     */
    V1beta1PodDisruptionBudget patchNamespacedPodDisruptionBudgetStatus(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified PodDisruptionBudget.
     *
     * @param body the Object value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudget> patchNamespacedPodDisruptionBudgetStatusAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1beta1PodDisruptionBudget> serviceCallback);

    /**
     * partially update status of the specified PodDisruptionBudget.
     *
     * @param body the Object value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<V1beta1PodDisruptionBudget> patchNamespacedPodDisruptionBudgetStatusAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update status of the specified PodDisruptionBudget.
     *
     * @param body the Object value
     * @param name name of the PodDisruptionBudget
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudget object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudget>> patchNamespacedPodDisruptionBudgetStatusWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind PodDisruptionBudget.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudgetList object if successful.
     */
    V1beta1PodDisruptionBudgetList listPodDisruptionBudgetForAllNamespaces();

    /**
     * list or watch objects of kind PodDisruptionBudget.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudgetList> listPodDisruptionBudgetForAllNamespacesAsync(final ServiceCallback<V1beta1PodDisruptionBudgetList> serviceCallback);

    /**
     * list or watch objects of kind PodDisruptionBudget.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudgetList object
     */
    Observable<V1beta1PodDisruptionBudgetList> listPodDisruptionBudgetForAllNamespacesAsync();

    /**
     * list or watch objects of kind PodDisruptionBudget.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudgetList object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudgetList>> listPodDisruptionBudgetForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind PodDisruptionBudget.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1PodDisruptionBudgetList object if successful.
     */
    V1beta1PodDisruptionBudgetList listPodDisruptionBudgetForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind PodDisruptionBudget.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1PodDisruptionBudgetList> listPodDisruptionBudgetForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1beta1PodDisruptionBudgetList> serviceCallback);

    /**
     * list or watch objects of kind PodDisruptionBudget.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudgetList object
     */
    Observable<V1beta1PodDisruptionBudgetList> listPodDisruptionBudgetForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind PodDisruptionBudget.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1PodDisruptionBudgetList object
     */
    Observable<ServiceResponse<V1beta1PodDisruptionBudgetList>> listPodDisruptionBudgetForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIGroup object if successful.
     */
    V1APIGroup getAPIGroup8();

    /**
     * get information of a group.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIGroup> getAPIGroup8Async(final ServiceCallback<V1APIGroup> serviceCallback);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<V1APIGroup> getAPIGroup8Async();

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<ServiceResponse<V1APIGroup>> getAPIGroup8WithServiceResponseAsync();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources13();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources13Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources13Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources13WithServiceResponseAsync();

    /**
     * list or watch objects of kind ClusterRoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRoleBindingList object if successful.
     */
    V1alpha1ClusterRoleBindingList listClusterRoleBinding();

    /**
     * list or watch objects of kind ClusterRoleBinding.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRoleBindingList> listClusterRoleBindingAsync(final ServiceCallback<V1alpha1ClusterRoleBindingList> serviceCallback);

    /**
     * list or watch objects of kind ClusterRoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBindingList object
     */
    Observable<V1alpha1ClusterRoleBindingList> listClusterRoleBindingAsync();

    /**
     * list or watch objects of kind ClusterRoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBindingList object
     */
    Observable<ServiceResponse<V1alpha1ClusterRoleBindingList>> listClusterRoleBindingWithServiceResponseAsync();
    /**
     * list or watch objects of kind ClusterRoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRoleBindingList object if successful.
     */
    V1alpha1ClusterRoleBindingList listClusterRoleBinding(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ClusterRoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRoleBindingList> listClusterRoleBindingAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1alpha1ClusterRoleBindingList> serviceCallback);

    /**
     * list or watch objects of kind ClusterRoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBindingList object
     */
    Observable<V1alpha1ClusterRoleBindingList> listClusterRoleBindingAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ClusterRoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBindingList object
     */
    Observable<ServiceResponse<V1alpha1ClusterRoleBindingList>> listClusterRoleBindingWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a ClusterRoleBinding.
     *
     * @param body the V1alpha1ClusterRoleBinding value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRoleBinding object if successful.
     */
    V1alpha1ClusterRoleBinding createClusterRoleBinding(V1alpha1ClusterRoleBinding body);

    /**
     * create a ClusterRoleBinding.
     *
     * @param body the V1alpha1ClusterRoleBinding value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRoleBinding> createClusterRoleBindingAsync(V1alpha1ClusterRoleBinding body, final ServiceCallback<V1alpha1ClusterRoleBinding> serviceCallback);

    /**
     * create a ClusterRoleBinding.
     *
     * @param body the V1alpha1ClusterRoleBinding value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBinding object
     */
    Observable<V1alpha1ClusterRoleBinding> createClusterRoleBindingAsync(V1alpha1ClusterRoleBinding body);

    /**
     * create a ClusterRoleBinding.
     *
     * @param body the V1alpha1ClusterRoleBinding value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBinding object
     */
    Observable<ServiceResponse<V1alpha1ClusterRoleBinding>> createClusterRoleBindingWithServiceResponseAsync(V1alpha1ClusterRoleBinding body);
    /**
     * create a ClusterRoleBinding.
     *
     * @param body the V1alpha1ClusterRoleBinding value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRoleBinding object if successful.
     */
    V1alpha1ClusterRoleBinding createClusterRoleBinding(V1alpha1ClusterRoleBinding body, String pretty);

    /**
     * create a ClusterRoleBinding.
     *
     * @param body the V1alpha1ClusterRoleBinding value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRoleBinding> createClusterRoleBindingAsync(V1alpha1ClusterRoleBinding body, String pretty, final ServiceCallback<V1alpha1ClusterRoleBinding> serviceCallback);

    /**
     * create a ClusterRoleBinding.
     *
     * @param body the V1alpha1ClusterRoleBinding value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBinding object
     */
    Observable<V1alpha1ClusterRoleBinding> createClusterRoleBindingAsync(V1alpha1ClusterRoleBinding body, String pretty);

    /**
     * create a ClusterRoleBinding.
     *
     * @param body the V1alpha1ClusterRoleBinding value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBinding object
     */
    Observable<ServiceResponse<V1alpha1ClusterRoleBinding>> createClusterRoleBindingWithServiceResponseAsync(V1alpha1ClusterRoleBinding body, String pretty);

    /**
     * delete collection of ClusterRoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionClusterRoleBinding();

    /**
     * delete collection of ClusterRoleBinding.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionClusterRoleBindingAsync(final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ClusterRoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionClusterRoleBindingAsync();

    /**
     * delete collection of ClusterRoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionClusterRoleBindingWithServiceResponseAsync();
    /**
     * delete collection of ClusterRoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionClusterRoleBinding(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ClusterRoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionClusterRoleBindingAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ClusterRoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionClusterRoleBindingAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ClusterRoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionClusterRoleBindingWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified ClusterRoleBinding.
     *
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRoleBinding object if successful.
     */
    V1alpha1ClusterRoleBinding readClusterRoleBinding(String name);

    /**
     * read the specified ClusterRoleBinding.
     *
     * @param name name of the ClusterRoleBinding
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRoleBinding> readClusterRoleBindingAsync(String name, final ServiceCallback<V1alpha1ClusterRoleBinding> serviceCallback);

    /**
     * read the specified ClusterRoleBinding.
     *
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBinding object
     */
    Observable<V1alpha1ClusterRoleBinding> readClusterRoleBindingAsync(String name);

    /**
     * read the specified ClusterRoleBinding.
     *
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBinding object
     */
    Observable<ServiceResponse<V1alpha1ClusterRoleBinding>> readClusterRoleBindingWithServiceResponseAsync(String name);
    /**
     * read the specified ClusterRoleBinding.
     *
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRoleBinding object if successful.
     */
    V1alpha1ClusterRoleBinding readClusterRoleBinding(String name, String pretty);

    /**
     * read the specified ClusterRoleBinding.
     *
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRoleBinding> readClusterRoleBindingAsync(String name, String pretty, final ServiceCallback<V1alpha1ClusterRoleBinding> serviceCallback);

    /**
     * read the specified ClusterRoleBinding.
     *
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBinding object
     */
    Observable<V1alpha1ClusterRoleBinding> readClusterRoleBindingAsync(String name, String pretty);

    /**
     * read the specified ClusterRoleBinding.
     *
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBinding object
     */
    Observable<ServiceResponse<V1alpha1ClusterRoleBinding>> readClusterRoleBindingWithServiceResponseAsync(String name, String pretty);

    /**
     * replace the specified ClusterRoleBinding.
     *
     * @param body the V1alpha1ClusterRoleBinding value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRoleBinding object if successful.
     */
    V1alpha1ClusterRoleBinding replaceClusterRoleBinding(V1alpha1ClusterRoleBinding body, String name);

    /**
     * replace the specified ClusterRoleBinding.
     *
     * @param body the V1alpha1ClusterRoleBinding value
     * @param name name of the ClusterRoleBinding
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRoleBinding> replaceClusterRoleBindingAsync(V1alpha1ClusterRoleBinding body, String name, final ServiceCallback<V1alpha1ClusterRoleBinding> serviceCallback);

    /**
     * replace the specified ClusterRoleBinding.
     *
     * @param body the V1alpha1ClusterRoleBinding value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBinding object
     */
    Observable<V1alpha1ClusterRoleBinding> replaceClusterRoleBindingAsync(V1alpha1ClusterRoleBinding body, String name);

    /**
     * replace the specified ClusterRoleBinding.
     *
     * @param body the V1alpha1ClusterRoleBinding value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBinding object
     */
    Observable<ServiceResponse<V1alpha1ClusterRoleBinding>> replaceClusterRoleBindingWithServiceResponseAsync(V1alpha1ClusterRoleBinding body, String name);
    /**
     * replace the specified ClusterRoleBinding.
     *
     * @param body the V1alpha1ClusterRoleBinding value
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRoleBinding object if successful.
     */
    V1alpha1ClusterRoleBinding replaceClusterRoleBinding(V1alpha1ClusterRoleBinding body, String name, String pretty);

    /**
     * replace the specified ClusterRoleBinding.
     *
     * @param body the V1alpha1ClusterRoleBinding value
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRoleBinding> replaceClusterRoleBindingAsync(V1alpha1ClusterRoleBinding body, String name, String pretty, final ServiceCallback<V1alpha1ClusterRoleBinding> serviceCallback);

    /**
     * replace the specified ClusterRoleBinding.
     *
     * @param body the V1alpha1ClusterRoleBinding value
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBinding object
     */
    Observable<V1alpha1ClusterRoleBinding> replaceClusterRoleBindingAsync(V1alpha1ClusterRoleBinding body, String name, String pretty);

    /**
     * replace the specified ClusterRoleBinding.
     *
     * @param body the V1alpha1ClusterRoleBinding value
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBinding object
     */
    Observable<ServiceResponse<V1alpha1ClusterRoleBinding>> replaceClusterRoleBindingWithServiceResponseAsync(V1alpha1ClusterRoleBinding body, String name, String pretty);

    /**
     * delete a ClusterRoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteClusterRoleBinding(V1DeleteOptions body, String name);

    /**
     * delete a ClusterRoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRoleBinding
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteClusterRoleBindingAsync(V1DeleteOptions body, String name, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ClusterRoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteClusterRoleBindingAsync(V1DeleteOptions body, String name);

    /**
     * delete a ClusterRoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteClusterRoleBindingWithServiceResponseAsync(V1DeleteOptions body, String name);
    /**
     * delete a ClusterRoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRoleBinding
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteClusterRoleBinding(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ClusterRoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRoleBinding
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteClusterRoleBindingAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ClusterRoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRoleBinding
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteClusterRoleBindingAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ClusterRoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRoleBinding
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteClusterRoleBindingWithServiceResponseAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified ClusterRoleBinding.
     *
     * @param body the Object value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRoleBinding object if successful.
     */
    V1alpha1ClusterRoleBinding patchClusterRoleBinding(Object body, String name);

    /**
     * partially update the specified ClusterRoleBinding.
     *
     * @param body the Object value
     * @param name name of the ClusterRoleBinding
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRoleBinding> patchClusterRoleBindingAsync(Object body, String name, final ServiceCallback<V1alpha1ClusterRoleBinding> serviceCallback);

    /**
     * partially update the specified ClusterRoleBinding.
     *
     * @param body the Object value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBinding object
     */
    Observable<V1alpha1ClusterRoleBinding> patchClusterRoleBindingAsync(Object body, String name);

    /**
     * partially update the specified ClusterRoleBinding.
     *
     * @param body the Object value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBinding object
     */
    Observable<ServiceResponse<V1alpha1ClusterRoleBinding>> patchClusterRoleBindingWithServiceResponseAsync(Object body, String name);
    /**
     * partially update the specified ClusterRoleBinding.
     *
     * @param body the Object value
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRoleBinding object if successful.
     */
    V1alpha1ClusterRoleBinding patchClusterRoleBinding(Object body, String name, String pretty);

    /**
     * partially update the specified ClusterRoleBinding.
     *
     * @param body the Object value
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRoleBinding> patchClusterRoleBindingAsync(Object body, String name, String pretty, final ServiceCallback<V1alpha1ClusterRoleBinding> serviceCallback);

    /**
     * partially update the specified ClusterRoleBinding.
     *
     * @param body the Object value
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBinding object
     */
    Observable<V1alpha1ClusterRoleBinding> patchClusterRoleBindingAsync(Object body, String name, String pretty);

    /**
     * partially update the specified ClusterRoleBinding.
     *
     * @param body the Object value
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleBinding object
     */
    Observable<ServiceResponse<V1alpha1ClusterRoleBinding>> patchClusterRoleBindingWithServiceResponseAsync(Object body, String name, String pretty);

    /**
     * list or watch objects of kind ClusterRole.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRoleList object if successful.
     */
    V1alpha1ClusterRoleList listClusterRole();

    /**
     * list or watch objects of kind ClusterRole.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRoleList> listClusterRoleAsync(final ServiceCallback<V1alpha1ClusterRoleList> serviceCallback);

    /**
     * list or watch objects of kind ClusterRole.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleList object
     */
    Observable<V1alpha1ClusterRoleList> listClusterRoleAsync();

    /**
     * list or watch objects of kind ClusterRole.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleList object
     */
    Observable<ServiceResponse<V1alpha1ClusterRoleList>> listClusterRoleWithServiceResponseAsync();
    /**
     * list or watch objects of kind ClusterRole.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRoleList object if successful.
     */
    V1alpha1ClusterRoleList listClusterRole(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ClusterRole.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRoleList> listClusterRoleAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1alpha1ClusterRoleList> serviceCallback);

    /**
     * list or watch objects of kind ClusterRole.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleList object
     */
    Observable<V1alpha1ClusterRoleList> listClusterRoleAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ClusterRole.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRoleList object
     */
    Observable<ServiceResponse<V1alpha1ClusterRoleList>> listClusterRoleWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a ClusterRole.
     *
     * @param body the V1alpha1ClusterRole value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRole object if successful.
     */
    V1alpha1ClusterRole createClusterRole(V1alpha1ClusterRole body);

    /**
     * create a ClusterRole.
     *
     * @param body the V1alpha1ClusterRole value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRole> createClusterRoleAsync(V1alpha1ClusterRole body, final ServiceCallback<V1alpha1ClusterRole> serviceCallback);

    /**
     * create a ClusterRole.
     *
     * @param body the V1alpha1ClusterRole value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRole object
     */
    Observable<V1alpha1ClusterRole> createClusterRoleAsync(V1alpha1ClusterRole body);

    /**
     * create a ClusterRole.
     *
     * @param body the V1alpha1ClusterRole value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRole object
     */
    Observable<ServiceResponse<V1alpha1ClusterRole>> createClusterRoleWithServiceResponseAsync(V1alpha1ClusterRole body);
    /**
     * create a ClusterRole.
     *
     * @param body the V1alpha1ClusterRole value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRole object if successful.
     */
    V1alpha1ClusterRole createClusterRole(V1alpha1ClusterRole body, String pretty);

    /**
     * create a ClusterRole.
     *
     * @param body the V1alpha1ClusterRole value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRole> createClusterRoleAsync(V1alpha1ClusterRole body, String pretty, final ServiceCallback<V1alpha1ClusterRole> serviceCallback);

    /**
     * create a ClusterRole.
     *
     * @param body the V1alpha1ClusterRole value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRole object
     */
    Observable<V1alpha1ClusterRole> createClusterRoleAsync(V1alpha1ClusterRole body, String pretty);

    /**
     * create a ClusterRole.
     *
     * @param body the V1alpha1ClusterRole value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRole object
     */
    Observable<ServiceResponse<V1alpha1ClusterRole>> createClusterRoleWithServiceResponseAsync(V1alpha1ClusterRole body, String pretty);

    /**
     * delete collection of ClusterRole.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionClusterRole();

    /**
     * delete collection of ClusterRole.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionClusterRoleAsync(final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ClusterRole.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionClusterRoleAsync();

    /**
     * delete collection of ClusterRole.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionClusterRoleWithServiceResponseAsync();
    /**
     * delete collection of ClusterRole.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionClusterRole(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ClusterRole.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionClusterRoleAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ClusterRole.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionClusterRoleAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ClusterRole.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionClusterRoleWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified ClusterRole.
     *
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRole object if successful.
     */
    V1alpha1ClusterRole readClusterRole(String name);

    /**
     * read the specified ClusterRole.
     *
     * @param name name of the ClusterRole
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRole> readClusterRoleAsync(String name, final ServiceCallback<V1alpha1ClusterRole> serviceCallback);

    /**
     * read the specified ClusterRole.
     *
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRole object
     */
    Observable<V1alpha1ClusterRole> readClusterRoleAsync(String name);

    /**
     * read the specified ClusterRole.
     *
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRole object
     */
    Observable<ServiceResponse<V1alpha1ClusterRole>> readClusterRoleWithServiceResponseAsync(String name);
    /**
     * read the specified ClusterRole.
     *
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRole object if successful.
     */
    V1alpha1ClusterRole readClusterRole(String name, String pretty);

    /**
     * read the specified ClusterRole.
     *
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRole> readClusterRoleAsync(String name, String pretty, final ServiceCallback<V1alpha1ClusterRole> serviceCallback);

    /**
     * read the specified ClusterRole.
     *
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRole object
     */
    Observable<V1alpha1ClusterRole> readClusterRoleAsync(String name, String pretty);

    /**
     * read the specified ClusterRole.
     *
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRole object
     */
    Observable<ServiceResponse<V1alpha1ClusterRole>> readClusterRoleWithServiceResponseAsync(String name, String pretty);

    /**
     * replace the specified ClusterRole.
     *
     * @param body the V1alpha1ClusterRole value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRole object if successful.
     */
    V1alpha1ClusterRole replaceClusterRole(V1alpha1ClusterRole body, String name);

    /**
     * replace the specified ClusterRole.
     *
     * @param body the V1alpha1ClusterRole value
     * @param name name of the ClusterRole
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRole> replaceClusterRoleAsync(V1alpha1ClusterRole body, String name, final ServiceCallback<V1alpha1ClusterRole> serviceCallback);

    /**
     * replace the specified ClusterRole.
     *
     * @param body the V1alpha1ClusterRole value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRole object
     */
    Observable<V1alpha1ClusterRole> replaceClusterRoleAsync(V1alpha1ClusterRole body, String name);

    /**
     * replace the specified ClusterRole.
     *
     * @param body the V1alpha1ClusterRole value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRole object
     */
    Observable<ServiceResponse<V1alpha1ClusterRole>> replaceClusterRoleWithServiceResponseAsync(V1alpha1ClusterRole body, String name);
    /**
     * replace the specified ClusterRole.
     *
     * @param body the V1alpha1ClusterRole value
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRole object if successful.
     */
    V1alpha1ClusterRole replaceClusterRole(V1alpha1ClusterRole body, String name, String pretty);

    /**
     * replace the specified ClusterRole.
     *
     * @param body the V1alpha1ClusterRole value
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRole> replaceClusterRoleAsync(V1alpha1ClusterRole body, String name, String pretty, final ServiceCallback<V1alpha1ClusterRole> serviceCallback);

    /**
     * replace the specified ClusterRole.
     *
     * @param body the V1alpha1ClusterRole value
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRole object
     */
    Observable<V1alpha1ClusterRole> replaceClusterRoleAsync(V1alpha1ClusterRole body, String name, String pretty);

    /**
     * replace the specified ClusterRole.
     *
     * @param body the V1alpha1ClusterRole value
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRole object
     */
    Observable<ServiceResponse<V1alpha1ClusterRole>> replaceClusterRoleWithServiceResponseAsync(V1alpha1ClusterRole body, String name, String pretty);

    /**
     * delete a ClusterRole.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteClusterRole(V1DeleteOptions body, String name);

    /**
     * delete a ClusterRole.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRole
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteClusterRoleAsync(V1DeleteOptions body, String name, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ClusterRole.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteClusterRoleAsync(V1DeleteOptions body, String name);

    /**
     * delete a ClusterRole.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteClusterRoleWithServiceResponseAsync(V1DeleteOptions body, String name);
    /**
     * delete a ClusterRole.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRole
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteClusterRole(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ClusterRole.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRole
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteClusterRoleAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ClusterRole.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRole
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteClusterRoleAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ClusterRole.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRole
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteClusterRoleWithServiceResponseAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified ClusterRole.
     *
     * @param body the Object value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRole object if successful.
     */
    V1alpha1ClusterRole patchClusterRole(Object body, String name);

    /**
     * partially update the specified ClusterRole.
     *
     * @param body the Object value
     * @param name name of the ClusterRole
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRole> patchClusterRoleAsync(Object body, String name, final ServiceCallback<V1alpha1ClusterRole> serviceCallback);

    /**
     * partially update the specified ClusterRole.
     *
     * @param body the Object value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRole object
     */
    Observable<V1alpha1ClusterRole> patchClusterRoleAsync(Object body, String name);

    /**
     * partially update the specified ClusterRole.
     *
     * @param body the Object value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRole object
     */
    Observable<ServiceResponse<V1alpha1ClusterRole>> patchClusterRoleWithServiceResponseAsync(Object body, String name);
    /**
     * partially update the specified ClusterRole.
     *
     * @param body the Object value
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1ClusterRole object if successful.
     */
    V1alpha1ClusterRole patchClusterRole(Object body, String name, String pretty);

    /**
     * partially update the specified ClusterRole.
     *
     * @param body the Object value
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1ClusterRole> patchClusterRoleAsync(Object body, String name, String pretty, final ServiceCallback<V1alpha1ClusterRole> serviceCallback);

    /**
     * partially update the specified ClusterRole.
     *
     * @param body the Object value
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRole object
     */
    Observable<V1alpha1ClusterRole> patchClusterRoleAsync(Object body, String name, String pretty);

    /**
     * partially update the specified ClusterRole.
     *
     * @param body the Object value
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1ClusterRole object
     */
    Observable<ServiceResponse<V1alpha1ClusterRole>> patchClusterRoleWithServiceResponseAsync(Object body, String name, String pretty);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1RoleBindingList object if successful.
     */
    V1alpha1RoleBindingList listNamespacedRoleBinding(String namespace);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1RoleBindingList> listNamespacedRoleBindingAsync(String namespace, final ServiceCallback<V1alpha1RoleBindingList> serviceCallback);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBindingList object
     */
    Observable<V1alpha1RoleBindingList> listNamespacedRoleBindingAsync(String namespace);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBindingList object
     */
    Observable<ServiceResponse<V1alpha1RoleBindingList>> listNamespacedRoleBindingWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1RoleBindingList object if successful.
     */
    V1alpha1RoleBindingList listNamespacedRoleBinding(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1RoleBindingList> listNamespacedRoleBindingAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1alpha1RoleBindingList> serviceCallback);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBindingList object
     */
    Observable<V1alpha1RoleBindingList> listNamespacedRoleBindingAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBindingList object
     */
    Observable<ServiceResponse<V1alpha1RoleBindingList>> listNamespacedRoleBindingWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a RoleBinding.
     *
     * @param body the V1alpha1RoleBinding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1RoleBinding object if successful.
     */
    V1alpha1RoleBinding createNamespacedRoleBinding(V1alpha1RoleBinding body, String namespace);

    /**
     * create a RoleBinding.
     *
     * @param body the V1alpha1RoleBinding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1RoleBinding> createNamespacedRoleBindingAsync(V1alpha1RoleBinding body, String namespace, final ServiceCallback<V1alpha1RoleBinding> serviceCallback);

    /**
     * create a RoleBinding.
     *
     * @param body the V1alpha1RoleBinding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBinding object
     */
    Observable<V1alpha1RoleBinding> createNamespacedRoleBindingAsync(V1alpha1RoleBinding body, String namespace);

    /**
     * create a RoleBinding.
     *
     * @param body the V1alpha1RoleBinding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBinding object
     */
    Observable<ServiceResponse<V1alpha1RoleBinding>> createNamespacedRoleBindingWithServiceResponseAsync(V1alpha1RoleBinding body, String namespace);
    /**
     * create a RoleBinding.
     *
     * @param body the V1alpha1RoleBinding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1RoleBinding object if successful.
     */
    V1alpha1RoleBinding createNamespacedRoleBinding(V1alpha1RoleBinding body, String namespace, String pretty);

    /**
     * create a RoleBinding.
     *
     * @param body the V1alpha1RoleBinding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1RoleBinding> createNamespacedRoleBindingAsync(V1alpha1RoleBinding body, String namespace, String pretty, final ServiceCallback<V1alpha1RoleBinding> serviceCallback);

    /**
     * create a RoleBinding.
     *
     * @param body the V1alpha1RoleBinding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBinding object
     */
    Observable<V1alpha1RoleBinding> createNamespacedRoleBindingAsync(V1alpha1RoleBinding body, String namespace, String pretty);

    /**
     * create a RoleBinding.
     *
     * @param body the V1alpha1RoleBinding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBinding object
     */
    Observable<ServiceResponse<V1alpha1RoleBinding>> createNamespacedRoleBindingWithServiceResponseAsync(V1alpha1RoleBinding body, String namespace, String pretty);

    /**
     * delete collection of RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedRoleBinding(String namespace);

    /**
     * delete collection of RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedRoleBindingAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedRoleBindingAsync(String namespace);

    /**
     * delete collection of RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedRoleBindingWithServiceResponseAsync(String namespace);
    /**
     * delete collection of RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedRoleBinding(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedRoleBindingAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedRoleBindingAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedRoleBindingWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified RoleBinding.
     *
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1RoleBinding object if successful.
     */
    V1alpha1RoleBinding readNamespacedRoleBinding(String name, String namespace);

    /**
     * read the specified RoleBinding.
     *
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1RoleBinding> readNamespacedRoleBindingAsync(String name, String namespace, final ServiceCallback<V1alpha1RoleBinding> serviceCallback);

    /**
     * read the specified RoleBinding.
     *
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBinding object
     */
    Observable<V1alpha1RoleBinding> readNamespacedRoleBindingAsync(String name, String namespace);

    /**
     * read the specified RoleBinding.
     *
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBinding object
     */
    Observable<ServiceResponse<V1alpha1RoleBinding>> readNamespacedRoleBindingWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified RoleBinding.
     *
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1RoleBinding object if successful.
     */
    V1alpha1RoleBinding readNamespacedRoleBinding(String name, String namespace, String pretty);

    /**
     * read the specified RoleBinding.
     *
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1RoleBinding> readNamespacedRoleBindingAsync(String name, String namespace, String pretty, final ServiceCallback<V1alpha1RoleBinding> serviceCallback);

    /**
     * read the specified RoleBinding.
     *
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBinding object
     */
    Observable<V1alpha1RoleBinding> readNamespacedRoleBindingAsync(String name, String namespace, String pretty);

    /**
     * read the specified RoleBinding.
     *
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBinding object
     */
    Observable<ServiceResponse<V1alpha1RoleBinding>> readNamespacedRoleBindingWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace the specified RoleBinding.
     *
     * @param body the V1alpha1RoleBinding value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1RoleBinding object if successful.
     */
    V1alpha1RoleBinding replaceNamespacedRoleBinding(V1alpha1RoleBinding body, String name, String namespace);

    /**
     * replace the specified RoleBinding.
     *
     * @param body the V1alpha1RoleBinding value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1RoleBinding> replaceNamespacedRoleBindingAsync(V1alpha1RoleBinding body, String name, String namespace, final ServiceCallback<V1alpha1RoleBinding> serviceCallback);

    /**
     * replace the specified RoleBinding.
     *
     * @param body the V1alpha1RoleBinding value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBinding object
     */
    Observable<V1alpha1RoleBinding> replaceNamespacedRoleBindingAsync(V1alpha1RoleBinding body, String name, String namespace);

    /**
     * replace the specified RoleBinding.
     *
     * @param body the V1alpha1RoleBinding value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBinding object
     */
    Observable<ServiceResponse<V1alpha1RoleBinding>> replaceNamespacedRoleBindingWithServiceResponseAsync(V1alpha1RoleBinding body, String name, String namespace);
    /**
     * replace the specified RoleBinding.
     *
     * @param body the V1alpha1RoleBinding value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1RoleBinding object if successful.
     */
    V1alpha1RoleBinding replaceNamespacedRoleBinding(V1alpha1RoleBinding body, String name, String namespace, String pretty);

    /**
     * replace the specified RoleBinding.
     *
     * @param body the V1alpha1RoleBinding value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1RoleBinding> replaceNamespacedRoleBindingAsync(V1alpha1RoleBinding body, String name, String namespace, String pretty, final ServiceCallback<V1alpha1RoleBinding> serviceCallback);

    /**
     * replace the specified RoleBinding.
     *
     * @param body the V1alpha1RoleBinding value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBinding object
     */
    Observable<V1alpha1RoleBinding> replaceNamespacedRoleBindingAsync(V1alpha1RoleBinding body, String name, String namespace, String pretty);

    /**
     * replace the specified RoleBinding.
     *
     * @param body the V1alpha1RoleBinding value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBinding object
     */
    Observable<ServiceResponse<V1alpha1RoleBinding>> replaceNamespacedRoleBindingWithServiceResponseAsync(V1alpha1RoleBinding body, String name, String namespace, String pretty);

    /**
     * delete a RoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedRoleBinding(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a RoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedRoleBindingAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a RoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedRoleBindingAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a RoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedRoleBindingWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a RoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedRoleBinding(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a RoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedRoleBindingAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a RoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedRoleBindingAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a RoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedRoleBindingWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified RoleBinding.
     *
     * @param body the Object value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1RoleBinding object if successful.
     */
    V1alpha1RoleBinding patchNamespacedRoleBinding(Object body, String name, String namespace);

    /**
     * partially update the specified RoleBinding.
     *
     * @param body the Object value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1RoleBinding> patchNamespacedRoleBindingAsync(Object body, String name, String namespace, final ServiceCallback<V1alpha1RoleBinding> serviceCallback);

    /**
     * partially update the specified RoleBinding.
     *
     * @param body the Object value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBinding object
     */
    Observable<V1alpha1RoleBinding> patchNamespacedRoleBindingAsync(Object body, String name, String namespace);

    /**
     * partially update the specified RoleBinding.
     *
     * @param body the Object value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBinding object
     */
    Observable<ServiceResponse<V1alpha1RoleBinding>> patchNamespacedRoleBindingWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified RoleBinding.
     *
     * @param body the Object value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1RoleBinding object if successful.
     */
    V1alpha1RoleBinding patchNamespacedRoleBinding(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified RoleBinding.
     *
     * @param body the Object value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1RoleBinding> patchNamespacedRoleBindingAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1alpha1RoleBinding> serviceCallback);

    /**
     * partially update the specified RoleBinding.
     *
     * @param body the Object value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBinding object
     */
    Observable<V1alpha1RoleBinding> patchNamespacedRoleBindingAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified RoleBinding.
     *
     * @param body the Object value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBinding object
     */
    Observable<ServiceResponse<V1alpha1RoleBinding>> patchNamespacedRoleBindingWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1RoleList object if successful.
     */
    V1alpha1RoleList listNamespacedRole(String namespace);

    /**
     * list or watch objects of kind Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1RoleList> listNamespacedRoleAsync(String namespace, final ServiceCallback<V1alpha1RoleList> serviceCallback);

    /**
     * list or watch objects of kind Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleList object
     */
    Observable<V1alpha1RoleList> listNamespacedRoleAsync(String namespace);

    /**
     * list or watch objects of kind Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleList object
     */
    Observable<ServiceResponse<V1alpha1RoleList>> listNamespacedRoleWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1RoleList object if successful.
     */
    V1alpha1RoleList listNamespacedRole(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1RoleList> listNamespacedRoleAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1alpha1RoleList> serviceCallback);

    /**
     * list or watch objects of kind Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleList object
     */
    Observable<V1alpha1RoleList> listNamespacedRoleAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleList object
     */
    Observable<ServiceResponse<V1alpha1RoleList>> listNamespacedRoleWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a Role.
     *
     * @param body the V1alpha1Role value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1Role object if successful.
     */
    V1alpha1Role createNamespacedRole(V1alpha1Role body, String namespace);

    /**
     * create a Role.
     *
     * @param body the V1alpha1Role value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1Role> createNamespacedRoleAsync(V1alpha1Role body, String namespace, final ServiceCallback<V1alpha1Role> serviceCallback);

    /**
     * create a Role.
     *
     * @param body the V1alpha1Role value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1Role object
     */
    Observable<V1alpha1Role> createNamespacedRoleAsync(V1alpha1Role body, String namespace);

    /**
     * create a Role.
     *
     * @param body the V1alpha1Role value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1Role object
     */
    Observable<ServiceResponse<V1alpha1Role>> createNamespacedRoleWithServiceResponseAsync(V1alpha1Role body, String namespace);
    /**
     * create a Role.
     *
     * @param body the V1alpha1Role value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1Role object if successful.
     */
    V1alpha1Role createNamespacedRole(V1alpha1Role body, String namespace, String pretty);

    /**
     * create a Role.
     *
     * @param body the V1alpha1Role value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1Role> createNamespacedRoleAsync(V1alpha1Role body, String namespace, String pretty, final ServiceCallback<V1alpha1Role> serviceCallback);

    /**
     * create a Role.
     *
     * @param body the V1alpha1Role value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1Role object
     */
    Observable<V1alpha1Role> createNamespacedRoleAsync(V1alpha1Role body, String namespace, String pretty);

    /**
     * create a Role.
     *
     * @param body the V1alpha1Role value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1Role object
     */
    Observable<ServiceResponse<V1alpha1Role>> createNamespacedRoleWithServiceResponseAsync(V1alpha1Role body, String namespace, String pretty);

    /**
     * delete collection of Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedRole(String namespace);

    /**
     * delete collection of Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedRoleAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedRoleAsync(String namespace);

    /**
     * delete collection of Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedRoleWithServiceResponseAsync(String namespace);
    /**
     * delete collection of Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedRole(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedRoleAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedRoleAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedRoleWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified Role.
     *
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1Role object if successful.
     */
    V1alpha1Role readNamespacedRole(String name, String namespace);

    /**
     * read the specified Role.
     *
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1Role> readNamespacedRoleAsync(String name, String namespace, final ServiceCallback<V1alpha1Role> serviceCallback);

    /**
     * read the specified Role.
     *
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1Role object
     */
    Observable<V1alpha1Role> readNamespacedRoleAsync(String name, String namespace);

    /**
     * read the specified Role.
     *
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1Role object
     */
    Observable<ServiceResponse<V1alpha1Role>> readNamespacedRoleWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified Role.
     *
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1Role object if successful.
     */
    V1alpha1Role readNamespacedRole(String name, String namespace, String pretty);

    /**
     * read the specified Role.
     *
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1Role> readNamespacedRoleAsync(String name, String namespace, String pretty, final ServiceCallback<V1alpha1Role> serviceCallback);

    /**
     * read the specified Role.
     *
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1Role object
     */
    Observable<V1alpha1Role> readNamespacedRoleAsync(String name, String namespace, String pretty);

    /**
     * read the specified Role.
     *
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1Role object
     */
    Observable<ServiceResponse<V1alpha1Role>> readNamespacedRoleWithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace the specified Role.
     *
     * @param body the V1alpha1Role value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1Role object if successful.
     */
    V1alpha1Role replaceNamespacedRole(V1alpha1Role body, String name, String namespace);

    /**
     * replace the specified Role.
     *
     * @param body the V1alpha1Role value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1Role> replaceNamespacedRoleAsync(V1alpha1Role body, String name, String namespace, final ServiceCallback<V1alpha1Role> serviceCallback);

    /**
     * replace the specified Role.
     *
     * @param body the V1alpha1Role value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1Role object
     */
    Observable<V1alpha1Role> replaceNamespacedRoleAsync(V1alpha1Role body, String name, String namespace);

    /**
     * replace the specified Role.
     *
     * @param body the V1alpha1Role value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1Role object
     */
    Observable<ServiceResponse<V1alpha1Role>> replaceNamespacedRoleWithServiceResponseAsync(V1alpha1Role body, String name, String namespace);
    /**
     * replace the specified Role.
     *
     * @param body the V1alpha1Role value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1Role object if successful.
     */
    V1alpha1Role replaceNamespacedRole(V1alpha1Role body, String name, String namespace, String pretty);

    /**
     * replace the specified Role.
     *
     * @param body the V1alpha1Role value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1Role> replaceNamespacedRoleAsync(V1alpha1Role body, String name, String namespace, String pretty, final ServiceCallback<V1alpha1Role> serviceCallback);

    /**
     * replace the specified Role.
     *
     * @param body the V1alpha1Role value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1Role object
     */
    Observable<V1alpha1Role> replaceNamespacedRoleAsync(V1alpha1Role body, String name, String namespace, String pretty);

    /**
     * replace the specified Role.
     *
     * @param body the V1alpha1Role value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1Role object
     */
    Observable<ServiceResponse<V1alpha1Role>> replaceNamespacedRoleWithServiceResponseAsync(V1alpha1Role body, String name, String namespace, String pretty);

    /**
     * delete a Role.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedRole(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a Role.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedRoleAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Role.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedRoleAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a Role.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedRoleWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a Role.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedRole(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Role.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedRoleAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Role.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedRoleAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Role.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedRoleWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified Role.
     *
     * @param body the Object value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1Role object if successful.
     */
    V1alpha1Role patchNamespacedRole(Object body, String name, String namespace);

    /**
     * partially update the specified Role.
     *
     * @param body the Object value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1Role> patchNamespacedRoleAsync(Object body, String name, String namespace, final ServiceCallback<V1alpha1Role> serviceCallback);

    /**
     * partially update the specified Role.
     *
     * @param body the Object value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1Role object
     */
    Observable<V1alpha1Role> patchNamespacedRoleAsync(Object body, String name, String namespace);

    /**
     * partially update the specified Role.
     *
     * @param body the Object value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1Role object
     */
    Observable<ServiceResponse<V1alpha1Role>> patchNamespacedRoleWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified Role.
     *
     * @param body the Object value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1Role object if successful.
     */
    V1alpha1Role patchNamespacedRole(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Role.
     *
     * @param body the Object value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1Role> patchNamespacedRoleAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1alpha1Role> serviceCallback);

    /**
     * partially update the specified Role.
     *
     * @param body the Object value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1Role object
     */
    Observable<V1alpha1Role> patchNamespacedRoleAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Role.
     *
     * @param body the Object value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1Role object
     */
    Observable<ServiceResponse<V1alpha1Role>> patchNamespacedRoleWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1RoleBindingList object if successful.
     */
    V1alpha1RoleBindingList listRoleBindingForAllNamespaces();

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1RoleBindingList> listRoleBindingForAllNamespacesAsync(final ServiceCallback<V1alpha1RoleBindingList> serviceCallback);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBindingList object
     */
    Observable<V1alpha1RoleBindingList> listRoleBindingForAllNamespacesAsync();

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBindingList object
     */
    Observable<ServiceResponse<V1alpha1RoleBindingList>> listRoleBindingForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1RoleBindingList object if successful.
     */
    V1alpha1RoleBindingList listRoleBindingForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1RoleBindingList> listRoleBindingForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1alpha1RoleBindingList> serviceCallback);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBindingList object
     */
    Observable<V1alpha1RoleBindingList> listRoleBindingForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleBindingList object
     */
    Observable<ServiceResponse<V1alpha1RoleBindingList>> listRoleBindingForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Role.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1RoleList object if successful.
     */
    V1alpha1RoleList listRoleForAllNamespaces();

    /**
     * list or watch objects of kind Role.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1RoleList> listRoleForAllNamespacesAsync(final ServiceCallback<V1alpha1RoleList> serviceCallback);

    /**
     * list or watch objects of kind Role.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleList object
     */
    Observable<V1alpha1RoleList> listRoleForAllNamespacesAsync();

    /**
     * list or watch objects of kind Role.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleList object
     */
    Observable<ServiceResponse<V1alpha1RoleList>> listRoleForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind Role.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1RoleList object if successful.
     */
    V1alpha1RoleList listRoleForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Role.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1RoleList> listRoleForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1alpha1RoleList> serviceCallback);

    /**
     * list or watch objects of kind Role.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleList object
     */
    Observable<V1alpha1RoleList> listRoleForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Role.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1RoleList object
     */
    Observable<ServiceResponse<V1alpha1RoleList>> listRoleForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources14();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources14Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources14Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources14WithServiceResponseAsync();

    /**
     * list or watch objects of kind ClusterRoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRoleBindingList object if successful.
     */
    V1beta1ClusterRoleBindingList listClusterRoleBinding1();

    /**
     * list or watch objects of kind ClusterRoleBinding.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRoleBindingList> listClusterRoleBinding1Async(final ServiceCallback<V1beta1ClusterRoleBindingList> serviceCallback);

    /**
     * list or watch objects of kind ClusterRoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBindingList object
     */
    Observable<V1beta1ClusterRoleBindingList> listClusterRoleBinding1Async();

    /**
     * list or watch objects of kind ClusterRoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBindingList object
     */
    Observable<ServiceResponse<V1beta1ClusterRoleBindingList>> listClusterRoleBinding1WithServiceResponseAsync();
    /**
     * list or watch objects of kind ClusterRoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRoleBindingList object if successful.
     */
    V1beta1ClusterRoleBindingList listClusterRoleBinding1(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ClusterRoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRoleBindingList> listClusterRoleBinding1Async(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1beta1ClusterRoleBindingList> serviceCallback);

    /**
     * list or watch objects of kind ClusterRoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBindingList object
     */
    Observable<V1beta1ClusterRoleBindingList> listClusterRoleBinding1Async(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ClusterRoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBindingList object
     */
    Observable<ServiceResponse<V1beta1ClusterRoleBindingList>> listClusterRoleBinding1WithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a ClusterRoleBinding.
     *
     * @param body the V1beta1ClusterRoleBinding value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRoleBinding object if successful.
     */
    V1beta1ClusterRoleBinding createClusterRoleBinding1(V1beta1ClusterRoleBinding body);

    /**
     * create a ClusterRoleBinding.
     *
     * @param body the V1beta1ClusterRoleBinding value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRoleBinding> createClusterRoleBinding1Async(V1beta1ClusterRoleBinding body, final ServiceCallback<V1beta1ClusterRoleBinding> serviceCallback);

    /**
     * create a ClusterRoleBinding.
     *
     * @param body the V1beta1ClusterRoleBinding value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBinding object
     */
    Observable<V1beta1ClusterRoleBinding> createClusterRoleBinding1Async(V1beta1ClusterRoleBinding body);

    /**
     * create a ClusterRoleBinding.
     *
     * @param body the V1beta1ClusterRoleBinding value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBinding object
     */
    Observable<ServiceResponse<V1beta1ClusterRoleBinding>> createClusterRoleBinding1WithServiceResponseAsync(V1beta1ClusterRoleBinding body);
    /**
     * create a ClusterRoleBinding.
     *
     * @param body the V1beta1ClusterRoleBinding value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRoleBinding object if successful.
     */
    V1beta1ClusterRoleBinding createClusterRoleBinding1(V1beta1ClusterRoleBinding body, String pretty);

    /**
     * create a ClusterRoleBinding.
     *
     * @param body the V1beta1ClusterRoleBinding value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRoleBinding> createClusterRoleBinding1Async(V1beta1ClusterRoleBinding body, String pretty, final ServiceCallback<V1beta1ClusterRoleBinding> serviceCallback);

    /**
     * create a ClusterRoleBinding.
     *
     * @param body the V1beta1ClusterRoleBinding value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBinding object
     */
    Observable<V1beta1ClusterRoleBinding> createClusterRoleBinding1Async(V1beta1ClusterRoleBinding body, String pretty);

    /**
     * create a ClusterRoleBinding.
     *
     * @param body the V1beta1ClusterRoleBinding value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBinding object
     */
    Observable<ServiceResponse<V1beta1ClusterRoleBinding>> createClusterRoleBinding1WithServiceResponseAsync(V1beta1ClusterRoleBinding body, String pretty);

    /**
     * delete collection of ClusterRoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionClusterRoleBinding1();

    /**
     * delete collection of ClusterRoleBinding.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionClusterRoleBinding1Async(final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ClusterRoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionClusterRoleBinding1Async();

    /**
     * delete collection of ClusterRoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionClusterRoleBinding1WithServiceResponseAsync();
    /**
     * delete collection of ClusterRoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionClusterRoleBinding1(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ClusterRoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionClusterRoleBinding1Async(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ClusterRoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionClusterRoleBinding1Async(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ClusterRoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionClusterRoleBinding1WithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified ClusterRoleBinding.
     *
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRoleBinding object if successful.
     */
    V1beta1ClusterRoleBinding readClusterRoleBinding1(String name);

    /**
     * read the specified ClusterRoleBinding.
     *
     * @param name name of the ClusterRoleBinding
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRoleBinding> readClusterRoleBinding1Async(String name, final ServiceCallback<V1beta1ClusterRoleBinding> serviceCallback);

    /**
     * read the specified ClusterRoleBinding.
     *
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBinding object
     */
    Observable<V1beta1ClusterRoleBinding> readClusterRoleBinding1Async(String name);

    /**
     * read the specified ClusterRoleBinding.
     *
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBinding object
     */
    Observable<ServiceResponse<V1beta1ClusterRoleBinding>> readClusterRoleBinding1WithServiceResponseAsync(String name);
    /**
     * read the specified ClusterRoleBinding.
     *
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRoleBinding object if successful.
     */
    V1beta1ClusterRoleBinding readClusterRoleBinding1(String name, String pretty);

    /**
     * read the specified ClusterRoleBinding.
     *
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRoleBinding> readClusterRoleBinding1Async(String name, String pretty, final ServiceCallback<V1beta1ClusterRoleBinding> serviceCallback);

    /**
     * read the specified ClusterRoleBinding.
     *
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBinding object
     */
    Observable<V1beta1ClusterRoleBinding> readClusterRoleBinding1Async(String name, String pretty);

    /**
     * read the specified ClusterRoleBinding.
     *
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBinding object
     */
    Observable<ServiceResponse<V1beta1ClusterRoleBinding>> readClusterRoleBinding1WithServiceResponseAsync(String name, String pretty);

    /**
     * replace the specified ClusterRoleBinding.
     *
     * @param body the V1beta1ClusterRoleBinding value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRoleBinding object if successful.
     */
    V1beta1ClusterRoleBinding replaceClusterRoleBinding1(V1beta1ClusterRoleBinding body, String name);

    /**
     * replace the specified ClusterRoleBinding.
     *
     * @param body the V1beta1ClusterRoleBinding value
     * @param name name of the ClusterRoleBinding
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRoleBinding> replaceClusterRoleBinding1Async(V1beta1ClusterRoleBinding body, String name, final ServiceCallback<V1beta1ClusterRoleBinding> serviceCallback);

    /**
     * replace the specified ClusterRoleBinding.
     *
     * @param body the V1beta1ClusterRoleBinding value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBinding object
     */
    Observable<V1beta1ClusterRoleBinding> replaceClusterRoleBinding1Async(V1beta1ClusterRoleBinding body, String name);

    /**
     * replace the specified ClusterRoleBinding.
     *
     * @param body the V1beta1ClusterRoleBinding value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBinding object
     */
    Observable<ServiceResponse<V1beta1ClusterRoleBinding>> replaceClusterRoleBinding1WithServiceResponseAsync(V1beta1ClusterRoleBinding body, String name);
    /**
     * replace the specified ClusterRoleBinding.
     *
     * @param body the V1beta1ClusterRoleBinding value
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRoleBinding object if successful.
     */
    V1beta1ClusterRoleBinding replaceClusterRoleBinding1(V1beta1ClusterRoleBinding body, String name, String pretty);

    /**
     * replace the specified ClusterRoleBinding.
     *
     * @param body the V1beta1ClusterRoleBinding value
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRoleBinding> replaceClusterRoleBinding1Async(V1beta1ClusterRoleBinding body, String name, String pretty, final ServiceCallback<V1beta1ClusterRoleBinding> serviceCallback);

    /**
     * replace the specified ClusterRoleBinding.
     *
     * @param body the V1beta1ClusterRoleBinding value
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBinding object
     */
    Observable<V1beta1ClusterRoleBinding> replaceClusterRoleBinding1Async(V1beta1ClusterRoleBinding body, String name, String pretty);

    /**
     * replace the specified ClusterRoleBinding.
     *
     * @param body the V1beta1ClusterRoleBinding value
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBinding object
     */
    Observable<ServiceResponse<V1beta1ClusterRoleBinding>> replaceClusterRoleBinding1WithServiceResponseAsync(V1beta1ClusterRoleBinding body, String name, String pretty);

    /**
     * delete a ClusterRoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteClusterRoleBinding1(V1DeleteOptions body, String name);

    /**
     * delete a ClusterRoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRoleBinding
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteClusterRoleBinding1Async(V1DeleteOptions body, String name, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ClusterRoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteClusterRoleBinding1Async(V1DeleteOptions body, String name);

    /**
     * delete a ClusterRoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteClusterRoleBinding1WithServiceResponseAsync(V1DeleteOptions body, String name);
    /**
     * delete a ClusterRoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRoleBinding
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteClusterRoleBinding1(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ClusterRoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRoleBinding
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteClusterRoleBinding1Async(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ClusterRoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRoleBinding
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteClusterRoleBinding1Async(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ClusterRoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRoleBinding
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteClusterRoleBinding1WithServiceResponseAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified ClusterRoleBinding.
     *
     * @param body the Object value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRoleBinding object if successful.
     */
    V1beta1ClusterRoleBinding patchClusterRoleBinding1(Object body, String name);

    /**
     * partially update the specified ClusterRoleBinding.
     *
     * @param body the Object value
     * @param name name of the ClusterRoleBinding
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRoleBinding> patchClusterRoleBinding1Async(Object body, String name, final ServiceCallback<V1beta1ClusterRoleBinding> serviceCallback);

    /**
     * partially update the specified ClusterRoleBinding.
     *
     * @param body the Object value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBinding object
     */
    Observable<V1beta1ClusterRoleBinding> patchClusterRoleBinding1Async(Object body, String name);

    /**
     * partially update the specified ClusterRoleBinding.
     *
     * @param body the Object value
     * @param name name of the ClusterRoleBinding
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBinding object
     */
    Observable<ServiceResponse<V1beta1ClusterRoleBinding>> patchClusterRoleBinding1WithServiceResponseAsync(Object body, String name);
    /**
     * partially update the specified ClusterRoleBinding.
     *
     * @param body the Object value
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRoleBinding object if successful.
     */
    V1beta1ClusterRoleBinding patchClusterRoleBinding1(Object body, String name, String pretty);

    /**
     * partially update the specified ClusterRoleBinding.
     *
     * @param body the Object value
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRoleBinding> patchClusterRoleBinding1Async(Object body, String name, String pretty, final ServiceCallback<V1beta1ClusterRoleBinding> serviceCallback);

    /**
     * partially update the specified ClusterRoleBinding.
     *
     * @param body the Object value
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBinding object
     */
    Observable<V1beta1ClusterRoleBinding> patchClusterRoleBinding1Async(Object body, String name, String pretty);

    /**
     * partially update the specified ClusterRoleBinding.
     *
     * @param body the Object value
     * @param name name of the ClusterRoleBinding
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleBinding object
     */
    Observable<ServiceResponse<V1beta1ClusterRoleBinding>> patchClusterRoleBinding1WithServiceResponseAsync(Object body, String name, String pretty);

    /**
     * list or watch objects of kind ClusterRole.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRoleList object if successful.
     */
    V1beta1ClusterRoleList listClusterRole1();

    /**
     * list or watch objects of kind ClusterRole.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRoleList> listClusterRole1Async(final ServiceCallback<V1beta1ClusterRoleList> serviceCallback);

    /**
     * list or watch objects of kind ClusterRole.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleList object
     */
    Observable<V1beta1ClusterRoleList> listClusterRole1Async();

    /**
     * list or watch objects of kind ClusterRole.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleList object
     */
    Observable<ServiceResponse<V1beta1ClusterRoleList>> listClusterRole1WithServiceResponseAsync();
    /**
     * list or watch objects of kind ClusterRole.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRoleList object if successful.
     */
    V1beta1ClusterRoleList listClusterRole1(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ClusterRole.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRoleList> listClusterRole1Async(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1beta1ClusterRoleList> serviceCallback);

    /**
     * list or watch objects of kind ClusterRole.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleList object
     */
    Observable<V1beta1ClusterRoleList> listClusterRole1Async(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind ClusterRole.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRoleList object
     */
    Observable<ServiceResponse<V1beta1ClusterRoleList>> listClusterRole1WithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a ClusterRole.
     *
     * @param body the V1beta1ClusterRole value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRole object if successful.
     */
    V1beta1ClusterRole createClusterRole1(V1beta1ClusterRole body);

    /**
     * create a ClusterRole.
     *
     * @param body the V1beta1ClusterRole value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRole> createClusterRole1Async(V1beta1ClusterRole body, final ServiceCallback<V1beta1ClusterRole> serviceCallback);

    /**
     * create a ClusterRole.
     *
     * @param body the V1beta1ClusterRole value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRole object
     */
    Observable<V1beta1ClusterRole> createClusterRole1Async(V1beta1ClusterRole body);

    /**
     * create a ClusterRole.
     *
     * @param body the V1beta1ClusterRole value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRole object
     */
    Observable<ServiceResponse<V1beta1ClusterRole>> createClusterRole1WithServiceResponseAsync(V1beta1ClusterRole body);
    /**
     * create a ClusterRole.
     *
     * @param body the V1beta1ClusterRole value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRole object if successful.
     */
    V1beta1ClusterRole createClusterRole1(V1beta1ClusterRole body, String pretty);

    /**
     * create a ClusterRole.
     *
     * @param body the V1beta1ClusterRole value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRole> createClusterRole1Async(V1beta1ClusterRole body, String pretty, final ServiceCallback<V1beta1ClusterRole> serviceCallback);

    /**
     * create a ClusterRole.
     *
     * @param body the V1beta1ClusterRole value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRole object
     */
    Observable<V1beta1ClusterRole> createClusterRole1Async(V1beta1ClusterRole body, String pretty);

    /**
     * create a ClusterRole.
     *
     * @param body the V1beta1ClusterRole value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRole object
     */
    Observable<ServiceResponse<V1beta1ClusterRole>> createClusterRole1WithServiceResponseAsync(V1beta1ClusterRole body, String pretty);

    /**
     * delete collection of ClusterRole.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionClusterRole1();

    /**
     * delete collection of ClusterRole.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionClusterRole1Async(final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ClusterRole.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionClusterRole1Async();

    /**
     * delete collection of ClusterRole.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionClusterRole1WithServiceResponseAsync();
    /**
     * delete collection of ClusterRole.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionClusterRole1(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ClusterRole.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionClusterRole1Async(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of ClusterRole.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionClusterRole1Async(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of ClusterRole.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionClusterRole1WithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified ClusterRole.
     *
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRole object if successful.
     */
    V1beta1ClusterRole readClusterRole1(String name);

    /**
     * read the specified ClusterRole.
     *
     * @param name name of the ClusterRole
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRole> readClusterRole1Async(String name, final ServiceCallback<V1beta1ClusterRole> serviceCallback);

    /**
     * read the specified ClusterRole.
     *
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRole object
     */
    Observable<V1beta1ClusterRole> readClusterRole1Async(String name);

    /**
     * read the specified ClusterRole.
     *
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRole object
     */
    Observable<ServiceResponse<V1beta1ClusterRole>> readClusterRole1WithServiceResponseAsync(String name);
    /**
     * read the specified ClusterRole.
     *
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRole object if successful.
     */
    V1beta1ClusterRole readClusterRole1(String name, String pretty);

    /**
     * read the specified ClusterRole.
     *
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRole> readClusterRole1Async(String name, String pretty, final ServiceCallback<V1beta1ClusterRole> serviceCallback);

    /**
     * read the specified ClusterRole.
     *
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRole object
     */
    Observable<V1beta1ClusterRole> readClusterRole1Async(String name, String pretty);

    /**
     * read the specified ClusterRole.
     *
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRole object
     */
    Observable<ServiceResponse<V1beta1ClusterRole>> readClusterRole1WithServiceResponseAsync(String name, String pretty);

    /**
     * replace the specified ClusterRole.
     *
     * @param body the V1beta1ClusterRole value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRole object if successful.
     */
    V1beta1ClusterRole replaceClusterRole1(V1beta1ClusterRole body, String name);

    /**
     * replace the specified ClusterRole.
     *
     * @param body the V1beta1ClusterRole value
     * @param name name of the ClusterRole
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRole> replaceClusterRole1Async(V1beta1ClusterRole body, String name, final ServiceCallback<V1beta1ClusterRole> serviceCallback);

    /**
     * replace the specified ClusterRole.
     *
     * @param body the V1beta1ClusterRole value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRole object
     */
    Observable<V1beta1ClusterRole> replaceClusterRole1Async(V1beta1ClusterRole body, String name);

    /**
     * replace the specified ClusterRole.
     *
     * @param body the V1beta1ClusterRole value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRole object
     */
    Observable<ServiceResponse<V1beta1ClusterRole>> replaceClusterRole1WithServiceResponseAsync(V1beta1ClusterRole body, String name);
    /**
     * replace the specified ClusterRole.
     *
     * @param body the V1beta1ClusterRole value
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRole object if successful.
     */
    V1beta1ClusterRole replaceClusterRole1(V1beta1ClusterRole body, String name, String pretty);

    /**
     * replace the specified ClusterRole.
     *
     * @param body the V1beta1ClusterRole value
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRole> replaceClusterRole1Async(V1beta1ClusterRole body, String name, String pretty, final ServiceCallback<V1beta1ClusterRole> serviceCallback);

    /**
     * replace the specified ClusterRole.
     *
     * @param body the V1beta1ClusterRole value
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRole object
     */
    Observable<V1beta1ClusterRole> replaceClusterRole1Async(V1beta1ClusterRole body, String name, String pretty);

    /**
     * replace the specified ClusterRole.
     *
     * @param body the V1beta1ClusterRole value
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRole object
     */
    Observable<ServiceResponse<V1beta1ClusterRole>> replaceClusterRole1WithServiceResponseAsync(V1beta1ClusterRole body, String name, String pretty);

    /**
     * delete a ClusterRole.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteClusterRole1(V1DeleteOptions body, String name);

    /**
     * delete a ClusterRole.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRole
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteClusterRole1Async(V1DeleteOptions body, String name, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ClusterRole.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteClusterRole1Async(V1DeleteOptions body, String name);

    /**
     * delete a ClusterRole.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteClusterRole1WithServiceResponseAsync(V1DeleteOptions body, String name);
    /**
     * delete a ClusterRole.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRole
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteClusterRole1(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ClusterRole.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRole
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteClusterRole1Async(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a ClusterRole.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRole
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteClusterRole1Async(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a ClusterRole.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the ClusterRole
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteClusterRole1WithServiceResponseAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified ClusterRole.
     *
     * @param body the Object value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRole object if successful.
     */
    V1beta1ClusterRole patchClusterRole1(Object body, String name);

    /**
     * partially update the specified ClusterRole.
     *
     * @param body the Object value
     * @param name name of the ClusterRole
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRole> patchClusterRole1Async(Object body, String name, final ServiceCallback<V1beta1ClusterRole> serviceCallback);

    /**
     * partially update the specified ClusterRole.
     *
     * @param body the Object value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRole object
     */
    Observable<V1beta1ClusterRole> patchClusterRole1Async(Object body, String name);

    /**
     * partially update the specified ClusterRole.
     *
     * @param body the Object value
     * @param name name of the ClusterRole
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRole object
     */
    Observable<ServiceResponse<V1beta1ClusterRole>> patchClusterRole1WithServiceResponseAsync(Object body, String name);
    /**
     * partially update the specified ClusterRole.
     *
     * @param body the Object value
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1ClusterRole object if successful.
     */
    V1beta1ClusterRole patchClusterRole1(Object body, String name, String pretty);

    /**
     * partially update the specified ClusterRole.
     *
     * @param body the Object value
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1ClusterRole> patchClusterRole1Async(Object body, String name, String pretty, final ServiceCallback<V1beta1ClusterRole> serviceCallback);

    /**
     * partially update the specified ClusterRole.
     *
     * @param body the Object value
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRole object
     */
    Observable<V1beta1ClusterRole> patchClusterRole1Async(Object body, String name, String pretty);

    /**
     * partially update the specified ClusterRole.
     *
     * @param body the Object value
     * @param name name of the ClusterRole
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1ClusterRole object
     */
    Observable<ServiceResponse<V1beta1ClusterRole>> patchClusterRole1WithServiceResponseAsync(Object body, String name, String pretty);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1RoleBindingList object if successful.
     */
    V1beta1RoleBindingList listNamespacedRoleBinding1(String namespace);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1RoleBindingList> listNamespacedRoleBinding1Async(String namespace, final ServiceCallback<V1beta1RoleBindingList> serviceCallback);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBindingList object
     */
    Observable<V1beta1RoleBindingList> listNamespacedRoleBinding1Async(String namespace);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBindingList object
     */
    Observable<ServiceResponse<V1beta1RoleBindingList>> listNamespacedRoleBinding1WithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1RoleBindingList object if successful.
     */
    V1beta1RoleBindingList listNamespacedRoleBinding1(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1RoleBindingList> listNamespacedRoleBinding1Async(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1beta1RoleBindingList> serviceCallback);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBindingList object
     */
    Observable<V1beta1RoleBindingList> listNamespacedRoleBinding1Async(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBindingList object
     */
    Observable<ServiceResponse<V1beta1RoleBindingList>> listNamespacedRoleBinding1WithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a RoleBinding.
     *
     * @param body the V1beta1RoleBinding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1RoleBinding object if successful.
     */
    V1beta1RoleBinding createNamespacedRoleBinding1(V1beta1RoleBinding body, String namespace);

    /**
     * create a RoleBinding.
     *
     * @param body the V1beta1RoleBinding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1RoleBinding> createNamespacedRoleBinding1Async(V1beta1RoleBinding body, String namespace, final ServiceCallback<V1beta1RoleBinding> serviceCallback);

    /**
     * create a RoleBinding.
     *
     * @param body the V1beta1RoleBinding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBinding object
     */
    Observable<V1beta1RoleBinding> createNamespacedRoleBinding1Async(V1beta1RoleBinding body, String namespace);

    /**
     * create a RoleBinding.
     *
     * @param body the V1beta1RoleBinding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBinding object
     */
    Observable<ServiceResponse<V1beta1RoleBinding>> createNamespacedRoleBinding1WithServiceResponseAsync(V1beta1RoleBinding body, String namespace);
    /**
     * create a RoleBinding.
     *
     * @param body the V1beta1RoleBinding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1RoleBinding object if successful.
     */
    V1beta1RoleBinding createNamespacedRoleBinding1(V1beta1RoleBinding body, String namespace, String pretty);

    /**
     * create a RoleBinding.
     *
     * @param body the V1beta1RoleBinding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1RoleBinding> createNamespacedRoleBinding1Async(V1beta1RoleBinding body, String namespace, String pretty, final ServiceCallback<V1beta1RoleBinding> serviceCallback);

    /**
     * create a RoleBinding.
     *
     * @param body the V1beta1RoleBinding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBinding object
     */
    Observable<V1beta1RoleBinding> createNamespacedRoleBinding1Async(V1beta1RoleBinding body, String namespace, String pretty);

    /**
     * create a RoleBinding.
     *
     * @param body the V1beta1RoleBinding value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBinding object
     */
    Observable<ServiceResponse<V1beta1RoleBinding>> createNamespacedRoleBinding1WithServiceResponseAsync(V1beta1RoleBinding body, String namespace, String pretty);

    /**
     * delete collection of RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedRoleBinding1(String namespace);

    /**
     * delete collection of RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedRoleBinding1Async(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedRoleBinding1Async(String namespace);

    /**
     * delete collection of RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedRoleBinding1WithServiceResponseAsync(String namespace);
    /**
     * delete collection of RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedRoleBinding1(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedRoleBinding1Async(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedRoleBinding1Async(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of RoleBinding.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedRoleBinding1WithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified RoleBinding.
     *
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1RoleBinding object if successful.
     */
    V1beta1RoleBinding readNamespacedRoleBinding1(String name, String namespace);

    /**
     * read the specified RoleBinding.
     *
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1RoleBinding> readNamespacedRoleBinding1Async(String name, String namespace, final ServiceCallback<V1beta1RoleBinding> serviceCallback);

    /**
     * read the specified RoleBinding.
     *
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBinding object
     */
    Observable<V1beta1RoleBinding> readNamespacedRoleBinding1Async(String name, String namespace);

    /**
     * read the specified RoleBinding.
     *
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBinding object
     */
    Observable<ServiceResponse<V1beta1RoleBinding>> readNamespacedRoleBinding1WithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified RoleBinding.
     *
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1RoleBinding object if successful.
     */
    V1beta1RoleBinding readNamespacedRoleBinding1(String name, String namespace, String pretty);

    /**
     * read the specified RoleBinding.
     *
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1RoleBinding> readNamespacedRoleBinding1Async(String name, String namespace, String pretty, final ServiceCallback<V1beta1RoleBinding> serviceCallback);

    /**
     * read the specified RoleBinding.
     *
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBinding object
     */
    Observable<V1beta1RoleBinding> readNamespacedRoleBinding1Async(String name, String namespace, String pretty);

    /**
     * read the specified RoleBinding.
     *
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBinding object
     */
    Observable<ServiceResponse<V1beta1RoleBinding>> readNamespacedRoleBinding1WithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace the specified RoleBinding.
     *
     * @param body the V1beta1RoleBinding value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1RoleBinding object if successful.
     */
    V1beta1RoleBinding replaceNamespacedRoleBinding1(V1beta1RoleBinding body, String name, String namespace);

    /**
     * replace the specified RoleBinding.
     *
     * @param body the V1beta1RoleBinding value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1RoleBinding> replaceNamespacedRoleBinding1Async(V1beta1RoleBinding body, String name, String namespace, final ServiceCallback<V1beta1RoleBinding> serviceCallback);

    /**
     * replace the specified RoleBinding.
     *
     * @param body the V1beta1RoleBinding value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBinding object
     */
    Observable<V1beta1RoleBinding> replaceNamespacedRoleBinding1Async(V1beta1RoleBinding body, String name, String namespace);

    /**
     * replace the specified RoleBinding.
     *
     * @param body the V1beta1RoleBinding value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBinding object
     */
    Observable<ServiceResponse<V1beta1RoleBinding>> replaceNamespacedRoleBinding1WithServiceResponseAsync(V1beta1RoleBinding body, String name, String namespace);
    /**
     * replace the specified RoleBinding.
     *
     * @param body the V1beta1RoleBinding value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1RoleBinding object if successful.
     */
    V1beta1RoleBinding replaceNamespacedRoleBinding1(V1beta1RoleBinding body, String name, String namespace, String pretty);

    /**
     * replace the specified RoleBinding.
     *
     * @param body the V1beta1RoleBinding value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1RoleBinding> replaceNamespacedRoleBinding1Async(V1beta1RoleBinding body, String name, String namespace, String pretty, final ServiceCallback<V1beta1RoleBinding> serviceCallback);

    /**
     * replace the specified RoleBinding.
     *
     * @param body the V1beta1RoleBinding value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBinding object
     */
    Observable<V1beta1RoleBinding> replaceNamespacedRoleBinding1Async(V1beta1RoleBinding body, String name, String namespace, String pretty);

    /**
     * replace the specified RoleBinding.
     *
     * @param body the V1beta1RoleBinding value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBinding object
     */
    Observable<ServiceResponse<V1beta1RoleBinding>> replaceNamespacedRoleBinding1WithServiceResponseAsync(V1beta1RoleBinding body, String name, String namespace, String pretty);

    /**
     * delete a RoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedRoleBinding1(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a RoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedRoleBinding1Async(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a RoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedRoleBinding1Async(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a RoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedRoleBinding1WithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a RoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedRoleBinding1(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a RoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedRoleBinding1Async(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a RoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedRoleBinding1Async(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a RoleBinding.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedRoleBinding1WithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified RoleBinding.
     *
     * @param body the Object value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1RoleBinding object if successful.
     */
    V1beta1RoleBinding patchNamespacedRoleBinding1(Object body, String name, String namespace);

    /**
     * partially update the specified RoleBinding.
     *
     * @param body the Object value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1RoleBinding> patchNamespacedRoleBinding1Async(Object body, String name, String namespace, final ServiceCallback<V1beta1RoleBinding> serviceCallback);

    /**
     * partially update the specified RoleBinding.
     *
     * @param body the Object value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBinding object
     */
    Observable<V1beta1RoleBinding> patchNamespacedRoleBinding1Async(Object body, String name, String namespace);

    /**
     * partially update the specified RoleBinding.
     *
     * @param body the Object value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBinding object
     */
    Observable<ServiceResponse<V1beta1RoleBinding>> patchNamespacedRoleBinding1WithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified RoleBinding.
     *
     * @param body the Object value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1RoleBinding object if successful.
     */
    V1beta1RoleBinding patchNamespacedRoleBinding1(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified RoleBinding.
     *
     * @param body the Object value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1RoleBinding> patchNamespacedRoleBinding1Async(Object body, String name, String namespace, String pretty, final ServiceCallback<V1beta1RoleBinding> serviceCallback);

    /**
     * partially update the specified RoleBinding.
     *
     * @param body the Object value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBinding object
     */
    Observable<V1beta1RoleBinding> patchNamespacedRoleBinding1Async(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified RoleBinding.
     *
     * @param body the Object value
     * @param name name of the RoleBinding
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBinding object
     */
    Observable<ServiceResponse<V1beta1RoleBinding>> patchNamespacedRoleBinding1WithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1RoleList object if successful.
     */
    V1beta1RoleList listNamespacedRole1(String namespace);

    /**
     * list or watch objects of kind Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1RoleList> listNamespacedRole1Async(String namespace, final ServiceCallback<V1beta1RoleList> serviceCallback);

    /**
     * list or watch objects of kind Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleList object
     */
    Observable<V1beta1RoleList> listNamespacedRole1Async(String namespace);

    /**
     * list or watch objects of kind Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleList object
     */
    Observable<ServiceResponse<V1beta1RoleList>> listNamespacedRole1WithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1RoleList object if successful.
     */
    V1beta1RoleList listNamespacedRole1(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1RoleList> listNamespacedRole1Async(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1beta1RoleList> serviceCallback);

    /**
     * list or watch objects of kind Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleList object
     */
    Observable<V1beta1RoleList> listNamespacedRole1Async(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleList object
     */
    Observable<ServiceResponse<V1beta1RoleList>> listNamespacedRole1WithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a Role.
     *
     * @param body the V1beta1Role value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Role object if successful.
     */
    V1beta1Role createNamespacedRole1(V1beta1Role body, String namespace);

    /**
     * create a Role.
     *
     * @param body the V1beta1Role value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Role> createNamespacedRole1Async(V1beta1Role body, String namespace, final ServiceCallback<V1beta1Role> serviceCallback);

    /**
     * create a Role.
     *
     * @param body the V1beta1Role value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Role object
     */
    Observable<V1beta1Role> createNamespacedRole1Async(V1beta1Role body, String namespace);

    /**
     * create a Role.
     *
     * @param body the V1beta1Role value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Role object
     */
    Observable<ServiceResponse<V1beta1Role>> createNamespacedRole1WithServiceResponseAsync(V1beta1Role body, String namespace);
    /**
     * create a Role.
     *
     * @param body the V1beta1Role value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Role object if successful.
     */
    V1beta1Role createNamespacedRole1(V1beta1Role body, String namespace, String pretty);

    /**
     * create a Role.
     *
     * @param body the V1beta1Role value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Role> createNamespacedRole1Async(V1beta1Role body, String namespace, String pretty, final ServiceCallback<V1beta1Role> serviceCallback);

    /**
     * create a Role.
     *
     * @param body the V1beta1Role value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Role object
     */
    Observable<V1beta1Role> createNamespacedRole1Async(V1beta1Role body, String namespace, String pretty);

    /**
     * create a Role.
     *
     * @param body the V1beta1Role value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Role object
     */
    Observable<ServiceResponse<V1beta1Role>> createNamespacedRole1WithServiceResponseAsync(V1beta1Role body, String namespace, String pretty);

    /**
     * delete collection of Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedRole1(String namespace);

    /**
     * delete collection of Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedRole1Async(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedRole1Async(String namespace);

    /**
     * delete collection of Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedRole1WithServiceResponseAsync(String namespace);
    /**
     * delete collection of Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedRole1(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedRole1Async(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedRole1Async(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of Role.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedRole1WithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified Role.
     *
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Role object if successful.
     */
    V1beta1Role readNamespacedRole1(String name, String namespace);

    /**
     * read the specified Role.
     *
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Role> readNamespacedRole1Async(String name, String namespace, final ServiceCallback<V1beta1Role> serviceCallback);

    /**
     * read the specified Role.
     *
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Role object
     */
    Observable<V1beta1Role> readNamespacedRole1Async(String name, String namespace);

    /**
     * read the specified Role.
     *
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Role object
     */
    Observable<ServiceResponse<V1beta1Role>> readNamespacedRole1WithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified Role.
     *
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Role object if successful.
     */
    V1beta1Role readNamespacedRole1(String name, String namespace, String pretty);

    /**
     * read the specified Role.
     *
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Role> readNamespacedRole1Async(String name, String namespace, String pretty, final ServiceCallback<V1beta1Role> serviceCallback);

    /**
     * read the specified Role.
     *
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Role object
     */
    Observable<V1beta1Role> readNamespacedRole1Async(String name, String namespace, String pretty);

    /**
     * read the specified Role.
     *
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Role object
     */
    Observable<ServiceResponse<V1beta1Role>> readNamespacedRole1WithServiceResponseAsync(String name, String namespace, String pretty);

    /**
     * replace the specified Role.
     *
     * @param body the V1beta1Role value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Role object if successful.
     */
    V1beta1Role replaceNamespacedRole1(V1beta1Role body, String name, String namespace);

    /**
     * replace the specified Role.
     *
     * @param body the V1beta1Role value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Role> replaceNamespacedRole1Async(V1beta1Role body, String name, String namespace, final ServiceCallback<V1beta1Role> serviceCallback);

    /**
     * replace the specified Role.
     *
     * @param body the V1beta1Role value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Role object
     */
    Observable<V1beta1Role> replaceNamespacedRole1Async(V1beta1Role body, String name, String namespace);

    /**
     * replace the specified Role.
     *
     * @param body the V1beta1Role value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Role object
     */
    Observable<ServiceResponse<V1beta1Role>> replaceNamespacedRole1WithServiceResponseAsync(V1beta1Role body, String name, String namespace);
    /**
     * replace the specified Role.
     *
     * @param body the V1beta1Role value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Role object if successful.
     */
    V1beta1Role replaceNamespacedRole1(V1beta1Role body, String name, String namespace, String pretty);

    /**
     * replace the specified Role.
     *
     * @param body the V1beta1Role value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Role> replaceNamespacedRole1Async(V1beta1Role body, String name, String namespace, String pretty, final ServiceCallback<V1beta1Role> serviceCallback);

    /**
     * replace the specified Role.
     *
     * @param body the V1beta1Role value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Role object
     */
    Observable<V1beta1Role> replaceNamespacedRole1Async(V1beta1Role body, String name, String namespace, String pretty);

    /**
     * replace the specified Role.
     *
     * @param body the V1beta1Role value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Role object
     */
    Observable<ServiceResponse<V1beta1Role>> replaceNamespacedRole1WithServiceResponseAsync(V1beta1Role body, String name, String namespace, String pretty);

    /**
     * delete a Role.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedRole1(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a Role.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedRole1Async(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Role.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedRole1Async(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a Role.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedRole1WithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a Role.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedRole1(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Role.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedRole1Async(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a Role.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedRole1Async(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a Role.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedRole1WithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified Role.
     *
     * @param body the Object value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Role object if successful.
     */
    V1beta1Role patchNamespacedRole1(Object body, String name, String namespace);

    /**
     * partially update the specified Role.
     *
     * @param body the Object value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Role> patchNamespacedRole1Async(Object body, String name, String namespace, final ServiceCallback<V1beta1Role> serviceCallback);

    /**
     * partially update the specified Role.
     *
     * @param body the Object value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Role object
     */
    Observable<V1beta1Role> patchNamespacedRole1Async(Object body, String name, String namespace);

    /**
     * partially update the specified Role.
     *
     * @param body the Object value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Role object
     */
    Observable<ServiceResponse<V1beta1Role>> patchNamespacedRole1WithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified Role.
     *
     * @param body the Object value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1Role object if successful.
     */
    V1beta1Role patchNamespacedRole1(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Role.
     *
     * @param body the Object value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1Role> patchNamespacedRole1Async(Object body, String name, String namespace, String pretty, final ServiceCallback<V1beta1Role> serviceCallback);

    /**
     * partially update the specified Role.
     *
     * @param body the Object value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Role object
     */
    Observable<V1beta1Role> patchNamespacedRole1Async(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified Role.
     *
     * @param body the Object value
     * @param name name of the Role
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1Role object
     */
    Observable<ServiceResponse<V1beta1Role>> patchNamespacedRole1WithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1RoleBindingList object if successful.
     */
    V1beta1RoleBindingList listRoleBindingForAllNamespaces1();

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1RoleBindingList> listRoleBindingForAllNamespaces1Async(final ServiceCallback<V1beta1RoleBindingList> serviceCallback);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBindingList object
     */
    Observable<V1beta1RoleBindingList> listRoleBindingForAllNamespaces1Async();

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBindingList object
     */
    Observable<ServiceResponse<V1beta1RoleBindingList>> listRoleBindingForAllNamespaces1WithServiceResponseAsync();
    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1RoleBindingList object if successful.
     */
    V1beta1RoleBindingList listRoleBindingForAllNamespaces1(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1RoleBindingList> listRoleBindingForAllNamespaces1Async(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1beta1RoleBindingList> serviceCallback);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBindingList object
     */
    Observable<V1beta1RoleBindingList> listRoleBindingForAllNamespaces1Async(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind RoleBinding.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleBindingList object
     */
    Observable<ServiceResponse<V1beta1RoleBindingList>> listRoleBindingForAllNamespaces1WithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Role.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1RoleList object if successful.
     */
    V1beta1RoleList listRoleForAllNamespaces1();

    /**
     * list or watch objects of kind Role.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1RoleList> listRoleForAllNamespaces1Async(final ServiceCallback<V1beta1RoleList> serviceCallback);

    /**
     * list or watch objects of kind Role.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleList object
     */
    Observable<V1beta1RoleList> listRoleForAllNamespaces1Async();

    /**
     * list or watch objects of kind Role.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleList object
     */
    Observable<ServiceResponse<V1beta1RoleList>> listRoleForAllNamespaces1WithServiceResponseAsync();
    /**
     * list or watch objects of kind Role.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1RoleList object if successful.
     */
    V1beta1RoleList listRoleForAllNamespaces1(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Role.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1RoleList> listRoleForAllNamespaces1Async(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1beta1RoleList> serviceCallback);

    /**
     * list or watch objects of kind Role.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleList object
     */
    Observable<V1beta1RoleList> listRoleForAllNamespaces1Async(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind Role.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1RoleList object
     */
    Observable<ServiceResponse<V1beta1RoleList>> listRoleForAllNamespaces1WithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIGroup object if successful.
     */
    V1APIGroup getAPIGroup9();

    /**
     * get information of a group.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIGroup> getAPIGroup9Async(final ServiceCallback<V1APIGroup> serviceCallback);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<V1APIGroup> getAPIGroup9Async();

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<ServiceResponse<V1APIGroup>> getAPIGroup9WithServiceResponseAsync();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources15();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources15Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources15Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources15WithServiceResponseAsync();

    /**
     * list or watch objects of kind PodPreset.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1PodPresetList object if successful.
     */
    V1alpha1PodPresetList listNamespacedPodPreset(String namespace);

    /**
     * list or watch objects of kind PodPreset.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1PodPresetList> listNamespacedPodPresetAsync(String namespace, final ServiceCallback<V1alpha1PodPresetList> serviceCallback);

    /**
     * list or watch objects of kind PodPreset.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPresetList object
     */
    Observable<V1alpha1PodPresetList> listNamespacedPodPresetAsync(String namespace);

    /**
     * list or watch objects of kind PodPreset.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPresetList object
     */
    Observable<ServiceResponse<V1alpha1PodPresetList>> listNamespacedPodPresetWithServiceResponseAsync(String namespace);
    /**
     * list or watch objects of kind PodPreset.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1PodPresetList object if successful.
     */
    V1alpha1PodPresetList listNamespacedPodPreset(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind PodPreset.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1PodPresetList> listNamespacedPodPresetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1alpha1PodPresetList> serviceCallback);

    /**
     * list or watch objects of kind PodPreset.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPresetList object
     */
    Observable<V1alpha1PodPresetList> listNamespacedPodPresetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind PodPreset.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPresetList object
     */
    Observable<ServiceResponse<V1alpha1PodPresetList>> listNamespacedPodPresetWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a PodPreset.
     *
     * @param body the V1alpha1PodPreset value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1PodPreset object if successful.
     */
    V1alpha1PodPreset createNamespacedPodPreset(V1alpha1PodPreset body, String namespace);

    /**
     * create a PodPreset.
     *
     * @param body the V1alpha1PodPreset value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1PodPreset> createNamespacedPodPresetAsync(V1alpha1PodPreset body, String namespace, final ServiceCallback<V1alpha1PodPreset> serviceCallback);

    /**
     * create a PodPreset.
     *
     * @param body the V1alpha1PodPreset value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPreset object
     */
    Observable<V1alpha1PodPreset> createNamespacedPodPresetAsync(V1alpha1PodPreset body, String namespace);

    /**
     * create a PodPreset.
     *
     * @param body the V1alpha1PodPreset value
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPreset object
     */
    Observable<ServiceResponse<V1alpha1PodPreset>> createNamespacedPodPresetWithServiceResponseAsync(V1alpha1PodPreset body, String namespace);
    /**
     * create a PodPreset.
     *
     * @param body the V1alpha1PodPreset value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1PodPreset object if successful.
     */
    V1alpha1PodPreset createNamespacedPodPreset(V1alpha1PodPreset body, String namespace, String pretty);

    /**
     * create a PodPreset.
     *
     * @param body the V1alpha1PodPreset value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1PodPreset> createNamespacedPodPresetAsync(V1alpha1PodPreset body, String namespace, String pretty, final ServiceCallback<V1alpha1PodPreset> serviceCallback);

    /**
     * create a PodPreset.
     *
     * @param body the V1alpha1PodPreset value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPreset object
     */
    Observable<V1alpha1PodPreset> createNamespacedPodPresetAsync(V1alpha1PodPreset body, String namespace, String pretty);

    /**
     * create a PodPreset.
     *
     * @param body the V1alpha1PodPreset value
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPreset object
     */
    Observable<ServiceResponse<V1alpha1PodPreset>> createNamespacedPodPresetWithServiceResponseAsync(V1alpha1PodPreset body, String namespace, String pretty);

    /**
     * delete collection of PodPreset.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedPodPreset(String namespace);

    /**
     * delete collection of PodPreset.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedPodPresetAsync(String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of PodPreset.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedPodPresetAsync(String namespace);

    /**
     * delete collection of PodPreset.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedPodPresetWithServiceResponseAsync(String namespace);
    /**
     * delete collection of PodPreset.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionNamespacedPodPreset(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of PodPreset.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionNamespacedPodPresetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of PodPreset.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionNamespacedPodPresetAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of PodPreset.
     *
     * @param namespace object name and auth scope, such as for teams and projects
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionNamespacedPodPresetWithServiceResponseAsync(String namespace, String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified PodPreset.
     *
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1PodPreset object if successful.
     */
    V1alpha1PodPreset readNamespacedPodPreset(String name, String namespace);

    /**
     * read the specified PodPreset.
     *
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1PodPreset> readNamespacedPodPresetAsync(String name, String namespace, final ServiceCallback<V1alpha1PodPreset> serviceCallback);

    /**
     * read the specified PodPreset.
     *
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPreset object
     */
    Observable<V1alpha1PodPreset> readNamespacedPodPresetAsync(String name, String namespace);

    /**
     * read the specified PodPreset.
     *
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPreset object
     */
    Observable<ServiceResponse<V1alpha1PodPreset>> readNamespacedPodPresetWithServiceResponseAsync(String name, String namespace);
    /**
     * read the specified PodPreset.
     *
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1PodPreset object if successful.
     */
    V1alpha1PodPreset readNamespacedPodPreset(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified PodPreset.
     *
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1PodPreset> readNamespacedPodPresetAsync(String name, String namespace, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1alpha1PodPreset> serviceCallback);

    /**
     * read the specified PodPreset.
     *
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPreset object
     */
    Observable<V1alpha1PodPreset> readNamespacedPodPresetAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified PodPreset.
     *
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPreset object
     */
    Observable<ServiceResponse<V1alpha1PodPreset>> readNamespacedPodPresetWithServiceResponseAsync(String name, String namespace, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified PodPreset.
     *
     * @param body the V1alpha1PodPreset value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1PodPreset object if successful.
     */
    V1alpha1PodPreset replaceNamespacedPodPreset(V1alpha1PodPreset body, String name, String namespace);

    /**
     * replace the specified PodPreset.
     *
     * @param body the V1alpha1PodPreset value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1PodPreset> replaceNamespacedPodPresetAsync(V1alpha1PodPreset body, String name, String namespace, final ServiceCallback<V1alpha1PodPreset> serviceCallback);

    /**
     * replace the specified PodPreset.
     *
     * @param body the V1alpha1PodPreset value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPreset object
     */
    Observable<V1alpha1PodPreset> replaceNamespacedPodPresetAsync(V1alpha1PodPreset body, String name, String namespace);

    /**
     * replace the specified PodPreset.
     *
     * @param body the V1alpha1PodPreset value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPreset object
     */
    Observable<ServiceResponse<V1alpha1PodPreset>> replaceNamespacedPodPresetWithServiceResponseAsync(V1alpha1PodPreset body, String name, String namespace);
    /**
     * replace the specified PodPreset.
     *
     * @param body the V1alpha1PodPreset value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1PodPreset object if successful.
     */
    V1alpha1PodPreset replaceNamespacedPodPreset(V1alpha1PodPreset body, String name, String namespace, String pretty);

    /**
     * replace the specified PodPreset.
     *
     * @param body the V1alpha1PodPreset value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1PodPreset> replaceNamespacedPodPresetAsync(V1alpha1PodPreset body, String name, String namespace, String pretty, final ServiceCallback<V1alpha1PodPreset> serviceCallback);

    /**
     * replace the specified PodPreset.
     *
     * @param body the V1alpha1PodPreset value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPreset object
     */
    Observable<V1alpha1PodPreset> replaceNamespacedPodPresetAsync(V1alpha1PodPreset body, String name, String namespace, String pretty);

    /**
     * replace the specified PodPreset.
     *
     * @param body the V1alpha1PodPreset value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPreset object
     */
    Observable<ServiceResponse<V1alpha1PodPreset>> replaceNamespacedPodPresetWithServiceResponseAsync(V1alpha1PodPreset body, String name, String namespace, String pretty);

    /**
     * delete a PodPreset.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedPodPreset(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a PodPreset.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedPodPresetAsync(V1DeleteOptions body, String name, String namespace, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a PodPreset.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedPodPresetAsync(V1DeleteOptions body, String name, String namespace);

    /**
     * delete a PodPreset.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedPodPresetWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace);
    /**
     * delete a PodPreset.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteNamespacedPodPreset(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a PodPreset.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteNamespacedPodPresetAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a PodPreset.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteNamespacedPodPresetAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a PodPreset.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteNamespacedPodPresetWithServiceResponseAsync(V1DeleteOptions body, String name, String namespace, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified PodPreset.
     *
     * @param body the Object value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1PodPreset object if successful.
     */
    V1alpha1PodPreset patchNamespacedPodPreset(Object body, String name, String namespace);

    /**
     * partially update the specified PodPreset.
     *
     * @param body the Object value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1PodPreset> patchNamespacedPodPresetAsync(Object body, String name, String namespace, final ServiceCallback<V1alpha1PodPreset> serviceCallback);

    /**
     * partially update the specified PodPreset.
     *
     * @param body the Object value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPreset object
     */
    Observable<V1alpha1PodPreset> patchNamespacedPodPresetAsync(Object body, String name, String namespace);

    /**
     * partially update the specified PodPreset.
     *
     * @param body the Object value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPreset object
     */
    Observable<ServiceResponse<V1alpha1PodPreset>> patchNamespacedPodPresetWithServiceResponseAsync(Object body, String name, String namespace);
    /**
     * partially update the specified PodPreset.
     *
     * @param body the Object value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1PodPreset object if successful.
     */
    V1alpha1PodPreset patchNamespacedPodPreset(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified PodPreset.
     *
     * @param body the Object value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1PodPreset> patchNamespacedPodPresetAsync(Object body, String name, String namespace, String pretty, final ServiceCallback<V1alpha1PodPreset> serviceCallback);

    /**
     * partially update the specified PodPreset.
     *
     * @param body the Object value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPreset object
     */
    Observable<V1alpha1PodPreset> patchNamespacedPodPresetAsync(Object body, String name, String namespace, String pretty);

    /**
     * partially update the specified PodPreset.
     *
     * @param body the Object value
     * @param name name of the PodPreset
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPreset object
     */
    Observable<ServiceResponse<V1alpha1PodPreset>> patchNamespacedPodPresetWithServiceResponseAsync(Object body, String name, String namespace, String pretty);

    /**
     * list or watch objects of kind PodPreset.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1PodPresetList object if successful.
     */
    V1alpha1PodPresetList listPodPresetForAllNamespaces();

    /**
     * list or watch objects of kind PodPreset.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1PodPresetList> listPodPresetForAllNamespacesAsync(final ServiceCallback<V1alpha1PodPresetList> serviceCallback);

    /**
     * list or watch objects of kind PodPreset.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPresetList object
     */
    Observable<V1alpha1PodPresetList> listPodPresetForAllNamespacesAsync();

    /**
     * list or watch objects of kind PodPreset.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPresetList object
     */
    Observable<ServiceResponse<V1alpha1PodPresetList>> listPodPresetForAllNamespacesWithServiceResponseAsync();
    /**
     * list or watch objects of kind PodPreset.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1alpha1PodPresetList object if successful.
     */
    V1alpha1PodPresetList listPodPresetForAllNamespaces(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind PodPreset.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1alpha1PodPresetList> listPodPresetForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch, final ServiceCallback<V1alpha1PodPresetList> serviceCallback);

    /**
     * list or watch objects of kind PodPreset.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPresetList object
     */
    Observable<V1alpha1PodPresetList> listPodPresetForAllNamespacesAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * list or watch objects of kind PodPreset.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param pretty If 'true', then the output is pretty printed.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1alpha1PodPresetList object
     */
    Observable<ServiceResponse<V1alpha1PodPresetList>> listPodPresetForAllNamespacesWithServiceResponseAsync(String fieldSelector, String labelSelector, String pretty, String resourceVersion, Integer timeoutSeconds, Boolean watch);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIGroup object if successful.
     */
    V1APIGroup getAPIGroup10();

    /**
     * get information of a group.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIGroup> getAPIGroup10Async(final ServiceCallback<V1APIGroup> serviceCallback);

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<V1APIGroup> getAPIGroup10Async();

    /**
     * get information of a group.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIGroup object
     */
    Observable<ServiceResponse<V1APIGroup>> getAPIGroup10WithServiceResponseAsync();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources16();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources16Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources16Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources16WithServiceResponseAsync();

    /**
     * list or watch objects of kind StorageClass.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1StorageClassList object if successful.
     */
    V1StorageClassList listStorageClass();

    /**
     * list or watch objects of kind StorageClass.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1StorageClassList> listStorageClassAsync(final ServiceCallback<V1StorageClassList> serviceCallback);

    /**
     * list or watch objects of kind StorageClass.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClassList object
     */
    Observable<V1StorageClassList> listStorageClassAsync();

    /**
     * list or watch objects of kind StorageClass.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClassList object
     */
    Observable<ServiceResponse<V1StorageClassList>> listStorageClassWithServiceResponseAsync();
    /**
     * list or watch objects of kind StorageClass.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1StorageClassList object if successful.
     */
    V1StorageClassList listStorageClass(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind StorageClass.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1StorageClassList> listStorageClassAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1StorageClassList> serviceCallback);

    /**
     * list or watch objects of kind StorageClass.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClassList object
     */
    Observable<V1StorageClassList> listStorageClassAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind StorageClass.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClassList object
     */
    Observable<ServiceResponse<V1StorageClassList>> listStorageClassWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a StorageClass.
     *
     * @param body the V1StorageClass value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1StorageClass object if successful.
     */
    V1StorageClass createStorageClass(V1StorageClass body);

    /**
     * create a StorageClass.
     *
     * @param body the V1StorageClass value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1StorageClass> createStorageClassAsync(V1StorageClass body, final ServiceCallback<V1StorageClass> serviceCallback);

    /**
     * create a StorageClass.
     *
     * @param body the V1StorageClass value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClass object
     */
    Observable<V1StorageClass> createStorageClassAsync(V1StorageClass body);

    /**
     * create a StorageClass.
     *
     * @param body the V1StorageClass value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClass object
     */
    Observable<ServiceResponse<V1StorageClass>> createStorageClassWithServiceResponseAsync(V1StorageClass body);
    /**
     * create a StorageClass.
     *
     * @param body the V1StorageClass value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1StorageClass object if successful.
     */
    V1StorageClass createStorageClass(V1StorageClass body, String pretty);

    /**
     * create a StorageClass.
     *
     * @param body the V1StorageClass value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1StorageClass> createStorageClassAsync(V1StorageClass body, String pretty, final ServiceCallback<V1StorageClass> serviceCallback);

    /**
     * create a StorageClass.
     *
     * @param body the V1StorageClass value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClass object
     */
    Observable<V1StorageClass> createStorageClassAsync(V1StorageClass body, String pretty);

    /**
     * create a StorageClass.
     *
     * @param body the V1StorageClass value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClass object
     */
    Observable<ServiceResponse<V1StorageClass>> createStorageClassWithServiceResponseAsync(V1StorageClass body, String pretty);

    /**
     * delete collection of StorageClass.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionStorageClass();

    /**
     * delete collection of StorageClass.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionStorageClassAsync(final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of StorageClass.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionStorageClassAsync();

    /**
     * delete collection of StorageClass.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionStorageClassWithServiceResponseAsync();
    /**
     * delete collection of StorageClass.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionStorageClass(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of StorageClass.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionStorageClassAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of StorageClass.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionStorageClassAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of StorageClass.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionStorageClassWithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified StorageClass.
     *
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1StorageClass object if successful.
     */
    V1StorageClass readStorageClass(String name);

    /**
     * read the specified StorageClass.
     *
     * @param name name of the StorageClass
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1StorageClass> readStorageClassAsync(String name, final ServiceCallback<V1StorageClass> serviceCallback);

    /**
     * read the specified StorageClass.
     *
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClass object
     */
    Observable<V1StorageClass> readStorageClassAsync(String name);

    /**
     * read the specified StorageClass.
     *
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClass object
     */
    Observable<ServiceResponse<V1StorageClass>> readStorageClassWithServiceResponseAsync(String name);
    /**
     * read the specified StorageClass.
     *
     * @param name name of the StorageClass
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1StorageClass object if successful.
     */
    V1StorageClass readStorageClass(String name, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified StorageClass.
     *
     * @param name name of the StorageClass
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1StorageClass> readStorageClassAsync(String name, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1StorageClass> serviceCallback);

    /**
     * read the specified StorageClass.
     *
     * @param name name of the StorageClass
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClass object
     */
    Observable<V1StorageClass> readStorageClassAsync(String name, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified StorageClass.
     *
     * @param name name of the StorageClass
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClass object
     */
    Observable<ServiceResponse<V1StorageClass>> readStorageClassWithServiceResponseAsync(String name, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified StorageClass.
     *
     * @param body the V1StorageClass value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1StorageClass object if successful.
     */
    V1StorageClass replaceStorageClass(V1StorageClass body, String name);

    /**
     * replace the specified StorageClass.
     *
     * @param body the V1StorageClass value
     * @param name name of the StorageClass
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1StorageClass> replaceStorageClassAsync(V1StorageClass body, String name, final ServiceCallback<V1StorageClass> serviceCallback);

    /**
     * replace the specified StorageClass.
     *
     * @param body the V1StorageClass value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClass object
     */
    Observable<V1StorageClass> replaceStorageClassAsync(V1StorageClass body, String name);

    /**
     * replace the specified StorageClass.
     *
     * @param body the V1StorageClass value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClass object
     */
    Observable<ServiceResponse<V1StorageClass>> replaceStorageClassWithServiceResponseAsync(V1StorageClass body, String name);
    /**
     * replace the specified StorageClass.
     *
     * @param body the V1StorageClass value
     * @param name name of the StorageClass
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1StorageClass object if successful.
     */
    V1StorageClass replaceStorageClass(V1StorageClass body, String name, String pretty);

    /**
     * replace the specified StorageClass.
     *
     * @param body the V1StorageClass value
     * @param name name of the StorageClass
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1StorageClass> replaceStorageClassAsync(V1StorageClass body, String name, String pretty, final ServiceCallback<V1StorageClass> serviceCallback);

    /**
     * replace the specified StorageClass.
     *
     * @param body the V1StorageClass value
     * @param name name of the StorageClass
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClass object
     */
    Observable<V1StorageClass> replaceStorageClassAsync(V1StorageClass body, String name, String pretty);

    /**
     * replace the specified StorageClass.
     *
     * @param body the V1StorageClass value
     * @param name name of the StorageClass
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClass object
     */
    Observable<ServiceResponse<V1StorageClass>> replaceStorageClassWithServiceResponseAsync(V1StorageClass body, String name, String pretty);

    /**
     * delete a StorageClass.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteStorageClass(V1DeleteOptions body, String name);

    /**
     * delete a StorageClass.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StorageClass
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteStorageClassAsync(V1DeleteOptions body, String name, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a StorageClass.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteStorageClassAsync(V1DeleteOptions body, String name);

    /**
     * delete a StorageClass.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteStorageClassWithServiceResponseAsync(V1DeleteOptions body, String name);
    /**
     * delete a StorageClass.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StorageClass
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteStorageClass(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a StorageClass.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StorageClass
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteStorageClassAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a StorageClass.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StorageClass
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteStorageClassAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a StorageClass.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StorageClass
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteStorageClassWithServiceResponseAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified StorageClass.
     *
     * @param body the Object value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1StorageClass object if successful.
     */
    V1StorageClass patchStorageClass(Object body, String name);

    /**
     * partially update the specified StorageClass.
     *
     * @param body the Object value
     * @param name name of the StorageClass
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1StorageClass> patchStorageClassAsync(Object body, String name, final ServiceCallback<V1StorageClass> serviceCallback);

    /**
     * partially update the specified StorageClass.
     *
     * @param body the Object value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClass object
     */
    Observable<V1StorageClass> patchStorageClassAsync(Object body, String name);

    /**
     * partially update the specified StorageClass.
     *
     * @param body the Object value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClass object
     */
    Observable<ServiceResponse<V1StorageClass>> patchStorageClassWithServiceResponseAsync(Object body, String name);
    /**
     * partially update the specified StorageClass.
     *
     * @param body the Object value
     * @param name name of the StorageClass
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1StorageClass object if successful.
     */
    V1StorageClass patchStorageClass(Object body, String name, String pretty);

    /**
     * partially update the specified StorageClass.
     *
     * @param body the Object value
     * @param name name of the StorageClass
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1StorageClass> patchStorageClassAsync(Object body, String name, String pretty, final ServiceCallback<V1StorageClass> serviceCallback);

    /**
     * partially update the specified StorageClass.
     *
     * @param body the Object value
     * @param name name of the StorageClass
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClass object
     */
    Observable<V1StorageClass> patchStorageClassAsync(Object body, String name, String pretty);

    /**
     * partially update the specified StorageClass.
     *
     * @param body the Object value
     * @param name name of the StorageClass
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1StorageClass object
     */
    Observable<ServiceResponse<V1StorageClass>> patchStorageClassWithServiceResponseAsync(Object body, String name, String pretty);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1APIResourceList object if successful.
     */
    V1APIResourceList getAPIResources17();

    /**
     * get available resources.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1APIResourceList> getAPIResources17Async(final ServiceCallback<V1APIResourceList> serviceCallback);

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<V1APIResourceList> getAPIResources17Async();

    /**
     * get available resources.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1APIResourceList object
     */
    Observable<ServiceResponse<V1APIResourceList>> getAPIResources17WithServiceResponseAsync();

    /**
     * list or watch objects of kind StorageClass.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StorageClassList object if successful.
     */
    V1beta1StorageClassList listStorageClass1();

    /**
     * list or watch objects of kind StorageClass.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StorageClassList> listStorageClass1Async(final ServiceCallback<V1beta1StorageClassList> serviceCallback);

    /**
     * list or watch objects of kind StorageClass.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClassList object
     */
    Observable<V1beta1StorageClassList> listStorageClass1Async();

    /**
     * list or watch objects of kind StorageClass.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClassList object
     */
    Observable<ServiceResponse<V1beta1StorageClassList>> listStorageClass1WithServiceResponseAsync();
    /**
     * list or watch objects of kind StorageClass.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StorageClassList object if successful.
     */
    V1beta1StorageClassList listStorageClass1(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind StorageClass.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StorageClassList> listStorageClass1Async(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1beta1StorageClassList> serviceCallback);

    /**
     * list or watch objects of kind StorageClass.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClassList object
     */
    Observable<V1beta1StorageClassList> listStorageClass1Async(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * list or watch objects of kind StorageClass.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClassList object
     */
    Observable<ServiceResponse<V1beta1StorageClassList>> listStorageClass1WithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * create a StorageClass.
     *
     * @param body the V1beta1StorageClass value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StorageClass object if successful.
     */
    V1beta1StorageClass createStorageClass1(V1beta1StorageClass body);

    /**
     * create a StorageClass.
     *
     * @param body the V1beta1StorageClass value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StorageClass> createStorageClass1Async(V1beta1StorageClass body, final ServiceCallback<V1beta1StorageClass> serviceCallback);

    /**
     * create a StorageClass.
     *
     * @param body the V1beta1StorageClass value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClass object
     */
    Observable<V1beta1StorageClass> createStorageClass1Async(V1beta1StorageClass body);

    /**
     * create a StorageClass.
     *
     * @param body the V1beta1StorageClass value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClass object
     */
    Observable<ServiceResponse<V1beta1StorageClass>> createStorageClass1WithServiceResponseAsync(V1beta1StorageClass body);
    /**
     * create a StorageClass.
     *
     * @param body the V1beta1StorageClass value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StorageClass object if successful.
     */
    V1beta1StorageClass createStorageClass1(V1beta1StorageClass body, String pretty);

    /**
     * create a StorageClass.
     *
     * @param body the V1beta1StorageClass value
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StorageClass> createStorageClass1Async(V1beta1StorageClass body, String pretty, final ServiceCallback<V1beta1StorageClass> serviceCallback);

    /**
     * create a StorageClass.
     *
     * @param body the V1beta1StorageClass value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClass object
     */
    Observable<V1beta1StorageClass> createStorageClass1Async(V1beta1StorageClass body, String pretty);

    /**
     * create a StorageClass.
     *
     * @param body the V1beta1StorageClass value
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClass object
     */
    Observable<ServiceResponse<V1beta1StorageClass>> createStorageClass1WithServiceResponseAsync(V1beta1StorageClass body, String pretty);

    /**
     * delete collection of StorageClass.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionStorageClass1();

    /**
     * delete collection of StorageClass.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionStorageClass1Async(final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of StorageClass.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionStorageClass1Async();

    /**
     * delete collection of StorageClass.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionStorageClass1WithServiceResponseAsync();
    /**
     * delete collection of StorageClass.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteCollectionStorageClass1(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of StorageClass.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteCollectionStorageClass1Async(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete collection of StorageClass.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteCollectionStorageClass1Async(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * delete collection of StorageClass.
     *
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param timeoutSeconds Timeout for the list/watch call.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteCollectionStorageClass1WithServiceResponseAsync(String fieldSelector, String labelSelector, String resourceVersion, Integer timeoutSeconds, Boolean watch, String pretty);

    /**
     * read the specified StorageClass.
     *
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StorageClass object if successful.
     */
    V1beta1StorageClass readStorageClass1(String name);

    /**
     * read the specified StorageClass.
     *
     * @param name name of the StorageClass
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StorageClass> readStorageClass1Async(String name, final ServiceCallback<V1beta1StorageClass> serviceCallback);

    /**
     * read the specified StorageClass.
     *
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClass object
     */
    Observable<V1beta1StorageClass> readStorageClass1Async(String name);

    /**
     * read the specified StorageClass.
     *
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClass object
     */
    Observable<ServiceResponse<V1beta1StorageClass>> readStorageClass1WithServiceResponseAsync(String name);
    /**
     * read the specified StorageClass.
     *
     * @param name name of the StorageClass
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StorageClass object if successful.
     */
    V1beta1StorageClass readStorageClass1(String name, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified StorageClass.
     *
     * @param name name of the StorageClass
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StorageClass> readStorageClass1Async(String name, Boolean exact, Boolean export, String pretty, final ServiceCallback<V1beta1StorageClass> serviceCallback);

    /**
     * read the specified StorageClass.
     *
     * @param name name of the StorageClass
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClass object
     */
    Observable<V1beta1StorageClass> readStorageClass1Async(String name, Boolean exact, Boolean export, String pretty);

    /**
     * read the specified StorageClass.
     *
     * @param name name of the StorageClass
     * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'.
     * @param export Should this value be exported.  Export strips fields that a user can not specify.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClass object
     */
    Observable<ServiceResponse<V1beta1StorageClass>> readStorageClass1WithServiceResponseAsync(String name, Boolean exact, Boolean export, String pretty);

    /**
     * replace the specified StorageClass.
     *
     * @param body the V1beta1StorageClass value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StorageClass object if successful.
     */
    V1beta1StorageClass replaceStorageClass1(V1beta1StorageClass body, String name);

    /**
     * replace the specified StorageClass.
     *
     * @param body the V1beta1StorageClass value
     * @param name name of the StorageClass
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StorageClass> replaceStorageClass1Async(V1beta1StorageClass body, String name, final ServiceCallback<V1beta1StorageClass> serviceCallback);

    /**
     * replace the specified StorageClass.
     *
     * @param body the V1beta1StorageClass value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClass object
     */
    Observable<V1beta1StorageClass> replaceStorageClass1Async(V1beta1StorageClass body, String name);

    /**
     * replace the specified StorageClass.
     *
     * @param body the V1beta1StorageClass value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClass object
     */
    Observable<ServiceResponse<V1beta1StorageClass>> replaceStorageClass1WithServiceResponseAsync(V1beta1StorageClass body, String name);
    /**
     * replace the specified StorageClass.
     *
     * @param body the V1beta1StorageClass value
     * @param name name of the StorageClass
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StorageClass object if successful.
     */
    V1beta1StorageClass replaceStorageClass1(V1beta1StorageClass body, String name, String pretty);

    /**
     * replace the specified StorageClass.
     *
     * @param body the V1beta1StorageClass value
     * @param name name of the StorageClass
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StorageClass> replaceStorageClass1Async(V1beta1StorageClass body, String name, String pretty, final ServiceCallback<V1beta1StorageClass> serviceCallback);

    /**
     * replace the specified StorageClass.
     *
     * @param body the V1beta1StorageClass value
     * @param name name of the StorageClass
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClass object
     */
    Observable<V1beta1StorageClass> replaceStorageClass1Async(V1beta1StorageClass body, String name, String pretty);

    /**
     * replace the specified StorageClass.
     *
     * @param body the V1beta1StorageClass value
     * @param name name of the StorageClass
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClass object
     */
    Observable<ServiceResponse<V1beta1StorageClass>> replaceStorageClass1WithServiceResponseAsync(V1beta1StorageClass body, String name, String pretty);

    /**
     * delete a StorageClass.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteStorageClass1(V1DeleteOptions body, String name);

    /**
     * delete a StorageClass.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StorageClass
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteStorageClass1Async(V1DeleteOptions body, String name, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a StorageClass.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteStorageClass1Async(V1DeleteOptions body, String name);

    /**
     * delete a StorageClass.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteStorageClass1WithServiceResponseAsync(V1DeleteOptions body, String name);
    /**
     * delete a StorageClass.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StorageClass
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1Status object if successful.
     */
    V1Status deleteStorageClass1(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a StorageClass.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StorageClass
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1Status> deleteStorageClass1Async(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty, final ServiceCallback<V1Status> serviceCallback);

    /**
     * delete a StorageClass.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StorageClass
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<V1Status> deleteStorageClass1Async(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * delete a StorageClass.
     *
     * @param body the V1DeleteOptions value
     * @param name name of the StorageClass
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1Status object
     */
    Observable<ServiceResponse<V1Status>> deleteStorageClass1WithServiceResponseAsync(V1DeleteOptions body, String name, Integer gracePeriodSeconds, Boolean orphanDependents, String propagationPolicy, String pretty);

    /**
     * partially update the specified StorageClass.
     *
     * @param body the Object value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StorageClass object if successful.
     */
    V1beta1StorageClass patchStorageClass1(Object body, String name);

    /**
     * partially update the specified StorageClass.
     *
     * @param body the Object value
     * @param name name of the StorageClass
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StorageClass> patchStorageClass1Async(Object body, String name, final ServiceCallback<V1beta1StorageClass> serviceCallback);

    /**
     * partially update the specified StorageClass.
     *
     * @param body the Object value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClass object
     */
    Observable<V1beta1StorageClass> patchStorageClass1Async(Object body, String name);

    /**
     * partially update the specified StorageClass.
     *
     * @param body the Object value
     * @param name name of the StorageClass
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClass object
     */
    Observable<ServiceResponse<V1beta1StorageClass>> patchStorageClass1WithServiceResponseAsync(Object body, String name);
    /**
     * partially update the specified StorageClass.
     *
     * @param body the Object value
     * @param name name of the StorageClass
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the V1beta1StorageClass object if successful.
     */
    V1beta1StorageClass patchStorageClass1(Object body, String name, String pretty);

    /**
     * partially update the specified StorageClass.
     *
     * @param body the Object value
     * @param name name of the StorageClass
     * @param pretty If 'true', then the output is pretty printed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<V1beta1StorageClass> patchStorageClass1Async(Object body, String name, String pretty, final ServiceCallback<V1beta1StorageClass> serviceCallback);

    /**
     * partially update the specified StorageClass.
     *
     * @param body the Object value
     * @param name name of the StorageClass
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClass object
     */
    Observable<V1beta1StorageClass> patchStorageClass1Async(Object body, String name, String pretty);

    /**
     * partially update the specified StorageClass.
     *
     * @param body the Object value
     * @param name name of the StorageClass
     * @param pretty If 'true', then the output is pretty printed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the V1beta1StorageClass object
     */
    Observable<ServiceResponse<V1beta1StorageClass>> patchStorageClass1WithServiceResponseAsync(Object body, String name, String pretty);

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void logFileListHandler();

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> logFileListHandlerAsync(final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> logFileListHandlerAsync();

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> logFileListHandlerWithServiceResponseAsync();

    /**
     *
     * @param logpath path to the log
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void logFileHandler(String logpath);

    /**
     *
     * @param logpath path to the log
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> logFileHandlerAsync(String logpath, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @param logpath path to the log
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> logFileHandlerAsync(String logpath);

    /**
     *
     * @param logpath path to the log
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> logFileHandlerWithServiceResponseAsync(String logpath);

    /**
     * get the code version.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the VersionInfo object if successful.
     */
    VersionInfo getCode();

    /**
     * get the code version.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<VersionInfo> getCodeAsync(final ServiceCallback<VersionInfo> serviceCallback);

    /**
     * get the code version.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VersionInfo object
     */
    Observable<VersionInfo> getCodeAsync();

    /**
     * get the code version.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the VersionInfo object
     */
    Observable<ServiceResponse<VersionInfo>> getCodeWithServiceResponseAsync();

}
